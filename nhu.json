[{" ": []},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <code>pthread_kill</code> which let you signal a given thread. You can then use a daemon thread that calls <code>sleep</code> and <code>pthread_kill</code> in a controlled loop to clock your given thread.</p>\n\n<p>If you care about global process timers interactions with sleep, then you can use <code>usleep</code> (or <code>nanosleep</code>).</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Where to begin... do you even understand what a leap year is? I don't think that you do. It's <em>not</em> once every four years.</p>\n\n<p>Here, try this.</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;math.h&gt;\n\ndouble mod(double x, double y)\n{\n    return x - y * floor(x / y);\n}\n\nbool gregorian_leap_year(int year)\n{\n    return (\n        mod(year, 4) == 0 &amp;&amp;\n        !(mod(year, 400) == 100 ||\n          mod(year, 400) == 200 ||\n          mod(year, 400) == 300)) ? true : false;\n}\n\nint fixed_from_gregorian(int year, int month, int day)\n{\n    int correction, f;\n    if (month &lt;= 2) correction = 0;\n    else if (month &gt; 2 &amp;&amp; gregorian_leap_year(year)) correction = -1;\n    else correction = -2;\n\n    f = 365 * (year - 1) +\n        floor((year - 1) / 4.0) -\n        floor((year - 1) / 100.0) +\n        floor((year - 1) / 400.0) +\n        floor((367 * month - 362) / 12.0) +\n        correction + day;\n    return f;\n}\n\nchar *daynames[] = {\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n};\n\nint main(int argc, char *argv[])\n{\n    int present_year;\n    printf(\"Enter the year you want to check\\n\");\n    scanf(\"%d\", &amp;present_year);\n\n    int f = fixed_from_gregorian(present_year, 1, 1);\n    int day = (int)mod(f,7);\n\n    printf(\"January 1 of year %d will be %s\\n\", present_year, daynames[day]);\n\n    return 0;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I don't know why you have initialized with 1 Jan 2001 while you can initialize it with 1 Jan 0001 which is Monday. And then simply find the odd days and calculate the day on 1 jan XXXX</p>\n\n<pre><code>odd_days=(year-1) + leap_years;\n</code></pre>\n\n<ul>\n<li>Here <em>year</em> is the <strong>user input</strong></li>\n</ul>\n\n<p>and then</p>\n\n<pre><code>day=odd_days%7;\n</code></pre>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Consider the statement <code>printf(\"hello\");</code></p>\n\n<p>This statement sends the string literal <code>\"hello\"</code> to the <code>printf();</code> function.</p>\n\n<hr>\n\n<p>Lets now separately consider the code</p>\n\n<pre><code>char* a = \"hello\";\n</code></pre>\n\n<p>This would point to an address where the string literal <code>\"hello\"</code> is stored.</p>\n\n<p>What if one does</p>\n\n<pre><code>char* a = \"hello\" + 1;\n</code></pre>\n\n<p>It will make <code>a</code> point to an address where <code>\"ello\"</code> is stored. Address of <code>\"hello\" + 1</code>, which points to address of the string literal <code>\"ello\"</code></p>\n\n<hr>\n\n<p>Apply this to your code</p>\n\n<pre><code>printf(\"hello\"+!f);\n</code></pre>\n\n<p><code>f</code> has value <code>1</code>. <code>!f</code> will have value <code>0</code>. So, eventually it will point to the address of the string literal <code>\"hello\" + 0</code>, which is <code>\"hello\"</code>. That is then passed to the <code>printf()</code>.</p>\n\n<hr>\n\n<p>You are not getting an error because it is not an error.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>printf(\"hello\"+!f);\n</code></pre>\n\n<p>What it is actually doing is; first the value of <code>!f</code> is added to the address of the string \"hello\" (so not to the value hello, but to the pointer value).</p>\n\n<p>Whether or not that's meaningful depends on the value of <code>!f</code>. If it's less than the length of that string, you'll get a pointer that points somewhere in the middle of the string. If it's larger than the length of the string, it'll point outside the string and an attempt to access it will result in undefined behavior (at best, a crash; at worst, unexpected behavior elsewhere in your program).</p>\n\n<p>Since in your case <code>!f</code> is just 0 it will just output the string \"hello\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Many programming languages use the plus operator to concatenate strings, like <code>\"Hello\" + \" world\"</code>. Often integers silently converted to strings, so <code>\"num=\" + num</code> might work as intended. C is different.</p><p> As Haris perfectly explained, your code is not wrong. So there is no reason to issue an error. </p><p>But your compiler raises concerns, whether you really meant what you have written. Google would say: You are sending <code>\"hello\"</code>/<code>\"ello\"</code> to printf(). Did you mean <code>\"hello0\"</code>/<code>\"hello1\"</code>?</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your load function looks OK. In your unload function you must first descend all nodes, then free the bottom node, then go one level up etcetera:</p>\n\n<pre><code>void recursive_free (node* node_to_free)\n{\n    for (int i = 0; i &lt; NB_NODES; i++)\n    {\n        // if children found\n        if (node_to_free-&gt;children[i])\n        {\n            recursive_free(node_to_free-&gt;children[i]);\n        }\n    }\n    free(node_to_free);\n}\n</code></pre>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>1.</strong> You don't leave spaces for null terminator , as you pass them to <code>strlen()</code> ,therefore your code exhibits <em>undefined behaviour</em> -</p>\n\n<pre><code>char pal[8] = \"ciaooaic\";\nchar pal1[7] = \"ciaoaic\";\n</code></pre>\n\n<p>Leave a space for <code>'\\0'</code>. Declare and initialize like this -</p>\n\n<pre><code>char pal[9] = \"ciaooaic\";\nchar pal1[8] = \"ciaoaic\";\n</code></pre>\n\n<p><strong>2.</strong> And <code>strlen()</code> returns <code>size_t</code> not <code>int</code> , so write like this -</p>\n\n<pre><code>size_t lenPal = strlen(pal);\nsize_t lenPal1 = strlen(pal1);\n</code></pre>\n\n<p>and use <code>%zu</code> specifier to print these both variables .</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have not kept space for the NULL terminating character <code>\\0</code>.</p>\n\n<hr>\n\n<p>Either increase the size of the array by <code>1</code></p>\n\n<pre><code>char pal[9] = \"ciaooaic\";\nchar pal1[8] = \"ciaoaic\";\n</code></pre>\n\n<p>OR</p>\n\n<p>Do not specify the length at all</p>\n\n<pre><code>char pal[] = \"ciaooaic\";\nchar pal1[] = \"ciaoaic\";\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Both the above answers are sufficient to solve your doubts.\nIncrease the the length of both pal and pal1 by one as there there is no space for the assignment of the null character( '\\0') at the end.\nHowever there is small trick to print the non null terminated character using printf</p>\n\n<pre><code>printf(\"strlen('%.*s'): %d\\n\",8, pal, lenPal);\nprintf(\"strlen('%.*s'): %d\\n\",7, pal1, lenPal1);\n</code></pre>\n\n<p>Link for the above trick:<a href=\"http://stackoverflow.com/questions/3767284/using-printf-with-a-non-null-terminated-string\">BRILLIANT</a></p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The OS will handle the memory for thread-local storage (TLS), and maintain both that <code>%gs</code> [or it's base address] is updated when the next thread is loaded, and that memory is allocated [1] when a new thread is created.</p>\n\n<p>The compiler &amp; linker is responsible for calculating the size and respective offsets into the TLS - in this case, it would seem that the implementation uses negative offsets from the base-address, so your particular variable is at -0x30 from <code>%gs</code>.</p>\n\n<p>[When you say \"I know <code>%gs</code> is 0x080fd840, you mean that the base-address for the segment is that value, right? Since <code>%gs</code> would be a 16-bit index into a x86 descriptor-table]</p>\n\n<p>[1] This may mean that the OS just makes a virtual address available for the TLS, but that the actual allocation of PHYSICAL memory happens \"as needed\", in the same way that an executable file, shared library or large memory allocation is done.</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li><p>Your <code>for</code> loop only has one line of code inside of it,</p>\n\n<pre><code>printf(\"\\n Enter Number %d\\n\", i);\n</code></pre>\n\n<p>so the output is correct.</p></li>\n<li><p>The <code>main()</code> must return <code>int</code>.</p></li>\n<li>You <strong>must</strong> check the return value of <code>scanf()</code>.</li>\n<li><p>You can use something like this</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nint calsum(int x, int y, int z);\nint getinteger();\n\nint main()\n{\n    int a, b, c, z;\n\n    a = getinteger(1);\n    b = getinteger(2);\n    c = getinteger(3);\n\n    z = calsum(a, b, c);\n\n    printf(\"\\nSum = %d\", z);\n\n    return 0;\n}\n\nint calsum(int x, int y, int z)\n{\n    int d;\n    d = x + y  +z;\n    return d;\n}\n\nint getinteger(int index)\n{\n    int value;\n    printf(\"Enter the %dth number &gt; \", index);\n    while (scanf(\"%d\", &amp;value) != 1)\n    {\n        int chr;\n        while (((chr = getchar()) != '\\n') &amp;&amp; (chr != EOF))\n            continue;\n        printf(\"Invalid input -- try again\\n\");\n        printf(\"Enter the %dth number &gt; \", index);\n    }\n    return value;\n}\n</code></pre></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use arrays for that</p>\n\n<pre><code>int a[3], i, sum;\nfor (i = 0; i &lt; 3 ; i++)\n{\n    printf(\"\\n Enter Number %d\\n\", i+1);\n    scanf(\"%d\", &amp;a[i]);\n}\nsum = calsum(a[0], a[1], a[2]);\n</code></pre>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you declared your variables</p>\n\n<pre><code>    int i = 0;\n    int n;\n    char c;\n    char s[4];\n</code></pre>\n\n<p>assuming the stack overflows \"up\" past <code>c</code>, you are relying upon an assumption which may not be true, i.e., that the variables are immediately adjacent on the stack.  This may not be true because there may be a \"stack guard\" or \"stack canary\" between variables.</p>\n\n<p>To read more about this, look for \"stack guard\" and \"stack canaries\":</p>\n\n<ul>\n<li><a href=\"http://www.cse.scu.edu/~tschwarz/coen152_05/Lectures/BufferOverflow.html\" rel=\"nofollow\">COEN 152 Computer Forensics: Buffer Overflow Attack</a></li>\n<li><a href=\"ftp://ftp.uvsq.fr/pub/gcc/summit/2003/Stackguard.pdf\" rel=\"nofollow\">StackGuard: Simple Stack Smash Protection for GCC</a></li>\n<li><a href=\"http://www.coresecurity.com/files/attachments/StackGuard.pdf\" rel=\"nofollow\">Four different tricks to bypass StackShield and\nStackGuard protection</a></li>\n<li><a href=\"http://security.stackexchange.com/questions/20497/stack-overflows-defeating-canaries-aslr-dep-nx\">Stack Overflows - Defeating Canaries, ASLR, DEP, NX</a></li>\n<li><a href=\"http://duartes.org/gustavo/blog/post/epilogues-canaries-buffer-overflows/\" rel=\"nofollow\">Epilogues, Canaries, and Buffer Overflows</a></li>\n</ul>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try to stare at the following line in your code, for a minute or two, and see if you can figure out the answer yourself:</p>\n\n<pre><code>for (g = 0; g &lt; 1; g++)\n</code></pre>\n\n<p>P.S. In addition to incrementing <code>g</code> in the for-loop itself, you're also incrementing it in the body of the loop as well. So, this won't work for several reasons.</p>\n    </div>"]},
{" ": []},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>your code is not so clear nor easy to read. to help you, i wrote this piece of code that you can use it in your daily codding and that can make your life easier. wish this can help.</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;conio.h&gt;\n\n\n/*__________________________________________________________________________________\n*/\nint YesNoQuetion(char *prompt){\n    int r=0,c;\n    printf(\"%s (Y/N) : \",prompt);\n    while(1){\n        c=_getch();\n        if(c=='n' || c=='N' || c=='y' || c=='Y'){\n            printf(\"%c\\x8\",c);\n            r=c;\n        }else{\n            if( (c=='\\n'||c=='\\r') &amp;&amp; r)\n                break;\n            r=0;\n            printf(\"%d\\x8\\x7\",c);\n        }\n    }\n    printf(\"%s\\n\",(r=='y'|| r=='Y')?\"Yes\":\"No\");\n    return (r=='y'|| r=='Y');\n\n}\n/*__________________________________________________________________________________\n*/\nint input(char *prompt,char *buff){\n    printf(\"%s :\\t\",prompt);\n    return scanf(\"%s\",buff);\n}\n\n/*__________________________________________________________________________________\n*/\n\nint main (void)\n{\n\n\n    char firstname[50];\n    char lastname[50];\n    printf(\"This is a little code that will help you create a clean code\\n\\n\");\n    printf(\"Please enter your first and last name\\n\");\n\n    input(\"First name\",firstname);\n    input(\"Last name\",lastname);\n\n    if (YesNoQuetion(\"Do you realy want to know?\"))\n    {\n       printf(\"\\nThat's good '%s, %s', you just pressed Yes\\n\",firstname,lastname);\n    }\n    else{\n         printf(\"\\nYou answerd No, that is also good\\n\");;\n    }\n\n  return 0;\n}\n</code></pre>\n    </div>"]},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You dereference a NULL pointer here, causing the segfault:</p>\n\n<pre><code>//Saving the least square problem as a vector_t:\nvector_t * x = NULL;\nx-&gt;n = mb;\nx-&gt;v = B;\n</code></pre>\n\n<p>Maybe you should use/create a new <code>vector_t</code> instead of just a pointer to a <code>vector_t</code>?</p>\n    </div>"]},
{" ": []},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Redirections are not obtained this way. <code>&gt;</code> (or similar) is a syntax to make redirection in a shell. The shell interprets the command line and make redirections before <code>exec</code>ing the command, this way :</p>\n\n<pre><code>pid = fork();\nswitch(pid) {\ncase 0:\n  d = open(\"myfile\",O_WRONLY);\n  dup2(d,STDOUT_FILENO); // redirect *stdout* to open file d by duplicating it\n  close(d); // now unused d (d is a duplicate of *stdout*\n  exec**(...); // now mutate to a new code which inherits open file descriptors\n  exit(1);\n  break;\ncase -1: // error case of fork\n  break;\ndefault:\n  wait(NULL); // or whatever you want, don't wait for *background style*\n  break;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming <code>args</code> is the <code>argv</code> passed to the <code>main()</code> function<sup>1</sup>:</p>\n\n<p>Your program invokes <em>Undefined Behavior</em></p>\n\n<pre><code>while (args[i] != NULL)\n{\n    printf(\"%s\\n\", args[i]);\n    i++;\n}\n</code></pre>\n\n<p>At the end of this loop, <code>i</code> has a value beyond the bounds of the <code>args</code> array. Thus</p>\n\n<pre><code>args[i] = \"&gt;\";\nargs[i + 1] = \"a.log\";\n</code></pre>\n\n<p>tries to write there at the forbidden location, invoking undefined behavior.</p>\n\n<hr>\n\n<p><sup>1</sup><sub>It's not clear because apparently some code is missing</sub></p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're using the DLL from the link you supplied, it's probably failing because it's attempting to write to the root of the system drive (<code>\"C:\\\\temp.txt\",</code>). Change this path to something your target process can write to.</p>\n    </div>"]},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Problem is that</p>\n\n<pre><code> FILE *text;\n text=fopen(\"output.txt\",\"w\");\n fprintf(text,\"Name:%s\\nNumber:%d\\n\",a[i].name,a[i].num);\n fclose(text);\n</code></pre>\n\n<p>should be inside the loop, and it's outside it. What's happening is that it uses the last value for i (n) and is essentially printing from random memory locations....</p>\n    </div>"]},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try this:</p>\n\n<pre><code>typedef struct SERVER {\n  ....\n} SERVER;\n\ntypedef struct PATH {\n  ....\n} PATH;\n</code></pre>\n\n<p>You see, you use <code>struct SERVER</code> and <code>struct PATH</code> but you haven't declared these. You did declare a type <code>SERVER</code> and a type <code>PATH</code> using a <code>typedef</code> on an unnamed struct.</p>\n\n<p>Alternatively, you could leave your structs as they are, and use <code>sizeof(PATH*)</code> and <code>sizeof(STRUCT*)</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are several issues here:</p>\n\n<pre><code>SERVER* topology = malloc(sizeof(struct SERVER*)* 10 );\n...\nPATH* paths = malloc(sizeof(struct PATH*)*10);\n</code></pre>\n\n<ul>\n<li>You have a type called <code>SERVER</code>, which is a typedef of anonymous struct.  You don't have <code>struct SERVER</code> defined, so use <code>SERVER</code> instead of <code>struct SERVER</code>.  The same applies to <code>PATH</code>.</li>\n<li>You're allocating space for 10 pointers to <code>SERVER</code>, however <code>topology</code> is a pointer to <code>SERVER</code>, which means it can act as an array of <code>SERVER</code>, not an array of <code>SERVER *</code>, which is how you're using it.  This is why you're getting an error when calling <code>free</code>, since <code>topology[i]</code> is a <code>SERVER</code>, not a <code>SERVER *</code>.  Similarly for <code>PATH</code> as well.</li>\n</ul>\n\n<p>For this to work properly, you would need to define <code>topology</code> and <code>paths</code> as follows:</p>\n\n<pre><code>SERVER **topology = malloc(sizeof(SERVER *) * 10 );\nPATH **paths = malloc(sizeof(PATH *) * 10);\n</code></pre>\n\n<p>Alternately, instead of allocating an array of pointers, then allocating individual elements, you could instead keep your current definitions and allocate the whole array at once:</p>\n\n<pre><code>SERVER *topology = malloc(sizeof(SERVER) * 10);\nPATH *paths = malloc(sizeof(PATH) * 10);\n</code></pre>\n\n<p>Then clean up like this:</p>\n\n<pre><code>free(topology);\nfree(paths);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try remove struct from sizeof.</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>just read to EOF and save the return fread, <code>The fread function returns the number of elements read.</code></p>\n\n<pre><code> int s = 0, size = 0;\n    char c[2];\n    c[1] = '\\0';\n    while((s=fread(c,sizeof(char), 1,theFile)) != 0) \n    size += s;\n</code></pre>\n\n<p>also can replace type <code>int</code> to <code>size_t</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>this will get the size of the file, in bytes, using fread()</p>\n\n<p>Note: this will leave the 'file pointer' at the end of the file</p>\n\n<p>Note: fread() returns 0 at EOF, not EOF</p>\n\n<p>Note: when exited the while loop, could add checking of errno to assure no I/O error occurred.</p>\n\n<pre><code>size_t getFileLength( FILE *fp )\n{\n    size_t fileLen = 0;\n    size_t charCount;\n    char c[2];\n\n    while((charCount=fread(c, 1, 1, fp))) \n    {\n        fileLen += charCount;\n    }\n\n    return fileLen;\n} // end function: getFileLength\n</code></pre>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need a space between <code>scanf(\"</code> and the <code>%c</code> for it to work correctly:</p>\n\n<pre><code>scanf(\" %c\", &amp;choice);\n</code></pre>\n\n<p>And you also need to use &amp;choice, not choice!</p>\n\n<p>EDIT: While you're at it, you might want to look into <code>do while()</code> for that loop (unless the professor specifically said to use a <code>break</code>) - <code>do while</code> works great when validating user input!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Better still, use fgetc(). scanf() should always be a last resort.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>fflush() is not defined by ISO for input streams.  It is defined in Microsoft's C runtime library, but is not portable.</p>\n\n<p>While the \"space before %c\" solution may work when the user enters the expected data, it will fail in many ways; try entering \"y n y n\" for example.  Console input is lin-oriented; your best bet is to ensure that you discard the entire line thus:</p>\n\n<pre><code>scanf( \"%c\", choice ) ;\nwhile( choice != '\\n' &amp;&amp; getchar() != '\\n' ) /* do nothing*/ ;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>First of all I will keep it brief.Because of insufficient points to submit a comment \nIf we can see that number of o/p is (one + the no of charcter)\nThis is beacuse when we hit enter after entering the characters '\\n' which is non-printable character also gets added after your string.</p>\n\n<pre><code>$ ./run\nplease enter [y]es, [n]o or [m]aybe: y&lt;return&gt;\nyou selected yes!\nPlease enter only 'y', 'n' or 'm'!  -----------&gt; it is due to reading of the '\\n' by scanf\n</code></pre>\n\n<blockquote>\n  <p>EDITED\n  Due to insufficient points I could post this as a comment.This is a workaround of the above answers</p>\n</blockquote>\n    </div>"]},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>it is a <a href=\"http://code.opencv.org/issues/4395\" rel=\"nofollow\">known issue</a> </p>\n\n<p>i personally solved the problem by merging <a href=\"https://github.com/Itseez/opencv/pull/2947/files\" rel=\"nofollow\">deleted part</a> again and build dlls.</p>\n\n<p>here <a href=\"https://github.com/sturkmen72/opencv_samples/blob/master/cap.cpp\" rel=\"nofollow\">cap.cpp</a> and <a href=\"https://github.com/sturkmen72/opencv_samples/blob/master/cap_dshow.cpp\" rel=\"nofollow\">cap_dshow.cpp</a></p>\n\n<p>if you rebuild OpenCV 3.0 dll'd using these files you will solve your problem. otherwise you can open an issue <a href=\"https://github.com/Itseez/opencv/issues\" rel=\"nofollow\">here</a> describing your problem and wait a solution from developers or use OpenCV 2.4.12</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>this posted code:</p>\n\n<pre><code>void novo_ProcessoF(int sinal){\n    printf(\"Est\u00e1 a fazer o noprocessoF\");\n    if(sinal==SIGALRM){\n            int n = fork();\n            if(n==0){ //Se o processo \u00e9 filho\n                    execl(\"Trabalho2/ubertask.c\",\"./ubertask\",NULL);\n                    wait(NULL);\n                    alarm(2);\n            }\n    }\n}\n</code></pre>\n\n<p>leaves much to be desired.  Suggest:</p>\n\n<pre><code>void novo_ProcessoF(int sinal)\n{\n    // in general, it is a bad idea to call printf() in a signal handler\n    // as printf() also uses signals\n    // appended '\\n' so will be immediately output\n    printf(\"Est\u00e1 a fazer o noprocessoF\\n\");\n\n    if(sinal==SIGALRM)\n    {\n        pid_t pid = fork(); // pid_t defined in unistd.h\n        // test for all three return conditions from fork()\n        if(0 == pid)\n        { //Se o processo \u00e9 filho -- child\n            execl( \"./upertask\" ,\"./ubertask\",NULL);\n            perror( \"execl failed\");\n            exit( EXIT_FAILURE );  // exit() and EXIT_FAILURE defined in stdlib.h\n        }\n\n        else if( 0 &lt; pid )\n        { // parent\n            wait(NULL);\n            alarm(2);\n        }\n\n        else // if( 0 &gt; pid )\n        { // fork failed\n            perror( \"fork failed\" );\n            exit( EXIT_FAILURE );\n        }\n    }\n}\n</code></pre>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Pass address of <code>x</code> and <code>y</code> as arguments to function. Right now they are local variables, changes are not made to original variables .</p>\n\n<p>Do as follows-</p>\n\n<pre><code>void swap(int *x,int *y){\n /*            dereference pointers and  swap    */\n}\n</code></pre>\n\n<p>And call in <code>main</code> like this -</p>\n\n<pre><code>swap(&amp;x,&amp;y);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What you are doing is passing parameter by value. It means that during the function call, copies of parameters are created. So inside the function you are working on copies of actual variables.</p>\n\n<p>Instead you need to pass it as a reference. Please read more about pass-by-value vs pass-by-reference.</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nvoid swap(int&amp; x,int&amp; y)    //Instead of passing by value just pass by reference\n{\n    int temp=x;\n    x=y;\n    t=yemp;\n}\nint main() {\n    int a=3,b=4;\n    swap(a,b);\n    printf(\"%d %d\\n\",a,b);\n\n    return 0;\n}\n</code></pre>\n\n<p><strong>EDIT</strong>:\nC does not have references. Above code will work in c++ instead. To make in work in C, just use pointers and de-reference it inside the function.</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Debian, you can find the <strong>gnu c reference manual</strong> in this package:</p>\n\n<p>Debian Package: <a href=\"https://packages.debian.org/sid/glibc-doc-reference\" rel=\"nofollow\">glibc-doc-reference</a></p>\n\n<p>Same package name for <a href=\"https://launchpad.net/ubuntu/utopic/+package/glibc-doc-reference\" rel=\"nofollow\">Ubuntu</a></p>\n\n<blockquote>\n  <p><strong>Contains The GNU C Library Reference manual in info, pdf and html format.</strong></p>\n</blockquote>\n    </div>"]},
{" ": []},
{" ": []},
{" ": []},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is the expected behavior for floating point numbers.<br>\nSee \"<a href=\"https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\" rel=\"nofollow\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>\" for details -- or, better still: <a href=\"http://floating-point-gui.de/\" rel=\"nofollow\">http://floating-point-gui.de/</a>.</p>\n\n<p>You'll also find that using floating point numbers for currency is not recommended because of the same imprecision.</p>\n\n<hr>\n\n<p>In order to avoid implementation errors, consider replacing your algorithm with <code>strtof()</code> instead -- <a href=\"http://en.cppreference.com/w/c/string/byte/strtof\" rel=\"nofollow\">http://en.cppreference.com/w/c/string/byte/strtof</a>. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you can't use the standard library functions (which I highly recommend you do), this answer may help you:</p>\n\n<p><a href=\"http://stackoverflow.com/a/4392789/5544939\">http://stackoverflow.com/a/4392789/5544939</a></p>\n\n<p>Also, Brain Cain is right about using floating point for currency values.  Storing each salary in cents (int) instead of dollars would be safer.</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>While there are other software products being able to generate C or C++ code from Simulink models, there is no alternative to deployment which is able to generate code in some other language.</p>\n\n<p>Further searching for an answer, you may find an often mentioned idea: Wrap your Simulink simulation in an m-function, then use the Builder JA. Unfortunately this won't succeed, there is a list of functions not supported, which includes everything to open or simulate a Simulink model.</p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The problem is that those shifts are done using the type <code>int</code>, which on all modern 64-bit systems are still 32 bits. You need to use the same type as <code>map</code>, i.e. <code>unsigned long long</code>:</p>\n\n<pre><code>1ull &lt;&lt; pos\n</code></pre>\n\n<p>Note the <code>ull</code> which tells the compiler that the <code>1</code> is not an <code>int</code> but an <code>unsigned long long</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>make sure to cast the right side expression to an unsigned long long</p>\n    </div>"]},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>This was all solved a long time with RPC (remote procedure call) and XDR (external data representation). See <a href=\"http://tools.ietf.org/html/rfc4506.html\" rel=\"nofollow\">rfc4506</a> on xdr, and this <a href=\"http://docs.oracle.com/cd/E19253-01/816-1435/6m7rrfn6r/index.html\" rel=\"nofollow\">Sun</a> document on rpc and xdr, and this <a href=\"http://www.cs.cf.ac.uk/Dave/C/node34.html\" rel=\"nofollow\">rpcgen tutorial</a>, and <code>man rpc</code>, <code>man xdr</code>.</p>\n\n<p>Obviously, these are described for use by C.</p>\n    </div>"]},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In order to do what you want you have to actually allocate space for your vector.</p>\n\n<pre><code>vector_t * x = malloc(sizeof(vector_t));\nx-&gt;n = 3;\nx-&gt;v = malloc(3 * sizeof(double));\nx-&gt;v[0]=B[0];\nx-&gt;v[1]=B[1];\nx-&gt;v[2]=B[2];\n</code></pre>\n\n<p>You must also be sure you <code>free</code> the space you allocate with <code>malloc</code> when you are done with it</p>\n\n<pre><code>free(x-&gt;v);\nfree(x);\n</code></pre>\n    </div>"]},
{" ": []},
{" ": []},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In your example, you should use <code>*a = c;</code> since you only want to copy a single value.\nUse <code>memcpy</code>, if you need to copy several consecutive elements of an array.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is implementation specific. Some compilers, including <a href=\"http://gcc.gnu.org/\" rel=\"nofollow\">GCC</a>, are able to optimize quite well (with <code>gcc -O2</code> at least), calls to  standard functions <code>memcpy</code> and to <code>memset</code> (which, as my former colleague Pascal Cuoq commented, may be inlined to efficient assignment machine code); sometimes, GCC is even able to optimize some assignment to some structures as calls to <code>memcpy</code> (sometimes, calling an efficient <code>memcpy</code> routine is faster for large enough <code>struct</code>, including for structure assignment; at other occasions, the call to <code>memcpy</code>, transformed via some <code>__builtin_memcpy</code>, is inlined as an efficient assignment code, perhaps even going thru registers without using any memory)</p>\n\n<p>You could compile your <code>foo.c</code> example with <code>gcc -fverbose-asm -O2 -march=native -S foo.c</code> then look into the generated <code>foo.s</code></p>\n    </div>"]},
{" ": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to use character constants rather than string constants.  Change the double quotes to single quotes:</p>\n\n<pre><code>char a[13][4] = {'C', 'D', 'H', 'S'};\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The declaration  </p>\n\n<pre><code>char a[13][4] = {\"C\", \"D\", \"H\", \"S\"};  \n</code></pre>\n\n<p>initializes first four rows of array <code>a</code> with four strings <code>\"C\", \"D\", \"H\"</code> and  <code>\"S\"</code>. If you want to initialize only first row with characters <code>'C', 'D', 'H'</code> and <code>'s'</code> then it should be like  </p>\n\n<pre><code>char a[13][4] = {{'C', 'D', 'H', 'S'}};  \n</code></pre>\n\n<p>Other elements of array will be initialized to <code>'\\0'</code> character. </p>\n    </div>"]},
{" ": []},
{" ": []}]