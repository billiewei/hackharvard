[{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, using eval is a bad practice. Just to name a few reasons:</p>\n\n<ol>\n<li>There is almost always a better way to do it</li>\n<li>Very dangerous and insecure</li>\n<li>Makes debugging difficult</li>\n<li>Slow</li>\n</ol>\n\n<p>In your case you can use <a href=\"http://docs.python.org/library/functions.html#setattr\">setattr</a> instead:</p>\n\n<pre><code>class Song:\n    \"\"\"The class to store the details of each song\"\"\"\n    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')\n    def __init__(self):\n        for att in self.attsToStore:\n            setattr(self, att.lower(), None)\n    def setDetail(self, key, val):\n        if key in self.attsToStore:\n            setattr(self, key.lower(), val)\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>There are some cases where you have to use eval or exec. But they are rare. Using eval in your case is a bad practice for sure. I'm emphasizing on bad practice because eval and exec are frequently used in the wrong place.</p>\n\n<p><strong>EDIT 2:</strong></p>\n\n<p>It looks like some disagree that eval is 'very dangerous and insecure' in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.</p>\n\n<p><strong>EDIT 3:</strong>\nReordered point 1 and 4</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using <code>eval</code> is weak, not a clearly <em>bad</em> practice.</p>\n\n<ol>\n<li><p>It violates the \"Fundamental Principle of Software\".  Your source is not the sum total of what's executable.  In addition to your source, there are the arguments to <code>eval</code>, which must be clearly understood.  For this reason, it's the tool of last resort.</p></li>\n<li><p>It's usually a sign of thoughtless design.  There's rarely a good reason for dynamic source code, built on-the-fly.  Almost anything can be done with delegation and other OO design techniques.</p></li>\n<li><p>It leads to relatively slow on-the-fly compilation of small pieces of code.  An overhead which can be avoided by using better design patterns.</p></li>\n</ol>\n\n<p>As a footnote, in the hands of deranged sociopaths, it may not work out well.  However, when confronted with deranged sociopathic users or administrators, it's best to not give them interpreted Python in the first place.  In the hands of the truly evil, Python can a liability; <code>eval</code> doesn't increase the risk at all.  </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In this case, yes. Instead of</p>\n\n<pre><code>exec 'self.Foo=val'\n</code></pre>\n\n<p>you should use the <a href=\"http://docs.python.org/library/functions.html\">builtin</a> function <code>setattr</code>:</p>\n\n<pre><code>setattr(self, 'Foo', val)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's worth noting that for the specific problem in question, there are several alternatives to using <code>eval</code>:</p>\n\n<p>The simplest, as noted, is using <code>setattr</code>:</p>\n\n<pre><code>def __init__(self):\n    for name in attsToStore:\n        setattr(self, name, None)\n</code></pre>\n\n<p>A less obvious approach is updating the object's <code>__dict__</code> object directly.  If all you want to do is initialize the attributes to <code>None</code>, then this is less straightforward than the above.  But consider this:</p>\n\n<pre><code>def __init__(self, **kwargs):\n    for name in self.attsToStore:\n       self.__dict__[name] = kwargs.get(name, None)\n</code></pre>\n\n<p>This allows you to pass keyword arguments to the constructor, e.g.:</p>\n\n<pre><code>s = Song(name='History', artist='The Verve')\n</code></pre>\n\n<p>It also allows you to make your use of <code>locals()</code> more explicit, e.g.:</p>\n\n<pre><code>s = Song(**locals())\n</code></pre>\n\n<p>...and, if you really want to assign <code>None</code> to the attributes whose names are found in <code>locals()</code>:</p>\n\n<pre><code>s = Song(**dict([(k, None) for k in locals().keys()]))\n</code></pre>\n\n<p>Another approach to providing an object with default values for a list of attributes is to define the class's <code>__getattr__</code> method:</p>\n\n<pre><code>def __getattr__(self, name):\n    if name in self.attsToStore:\n        return None\n    raise NameError, name\n</code></pre>\n\n<p>This method gets called when the named attribute isn't found in the normal way.  This approach somewhat less straightforward than simply setting the attributes in the constructor or updating the <code>__dict__</code>, but it has the merit of not actually creating the attribute unless it exists, which can pretty substantially reduce the class's memory usage.</p>\n\n<p>The point of all this:  There are lots of reasons, in general, to avoid <code>eval</code> - the security problem of executing code that you don't control, the practical problem of code you can't debug, etc.  But an even more important reason is that generally, you don't need to use it.  Python exposes so much of its internal mechanisms to the programmer that you rarely really need to write code that writes code.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a page that details the problem and a solution (search the page for the text <em>Wrapping sys.stdout into an instance</em>):</p>\n\n<p><a href=\"http://wiki.python.org/moin/PrintFails\">PrintFails - Python Wiki</a></p>\n\n<p>Here's a code excerpt from that page:</p>\n\n<pre><code>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \\\n    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \\\n    line = u\"\\u0411\\n\"; print type(line), len(line); \\\n    sys.stdout.write(line); print line'\n  UTF-8\n  &lt;type 'unicode'&gt; 2\n  \u0411\n  \u0411\n\n  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \\\n    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \\\n    line = u\"\\u0411\\n\"; print type(line), len(line); \\\n    sys.stdout.write(line); print line' | cat\n  None\n  &lt;type 'unicode'&gt; 2\n  \u0411\n  \u0411\n</code></pre>\n\n<p>There's some more information on that page, well worth a read.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Despite the other plausible-sounding answers that suggest changing the code page to 65001, that <a href=\"http://bugs.python.org/issue1602\">does not work</a>. (Also, changing the default encoding using <code>sys.setdefaultencoding</code> is <a href=\"http://stackoverflow.com/questions/3578685/how-to-display-utf-8-in-windows-console/3580165#3580165\">not a good idea</a>.)</p>\n\n<p>See <a href=\"http://stackoverflow.com/questions/878972/windows-cmd-encoding-change-causes-python-crash/3259271\">this question</a> for details and code that does work.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're not interested in getting a reliable representation of the bad character(s) you might use something like this (working with python &gt;= 2.6, including 3.x):</p>\n\n<pre><code>from __future__ import print_function\nimport sys\n\ndef safeprint(s):\n    try:\n        print(s)\n    except UnicodeEncodeError:\n        if sys.version_info &gt;= (3,):\n            print(s.encode('utf8').decode(sys.stdout.encoding))\n        else:\n            print(s.encode('utf8'))\n\nsafeprint(u\"\\N{EM DASH}\")\n</code></pre>\n\n<p>The bad character(s) in the string will be converted in a representation which is printable by the Windows console.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The below code will make Python output to console as UTF-8 even on Windows. </p>\n\n<p>The console will display the characters well on Windows 7 but on Windows XP it will not display them well, but at least it will work and most important you will have a consistent output from your script on all platforms. You'll be able to redirect the output to a file.</p>\n\n<p>Below code was tested with Python 2.6 on Windows.</p>\n\n<pre><code>\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nimport codecs, sys\n\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nprint sys.getdefaultencoding()\n\nif sys.platform == 'win32':\n    try:\n        import win32console \n    except:\n        print \"Python Win32 Extensions module is required.\\n You can download it from https://sourceforge.net/projects/pywin32/ (x86 and x64 builds are available)\\n\"\n        exit(-1)\n    # win32console implementation  of SetConsoleCP does not return a value\n    # CP_UTF8 = 65001\n    win32console.SetConsoleCP(65001)\n    if (win32console.GetConsoleCP() != 65001):\n        raise Exception (\"Cannot set console codepage to 65001 (UTF-8)\")\n    win32console.SetConsoleOutputCP(65001)\n    if (win32console.GetConsoleOutputCP() != 65001):\n        raise Exception (\"Cannot set console output codepage to 65001 (UTF-8)\")\n\n#import sys, codecs\nsys.stdout = codecs.getwriter('utf8')(sys.stdout)\nsys.stderr = codecs.getwriter('utf8')(sys.stderr)\n\nprint \"This is an \u0415\u4e42\u03b1mp\u0661\u0205 testing Unicode support using Arabic, Latin, Cyrillic, Greek, Hebrew and CJK code points.\\n\"\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>I get a <code>UnicodeEncodeError: 'charmap' codec can't encode character...</code>  error. </p>\n</blockquote>\n\n<p>The error means that Unicode characters that you are trying to print can't be represented using the current (<code>chcp</code>) console character encoding. The codepage is often 8-bit encoding such as <code>cp437</code> that can represent only ~0x100 characters from ~1M Unicode characters:</p>\n\n<pre>&gt;&gt;&gt; u\"\\N{EURO SIGN}\".encode('cp437')\nTraceback (most recent call last):\n...\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u20ac' in position 0:\ncharacter maps to </pre>\n\n<blockquote>\n  <p>I assume this is because the Windows console does not accept Unicode-only characters. What's the best way around this? </p>\n</blockquote>\n\n<p>Windows console does accept Unicode characters and it can even display them (BMP only) <strong>if the corresponding font is configured</strong>. <code>WriteConsoleW()</code> API should be used as suggested in <a href=\"http://stackoverflow.com/a/4637795/4279\">@Daira Hopwood's answer</a>. It can be called transparently i.e., you don't need to and should not modify your scripts if you use <a href=\"https://github.com/Drekin/win-unicode-console\" rel=\"nofollow\"><code>win-unicode-console</code> package</a>:</p>\n\n<pre><code>T:\\&gt; py -mpip install win-unicode-console\nT:\\&gt; py -mrun your_script.py\n</code></pre>\n\n<p>See <a href=\"http://stackoverflow.com/a/30551552/4279\">What's the deal with Python 3.4, Unicode, different languages and Windows?</a></p>\n\n<blockquote>\n  <p>Is there any way I can make Python\n  automatically print a <code>?</code> instead of failing in this situation?</p>\n</blockquote>\n\n<p>If it is enough to replace all unencodable characters with <code>?</code> in your case then you could set <code>PYTHONIOENCODING</code> envvar:</p>\n\n<pre><code>T:\\&gt; set PYTHONIOENCODING=:replace\nT:\\&gt; python3 -c \"print(u'[\\N{EURO SIGN}]')\"\n[?]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The cause of your problem is <strong>NOT</strong> the Win console not willing to accept Unicode (as it does this since I guess Win2k by default). It is the default system encoding. Try this code and see what it gives you:</p>\n\n<pre><code>import sys\nsys.getdefaultencoding()\n</code></pre>\n\n<p>if it says ascii, there's your cause ;-)\nYou have to create a file called sitecustomize.py and put it under python path (I put it under /usr/lib/python2.5/site-packages, but that is differen on Win - it is c:\\python\\lib\\site-packages or something), with the following contents:</p>\n\n<pre><code>import sys\nsys.setdefaultencoding('utf-8')\n</code></pre>\n\n<p>and perhaps you might want to specify the encoding in your files as well:</p>\n\n<pre><code># -*- coding: UTF-8 -*-\nimport sys,time\n</code></pre>\n\n<p>Edit: more info can be found <a href=\"http://www.diveintopython.net/xml_processing/unicode.html\" rel=\"nofollow\">in excellent the Dive into Python book</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; a = 4\n&gt;&gt;&gt; b = 6\n&gt;&gt;&gt; c = a / b\n&gt;&gt;&gt; c\n0.66666666666666663\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can cast to float by doing <code>c = a / float(b)</code>. If the numerator or denominator is a float, then the result will be also.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>c = a / (b * 1.0)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 3.x, the single slash (<code>/</code>) always means true (non-truncating) division. (The <code>//</code> operator is used for truncating division.) In Python 2.x (2.2 and above), you can get this same behavior by putting a</p>\n\n<pre><code>from __future__ import division\n</code></pre>\n\n<p>at the top of your module.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just making any of the parameters for division in floating-point format also produces the output in floating-point.</p>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; 4.0/3\n1.3333333333333333\n</code></pre>\n\n<p>or,</p>\n\n<pre><code>&gt;&gt;&gt; 4 / 3.0\n1.3333333333333333\n</code></pre>\n\n<p>or, </p>\n\n<pre><code>&gt;&gt;&gt; 4 / float(3)\n1.3333333333333333\n</code></pre>\n\n<p>or, </p>\n\n<pre><code>&gt;&gt;&gt; float(4) / 3\n1.3333333333333333\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Add a dot (<code>.</code>) to indicate floating point numbers</p>\n\n<pre><code>&gt;&gt;&gt; 4/3.\n1.3333333333333333\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; 4/3\n1.3333333333333333\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to use \"true\" (floating point) division by default, there is a command line flag:</p>\n\n<pre><code>python -Q new foo.py\n</code></pre>\n\n<p>There are some drawbacks (from the PEP):</p>\n\n<blockquote>\n  <p>It has been argued that a command line option to change the\n        default is evil.  It can certainly be dangerous in the wrong\n        hands: for example, it would be impossible to combine a 3rd\n        party library package that requires -Qnew with another one that\n        requires -Qold. </p>\n</blockquote>\n\n<p>You can learn more about the other flags values that change / warn-about the behavior of division by looking at the python man page.</p>\n\n<p>For full details on division changes read: <a href=\"http://www.python.org/dev/peps/pep-0238/\">PEP 238 -- Changing the Division Operator</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>How can I force division to be floating point in Python?</strong></p>\n</blockquote>\n\n<h2>Use Python 3</h2>\n\n<p>In Python 3, to get true division, you simply do <code>a / b</code>. </p>\n\n<p>Floor division, the classic division behavior for integers, is now <code>a // b</code>:</p>\n\n<pre><code>&gt;&gt;&gt; 1/2\n0.5\n&gt;&gt;&gt; 1//2\n0\n&gt;&gt;&gt; 1//2.0\n0.0\n</code></pre>\n\n<h2>If Using Python 2</h2>\n\n<p>In Python 2, it's not so simple. Some ways of dealing with classic Python 2 division are better and more robust than others.</p>\n\n<h3>Recommended</h3>\n\n<p>You can get Python 3 division behavior with the following import:</p>\n\n<pre><code>from __future__ import division\n</code></pre>\n\n<p>which then applies Python 3 style division to the entire module and must necessarily come before your other imports at the top of your module.</p>\n\n<pre><code>&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; 1/2\n0.5\n&gt;&gt;&gt; 1//2\n0\n&gt;&gt;&gt; 1//2.0\n0.0\n</code></pre>\n\n<p>This is really the best solution as it ensures you code is more forward compatible with Python 3.</p>\n\n<p>If you don't want to apply this to the entire module, you're limited to a few workarounds. The most popular is to coerce one of the operands to a float. One robust solution is <code>a / (b * 1.0)</code>. In a fresh Python shell:</p>\n\n<pre><code>&gt;&gt;&gt; 1/(2 * 1.0)\n0.5\n</code></pre>\n\n<p>Also robust is <code>truediv</code> from the <code>operator</code> module <code>operator.truediv(a, b)</code>:</p>\n\n<pre><code>&gt;&gt;&gt; from operator import truediv\n&gt;&gt;&gt; truediv(1, 2)\n0.5\n</code></pre>\n\n<h3>Not Recommended</h3>\n\n<p>Commonly seen is <code>a / float(b)</code>. But this will raise a TypeError if b is a complex number - this may not be what you want.</p>\n\n<pre><code>&gt;&gt;&gt; 1 / float(2)\n0.5\n&gt;&gt;&gt; 1 / float(2j)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't convert complex to float\n</code></pre>\n\n<p>You can also run Python with the <code>-Qnew</code> flag, but this has the downside of executing all modules with the new Python 3 behavior, and some of your modules may expect classic division, so this is not recommended. But to demonstrate:</p>\n\n<pre><code>$ python -Qnew -c 'print 1/2'\n0.5\n$ python -Qnew -c 'print 1/2j'\n-0.5j\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This will also work</p>\n\n<pre><code>&gt;&gt;&gt; u=1./5\n&gt;&gt;&gt; print u\n</code></pre>\n\n<blockquote>\n  <p>0.2</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>from operator import truediv\n\nc = truediv(a, b)\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://mail.python.org/pipermail/tutor/2003-November/026645.html\">Magnus Lycka answer on a mailing list</a>:</p>\n\n<blockquote>\n  <p>You can skip buffering for a whole\n  python process using \"python -u\" \n  (or#!/usr/bin/env python -u etc) or by\n  setting the environment variable\n  PYTHONUNBUFFERED.</p>\n  \n  <p>You could also replace sys.stdout with\n  some other stream like wrapper which\n  does a flush after every call.</p>\n\n<pre><code>class Unbuffered(object):\n   def __init__(self, stream):\n       self.stream = stream\n   def write(self, data):\n       self.stream.write(data)\n       self.stream.flush()\n   def __getattr__(self, attr):\n       return getattr(self.stream, attr)\n\nimport sys\nsys.stdout = Unbuffered(sys.stdout)\nprint 'Hello'\n</code></pre>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code># reopen stdout file descriptor with write mode\n# and 0 as the buffer size (unbuffered)\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n</code></pre>\n\n<p>Credits: \"Sebastian\", somewhere on the Python mailing list.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, it is.</p>\n\n<p>You can disable it on the commandline with the \"-u\" switch.</p>\n\n<p>Alternatively, you could call .flush() on sys.stdout on every write (or wrap it with an object that does this automatically)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I would rather put my answer in <a href=\"http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print\">How to flush output of Python print?</a> or in <a href=\"http://stackoverflow.com/questions/3895481/pythons-print-function-that-flushes-the-buffer-when-its-called\">Python's print function that flushes the buffer when it's called?</a>, but since they were marked as duplicates of this one (what I do not agree), I'll answer it here.</p>\n\n<p>Since Python 3.3 print() supports the keyword argument \"flush\" (<a href=\"http://docs.python.org/3/library/functions.html?highlight=print#print\">see documentation</a>):</p>\n\n<pre><code>print('Hello World!', flush=True)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def disable_stdout_buffering():\n    # Appending to gc.garbage is a way to stop an object from being\n    # destroyed.  If the old sys.stdout is ever collected, it will\n    # close() stdout, which is not good.\n    gc.garbage.append(sys.stdout)\n    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# Then this will give output in the correct order:\ndisable_stdout_buffering()\nprint \"hello\"\nsubprocess.call([\"echo\", \"bye\"])\n</code></pre>\n\n<p>Without saving the old sys.stdout, disable_stdout_buffering() isn't idempotent, and multiple calls will result in an error like this:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"test/buffering.py\", line 17, in &lt;module&gt;\n    print \"hello\"\nIOError: [Errno 9] Bad file descriptor\nclose failed: [Errno 9] Bad file descriptor\n</code></pre>\n\n<p>Another possibility is:</p>\n\n<pre><code>def disable_stdout_buffering():\n    fileno = sys.stdout.fileno()\n    temp_fd = os.dup(fileno)\n    sys.stdout.close()\n    os.dup2(temp_fd, fileno)\n    os.close(temp_fd)\n    sys.stdout = os.fdopen(fileno, \"w\", 0)\n</code></pre>\n\n<p>(Appending to gc.garbage is not such a good idea because it's where unfreeable cycles get put, and you might want to check for those.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, it is enabled by default. You can disable it by using the -u option on the command line when calling python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use fcntl to change the file flags in-fly.</p>\n\n<pre><code>fl = fcntl.fcntl(fd.fileno(), fcntl.F_GETFL)\nfl |= os.O_SYNC # or os.O_DSYNC (if you don't care the file timestamp updates)\nfcntl.fcntl(fd.fileno(), fcntl.F_SETFL, fl)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One way to get unbuffered output would be to use <code>sys.stderr</code> instead of <code>sys.stdout</code> or to simply call <code>sys.stdout.flush()</code> to explicitly force a write to occur.</p>\n\n<p>You could easily redirect everything printed by doing:</p>\n\n<pre><code>import sys; sys.stdout = sys.stderr\nprint \"Hello World!\"\n</code></pre>\n\n<p>Or to redirect just for a particular <code>print</code> statement:</p>\n\n<pre><code>print &gt;&gt;sys.stderr, \"Hello World!\"\n</code></pre>\n\n<p>To reset stdout you can just do:</p>\n\n<pre><code>sys.stdout = sys.__stdout__\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The following works in Python 2.6, 2.7, and 3.2:</p>\n\n<pre><code>import os\nimport sys\nbuf_arg = 0\nif sys.version_info[0] == 3:\n    os.environ['PYTHONUNBUFFERED'] = '1'\n    buf_arg = 1\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'a+', buf_arg)\nsys.stderr = os.fdopen(sys.stderr.fileno(), 'a+', buf_arg)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Variant that works without crashing (at least on win32; python 2.7, ipython 0.12) then called subsequently (multiple times):</p>\n\n<pre><code>def DisOutBuffering():\n    if sys.stdout.name == '&lt;stdout&gt;':\n        sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n    if sys.stderr.name == '&lt;stderr&gt;':\n        sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 0)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>(I've posted a comment, but it got lost somehow. So, again:)</p>\n\n<ol>\n<li><p>As I noticed, CPython (at least on Linux) behaves differently depending on where the output goes. If it goes to a tty, then the output is flushed after each '<code>\\n'</code>\n<br>If it goes to a pipe/process, then it is buffered and you can use the <code>flush()</code> based solutions or the <strong>-u</strong> option recommended above.</p></li>\n<li><p>Slightly related to output buffering:<br>\nIf you iterate over the lines in the input with</p>\n\n<p><code>for line in sys.stdin:</code>\n<br>...</p></li>\n</ol>\n\n<p>then the <strong>for</strong> implementation in <strong>CPython</strong> will collect the input for a while and then execute the loop body for a bunch of input lines. If your script is about to write output for each input line, this might look like output buffering but it's actually batching, and therefore, none of the <code>flush()</code>, etc. techniques will help that.\nInterestingly, you don't have this behaviour in <strong>pypy</strong>.\nTo avoid this, you can use</p>\n\n<p><code>while True:\n   line=sys.stdin.readline()</code>\n<br>...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can create an unbuffered file and assign this file to sys.stdout.</p>\n\n<pre><code>import sys \nmyFile= open( \"a.log\", \"w\", 0 ) \nsys.stdout= myFile\n</code></pre>\n\n<p>You can't magically change the system-supplied stdout; since it's supplied to your python program by the OS.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also run Python with <a href=\"https://www.gnu.org/software/coreutils/manual/html_node/stdbuf-invocation.html\" rel=\"nofollow\" title=\"stdbuf\">stdbuf</a> utility:</p>\n\n<p><code>stdbuf -oL python &lt;script&gt;</code></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\n\n<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.</p>\n\n<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href=\"http://effbot.org/zone/default-values.htm\">Default Parameter Values in Python</a>.<br>\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Suppose you have the following code</p>\n\n<pre><code>fruits = (\"apples\", \"bananas\", \"loganberries\")\n\ndef eat(food=fruits):\n    ...\n</code></pre>\n\n<p>When I see the declaration of eat, the least astonishing thing is to think that if the first parameter is not given, that it will be equal to the tuple <code>(\"apples\", \"bananas\", \"loganberries\")</code></p>\n\n<p>However, supposed later on in the code, I do something like</p>\n\n<pre><code>def some_random_function():\n    global fruits\n    fruits = (\"blueberries\", \"mangos\")\n</code></pre>\n\n<p>then if default parameters were bound at function execution rather than function declaration then I would be astonished (in a very bad way) to discover that fruits had been changed.  This would be more astonishing IMO than discovering that your <code>foo</code> function above was mutating the list.</p>\n\n<p>The real problem lies with mutable variables, and all languages have this problem to some extent. Here's a question: suppose in Java I have the following code:</p>\n\n<pre><code>StringBuffer s = new StringBuffer(\"Hello World!\");\nMap&lt;StringBuffer,Integer&gt; counts = new HashMap&lt;StringBuffer,Integer&gt;();\ncounts.put(s, 5);\ns.append(\"!!!!\");\nSystem.out.println( counts.get(s) );  // does this work?\n</code></pre>\n\n<p>Now, does my map use the value of the <code>StringBuffer</code> key when it was placed into the map, or does it store the key by reference?  Either way, someone is astonished; either the person who tried to get the object out of the <code>Map</code> using a value identical to the one they put it in with, or the person who can't seem to retrieve their object even though the key they're using is literally the same object that was used to put it into the map (this is actually why Python doesn't allow its mutable built-in data types to be used as dictionary keys).</p>\n\n<p>Your example is a good one of a case where Python newcomers will be surprised and bitten.  But I'd argue that if we \"fixed\" this, then that would only create a different situation where they'd be bitten instead, and that one would be even less intuitive. Moreover, this is always the case when dealing with mutable variables; you always run into cases where someone could intuitively expect one or the opposite behavior depending on what code they're writing.</p>\n\n<p>I personally like Python's current approach: default function arguments are evaluated when the function is defined and that object is always the default. I suppose they could special-case using an empty list, but that kind of special casing would cause even more astonishment, not to mention be backwards incompatible.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>AFAICS no one has yet posted the relevant part of the <a href=\"http://docs.python.org/reference/compound_stmts.html#function-definitions\">documentation</a>:</p>\n\n<blockquote>\n  <p><strong>Default parameter values are evaluated when the function definition is executed.</strong> This means that the expression is evaluated once, when the function is defined, and that the same \u201cpre-computed\u201d value is used for each call. This is especially important to understand when a default parameter is a mutable object, such as a list or a dictionary: if the function modifies the object (e.g. by appending an item to a list), the default value is in effect modified. This is generally not what was intended. A way around this is to use None as the default, and explicitly test for it in the body of the function [...]</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know nothing about the Python interpreter inner workings (and I'm not an expert in compilers and interpreters either) so don't blame me if I propose anything unsensible or impossible.</p>\n\n<p>Provided that python objects <strong>are mutable</strong> I think that this should be taken into account when designing the default arguments stuff.\nWhen you instantiate a list:</p>\n\n<pre><code>a = []\n</code></pre>\n\n<p>you expect to get a <strong>new</strong> list referenced by <em>a</em>.</p>\n\n<p>Why should the a=[] in</p>\n\n<pre><code>def x(a=[]):\n</code></pre>\n\n<p>instantiate a new list on function definition and not on invocation?\nIt's just like you're asking \"if the user doesn't provide the argument then <em>instantiate</em> a new list and use it as if it was produced by the caller\".\nI think this is ambiguous instead:</p>\n\n<pre><code>def x(a=datetime.datetime.now()):\n</code></pre>\n\n<p>user, do you want <em>a</em> to default to the datetime corresponding to when you're defining or executing <em>x</em>?\nIn this case, as in the previous one, I'll keep the same behaviour as if the default argument \"assignment\" was the first instruction of the function (datetime.now() called on function invocation).\nOn the other hand, if the user wanted the definition-time mapping he could write:</p>\n\n<pre><code>b = datetime.datetime.now()\ndef x(a=b):\n</code></pre>\n\n<p>I know, I know: that's a closure. Alternatively Python might provide a keyword to force definition-time binding:</p>\n\n<pre><code>def x(static a=b):\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Well, the reason is quite simply that bindings are done when code is executed, and the function definition is executed, well... when the functions is defined.</p>\n\n<p>Compare this:</p>\n\n<pre><code>class BananaBunch:\n    bananas = []\n\n    def addBanana(self, banana):\n        self.bananas.append(banana)\n</code></pre>\n\n<p>This code suffers from the exact same unexpected happenstance. bananas is a class attribute, and hence, when you add things to it, it's added to all instances of that class. The reason is exactly the same.</p>\n\n<p>It's just \"How It Works\", and making it work differently in the function case would probably be complicated, and in the class case likely impossible, or at least slow down object instantiation a lot, as you would have to keep the class code around and execute it when objects are created.</p>\n\n<p>Yes, it is unexpected. But once the penny drops, it fits in perfectly with how Python works in general. In fact, it's a good teaching aid, and once you understand why this happens, you'll grok python much better.</p>\n\n<p>That said it should feature prominently in any good Python tutorial. Because as you mention, everyone runs into this problem sooner or later.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I used to think that creating the objects at runtime would be the better approach.  I'm less certain now, since you do lose some useful features, though it may be worth it regardless simply to prevent newbie confusion.  The disadvantages of doing so are:</p>\n\n<p><strong>1. Performance</strong></p>\n\n<pre><code>def foo(arg=something_expensive_to_compute())):\n    ...\n</code></pre>\n\n<p>If call-time evaluation is used, then the expensive function is called every time your function is used without an argument.  You'd either pay an expensive price on each call, or need to manually cache the value externally, polluting your namespace and adding verbosity.</p>\n\n<p><strong>2. Forcing bound parameters</strong></p>\n\n<p>A useful trick is to bind parameters of a lambda to the <em>current</em> binding of a variable when the lambda is created.  For example:</p>\n\n<pre><code>funcs = [ lambda i=i: i for i in range(10)]\n</code></pre>\n\n<p>This returns a list of functions that return 0,1,2,3... respectively.  If the behaviour is changed, they will instead bind <code>i</code> to the <em>call-time</em> value of i, so you would get a list of functions that all returned <code>9</code>.</p>\n\n<p>The only way to implement this otherwise would be to create a further closure with the i bound, ie:</p>\n\n<pre><code>def make_func(i): return lambda: i\nfuncs = [make_func(i) for i in range(10)]\n</code></pre>\n\n<p><strong>3. Introspection</strong></p>\n\n<p>Consider the code:</p>\n\n<pre><code>def foo(a='test', b=100, c=[]):\n   print a,b,c\n</code></pre>\n\n<p>We can get information about the arguments and defaults using the <code>inspect</code> module, which </p>\n\n<pre><code>&gt;&gt;&gt; inspect.getargspec(foo)\n(['a', 'b', 'c'], None, None, ('test', 100, []))\n</code></pre>\n\n<p>This information is very useful for things like document generation, metaprogramming, decorators etc.</p>\n\n<p>Now, suppose the behaviour of defaults could be changed so that this is the equivalent of:</p>\n\n<pre><code>_undefined = object()  # sentinel value\n\ndef foo(a=_undefined, b=_undefined, c=_undefined)\n    if a is _undefined: a='test'\n    if b is _undefined: b=100\n    if c is _undefined: c=[]\n</code></pre>\n\n<p>However, we've lost the ability to introspect, and see what the default arguments <em>are</em>.  Because the objects haven't been constructed, we can't ever get hold of them without actually calling the function.  The best we could do is to store off the source code and return that as a string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This behavior is easy explained by:</p>\n\n<ol>\n<li>function (class etc.) declaration is executed only once, creating all default value objects</li>\n<li>everything is passed by reference</li>\n</ol>\n\n<p>So:</p>\n\n<pre><code>def x(a=0, b=[], c=[], d=0):\n    a = a + 1\n    b = b + [1]\n    c.append(1)\n    print a, b, c\n</code></pre>\n\n<ol>\n<li>a doesn't change - every assignment call creates new int object - new object is printed</li>\n<li>b doesn't change - new array is build from default value and printed</li>\n<li>c changes - operation is performed on same object - and it is printed</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What you're asking is why this:</p>\n\n<pre><code>def func(a=[], b = 2):\n    pass\n</code></pre>\n\n<p>isn't internally equivalent to this:</p>\n\n<pre><code>def func(a=None, b = None):\n    a_default = lambda: []\n    b_default = lambda: 2\n    def actual_func(a=None, b=None):\n        if a is None: a = a_default()\n        if b is None: b = b_default()\n    return actual_func\nfunc = func()\n</code></pre>\n\n<p>except for the case of explicitly calling func(None, None), which we'll ignore.</p>\n\n<p>In other words, instead of evaluating default parameters, why not store each of them, and evaluate them when the function is called?</p>\n\n<p>One answer is probably right there--it would effectively turn every function with default parameters into a closure.  Even if it's all hidden away in the interpreter and not a full-blown closure, the data's got to be stored somewhere.  It'd be slower and use more memory.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This actually has nothing to do with default values, other than that it often comes up as an unexpected behaviour when you write functions with mutable default values.</p>\n\n<pre><code>&gt;&gt;&gt; def foo(a):\n    a.append(5)\n    print a\n\n&gt;&gt;&gt; a  = [5]\n&gt;&gt;&gt; foo(a)\n[5, 5]\n&gt;&gt;&gt; foo(a)\n[5, 5, 5]\n&gt;&gt;&gt; foo(a)\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo(a)\n[5, 5, 5, 5, 5]\n</code></pre>\n\n<p>No default values in sight in this code, but you get exactly the same problem.</p>\n\n<p>The problem is that <code>foo</code> is <em>modifying</em> a mutable variable passed in from the caller, when the caller doesn't expect this. Code like this would be fine if the function was called something like <code>append_5</code>; then the caller would be calling the function in order to modify the value they pass in, and the behaviour would be expected. But such a function would be very unlikely to take a default argument, and probably wouldn't return the list (since the caller already has a reference to that list; the one it just passed in).</p>\n\n<p>Your original <code>foo</code>, with a default argument, shouldn't be modifying <code>a</code> whether it was explicitly passed in or got the default value. Your code should leave mutable arguments alone unless it is clear from the context/name/documentation that the arguments are supposed to be modified. Using mutable values passed in as arguments as local temporaries is an extremely bad idea, whether we're in Python or not and whether there are default arguments involved or not.</p>\n\n<p>If you need to destructively manipulate a local temporary in the course of computing something, and you need to start your manipulation from an argument value, you need to make a copy.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>1)  The so-called problem of \"Mutable Default Argument\" is in general a special example demonstrating that:<br>\n\"All functions with this problem <strong>suffer also from similar side effect problem on the actual parameter</strong>,\"<br>\nThat is against the rules of functional programming, usually undesiderable and should be fixed both together.</p>\n\n<p>Example:</p>\n\n<pre><code>def foo(a=[]):                 # the same problematic function\n    a.append(5)\n    return a\n\n&gt;&gt;&gt; somevar = [1, 2]           # an example without a default parameter\n&gt;&gt;&gt; foo(somevar)\n[1, 2, 5]\n&gt;&gt;&gt; somevar\n[1, 2, 5]                      # usually expected [1, 2]\n</code></pre>\n\n<p><strong>Solution</strong>:  a <strong>copy</strong><br>\nAn absolutely safe solution is to <strong><code>copy</code></strong> or <strong><code>deepcopy</code></strong> the input object first and then to do whatever with the copy.</p>\n\n<pre><code>def foo(a=[]):\n    a = a[:]     # a copy\n    a.append(5)\n    return a     # or everything safe by one line: \"return a + [5]\"\n</code></pre>\n\n<p>Many builtin mutable types have a copy method like <code>some_dict.copy()</code> or <code>some_set.copy()</code> or can be copied easy like <code>somelist[:]</code> or <code>list(some_list)</code>. Every object can be also copied by <code>copy.copy(any_object)</code> or more thorough by <code>copy.deepcopy()</code> (the latter useful if the mutable object is composed from mutable objects). Some objects are fundamentally based on side effects like \"file\" object and can not be meaningfully reproduced by copy. <a href=\"http://effbot.org/pyfaq/how-do-i-copy-an-object-in-python.htm\">copying</a></p>\n\n<p>Example problem for <a href=\"http://stackoverflow.com/q/13484107/448474\">a similar SO question</a></p>\n\n<pre><code>class Test(object):            # the original problematic class\n  def __init__(self, var1=[]):\n    self._var1 = var1\n\nsomevar = [1, 2]               # an example without a default parameter\nt1 = Test(somevar)\nt2 = Test(somevar)\nt1._var1.append([1])\nprint somevar                  # [1, 2, [1]] but usually expected [1, 2]\nprint t2._var1                 # [1, 2, [1]] but usually expected [1, 2]\n</code></pre>\n\n<p>It shouldn't be neither saved in any <em>public</em> attribute of an instance returned by this function. (Assuming that <em>private</em> attributes of instance should not be modified from outside of this class or subclasses by convention. i.e. <code>_var1</code> is a private attribute )</p>\n\n<p>Conclusion:<br>\nInput parameters objects shouldn't be modified in place (mutated) nor they should not be binded into an object returned by the function. (If we prefere programming without side effects which is strongly recommended. see <a href=\"http://en.wikipedia.org/wiki/Side_effect_%28computer_science%29\">Wiki about \"side effect\"</a> (The first two paragraphs are relevent in this context.)\n.)</p>\n\n<p>2)<br>\nOnly if the side effect on the actual parameter is required but unwanted on the default parameter then the useful solution is <code>def ...(var1=None):</code> <code>if var1 is None:</code> <code>var1 = []</code> <a href=\"http://effbot.org/zone/default-values.htm#what-to-do-instead\">More..</a></p>\n\n<p>3) In some cases is <a href=\"http://effbot.org/zone/default-values.htm#valid-uses-for-mutable-defaults\">the mutable behavior of default parameters useful</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's a performance optimization.  As a result of this functionality, which of these two function calls do you think is faster?</p>\n\n<pre><code>def print_tuple(some_tuple=(1,2,3)):\n    print some_tuple\n\nprint_tuple()        #1\nprint_tuple((1,2,3)) #2\n</code></pre>\n\n<p>I'll give you a hint.  Here's the disassembly (see <a href=\"http://docs.python.org/library/dis.html\">http://docs.python.org/library/dis.html</a>):</p>\n\n<h1><code>#</code>1</h1>\n\n<pre><code>0 LOAD_GLOBAL              0 (print_tuple)\n3 CALL_FUNCTION            0\n6 POP_TOP\n7 LOAD_CONST               0 (None)\n10 RETURN_VALUE\n</code></pre>\n\n<h1><code>#</code>2</h1>\n\n<pre><code> 0 LOAD_GLOBAL              0 (print_tuple)\n 3 LOAD_CONST               4 ((1, 2, 3))\n 6 CALL_FUNCTION            1\n 9 POP_TOP\n10 LOAD_CONST               0 (None)\n13 RETURN_VALUE\n</code></pre>\n\n<blockquote>\n  <p>I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs ?)</p>\n</blockquote>\n\n<p>As you can see, there <em>is</em> a performance benefit when using immutable default arguments.  This can make a difference if it's a frequently called function or the default argument takes a long time to construct.  Also, bear in mind that Python isn't C.  In C you have constants that are pretty much free.  In Python you don't have this benefit.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>5 points in defense of Python</h1>\n\n<ol>\n<li><p><strong>Simplicity</strong>: The behavior is simple in the following sense:\nMost people fall into this trap only once, not several times.</p></li>\n<li><p><strong>Consistency</strong>: Python <em>always</em> passes objects, not names.\nThe default parameter is, obviously, part of the function \nheading (not the function body). It therefore ought to be evaluated\nat module load time (and only at module load time, unless nested), not\nat function call time.</p></li>\n<li><p><strong>Usefulness</strong>: As Frederik Lundh points out in his explanation\nof <a href=\"http://effbot.org/zone/default-values.htm#valid-uses-for-mutable-defaults\">\"Default Parameter Values in Python\"</a>, the\ncurrent behavior can be quite useful for advanced programming.</p></li>\n<li><p><strong>Sufficient documentation</strong>: In the most basic Python documentation,\nthe tutorial, the issue is loudly announced as\nan <strong>\"Important warning\"</strong> in the <em>first</em> subsection of Section\n<a href=\"https://docs.python.org/3/tutorial/controlflow.html#default-argument-values\">\"More on Defining Functions\"</a>.\n(The warning even uses boldface,\nwhich is rarely applied outside of headings)</p></li>\n<li><p><strong>Meta-learning</strong>: Falling into the trap is actually a very\nhelpful moment (at least if you are a reflective learner),\nbecause you will subsequently better understand the point \n\"Consistency\" above and that will\nteach you a great deal about Python.</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This behavior is not surprising if you take the following into consideration:</p>\n\n<ol>\n<li>The behavior of read-only class attributes upon assignment attempts, and that</li>\n<li>Functions are objects (explained well in the accepted answer). </li>\n</ol>\n\n<p>The role of <strong>(2)</strong> has been covered extensively in this thread. <strong>(1)</strong> is likely the astonishment causing factor, as this behavior is not \"intuitive\" when coming from other languages.</p>\n\n<p><strong>(1)</strong> is described in the Python <a href=\"http://docs.python.org/tutorial/classes.html\">tutorial on classes</a>. In an attempt to assign a value to a read-only class attribute:</p>\n\n<blockquote>\n  <p>...all variables found outside of the innermost scope are\n  read-only (<strong><em>an attempt to write to such a variable will simply create a\n  new local variable in the innermost scope, leaving the identically\n  named outer variable unchanged</em></strong>).</p>\n</blockquote>\n\n<p>Look back to the original example and consider the above points:</p>\n\n<pre><code>def foo(a=[]):\n    a.append(5)\n    return a\n</code></pre>\n\n<p>Here <code>foo</code> is an object and <code>a</code> is an attribute of <code>foo</code> (available at <code>foo.func_defs[0]</code>). Since <code>a</code> is a list, <code>a</code> is mutable and is thus a read-write attribute of <code>foo</code>. It is initialized to the empty list as specified by the signature when the function is instantiated, and is available for reading and writing as long as the function object exists. </p>\n\n<p>Calling <code>foo</code> without overriding a default uses that default's value from <code>foo.func_defs</code>. In this case, <code>foo.func_defs[0]</code> is used for <code>a</code> within function object's code scope. Changes to <code>a</code> change <code>foo.func_defs[0]</code>, which is part of the <code>foo</code> object and persists between execution of the code in <code>foo</code>.</p>\n\n<p>Now, compare this to the example from the documentation on <a href=\"http://docs.python.org/tutorial/controlflow.html#default-argument-values\">emulating the default argument behavior of other languages</a>, such that the function signature defaults are used every time the function is executed:</p>\n\n<pre><code>def foo(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\n</code></pre>\n\n<p>Taking <strong>(1)</strong> and <strong>(2)</strong> into account, one can see why this accomplishes the the desired behavior: </p>\n\n<ul>\n<li>When the <code>foo</code> function object is instantiated, <code>foo.func_defs[0]</code> is set to <code>None</code>, an immutable object.</li>\n<li>When the function is executed with defaults (with no parameter specified for <code>L</code> in the function call), <code>foo.func_defs[0]</code> (<code>None</code>) is available in the local scope as <code>L</code>.</li>\n<li>Upon <code>L = []</code>, the assignment cannot succeed at <code>foo.func_defs[0]</code>, because that attribute is read-only. </li>\n<li>Per <strong>(1)</strong>, <strong><em>a new local variable also named <code>L</code> is created in the local scope</em></strong> and used for the remainder of the function call. <code>foo.func_defs[0]</code> thus remains unchanged for future invocations of <code>foo</code>.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>the shortest answer would probably be \"definition is execution\", therefore the whole argument makes no strict sense. as a more contrived example, you may cite this:</p>\n\n<pre><code>def a(): return []\n\ndef b(x=a()):\n    print x\n</code></pre>\n\n<p>hopefully it's enough to show that not executing the default argument expressions at the execution time of the def statement isn't easy or doesn't make sense, or both.</p>\n\n<p>i agree it's a gotcha when you try to use default constructors, though.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can get round this by replacing the object (and therefore the tie with the scope):</p>\n\n<pre><code>def foo(a=[]):\n    a = list(a)\n    a.append(5)\n    return a\n</code></pre>\n\n<p>Ugly, but it works.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The solutions here are:</p>\n\n<ol>\n<li>Use <code>None</code> as your default value (or a nonce <code>object</code>), and switch on that to create your values at runtime; or</li>\n<li>Use a <code>lambda</code> as your default parameter, and call it within a try block to get the default value (this is the sort of thing that lambda abstraction is for).</li>\n</ol>\n\n<p>The second option is nice because users of the function can pass in a callable, which may be already existing (such as a <code>type</code>)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A simple workaround using None</p>\n\n<pre><code>&gt;&gt;&gt; def bar(b, data=None):\n...     data = data or []\n...     data.append(b)\n...     return data\n... \n&gt;&gt;&gt; bar(3)\n[3]\n&gt;&gt;&gt; bar(3)\n[3]\n&gt;&gt;&gt; bar(3)\n[3]\n&gt;&gt;&gt; bar(3, [34])\n[34, 3]\n&gt;&gt;&gt; bar(3, [34])\n[34, 3]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It may be true that:</p>\n\n<ol>\n<li>Someone is using every language/library feature, and</li>\n<li>Switching the behavior here would be ill-advised, but</li>\n</ol>\n\n<p>it is entirely consistent to hold to both of the features above and still make another point:</p>\n\n<ol>\n<li>It is a confusing feature and it is unfortunate in Python.</li>\n</ol>\n\n<p>The other answers, or at least some of them either make points 1 and 2 but not 3, or make point 3 and downplay points 1 and 2. <strong>But all three are true.</strong></p>\n\n<p>It may be true that switching horses in midstream here would be asking for significant breakage, and that there could be more problems created by changing Python to intuitively handle Stefano's opening snippet. And it may be true that someone who knew Python internals well could explain a minefield of consequences. <em>However,</em></p>\n\n<p>The existing behavior is not Pythonic, and Python is successful because very little about the language violates the principle of least astonishment anywhere <em>near</em> this badly. It is a real problem, whether or not it would be wise to uproot it. It is a design flaw. If you understand the language much better by trying to trace out the behavior, I can say that C++ does all of this and more; you learn a lot by navigating, for instance, subtle pointer errors. But this is not Pythonic: people who care about Python enough to persevere in the face of this behavior are people who are drawn to the language because Python has far fewer surprises than other language. Dabblers and the curious become Pythonistas when they are astonished at how little time it takes to get something working--not because of a design fl--I mean, hidden logic puzzle--that cuts against the intuitions of programmers who are drawn to Python because it <strong>Just Works</strong>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When we do this:</p>\n\n<pre><code>def foo(a=[]):\n    ...\n</code></pre>\n\n<p>... we assign the argument <code>a</code> to an <em>unnamed</em> list, if the caller does not pass the value of a.</p>\n\n<p>To make things simpler for this discussion, let's temporarily give the unnamed list a name. How about <code>pavlo</code> ?</p>\n\n<pre><code>def foo(a=pavlo):\n   ...\n</code></pre>\n\n<p>At any time, if the caller doesn't tell us what <code>a</code> is, we reuse <code>pavlo</code>.</p>\n\n<p>If <code>pavlo</code> is mutable (modifiable), and <code>foo</code> ends up modifying it, an effect we notice the next time <code>foo</code> is called without specifying <code>a</code>.</p>\n\n<p>So this is what you see (Remember, <code>pavlo</code> is initialized to []):</p>\n\n<pre><code> &gt;&gt;&gt; foo()\n [5]\n</code></pre>\n\n<p>Now, <code>pavlo</code> is [5].</p>\n\n<p>Calling <code>foo()</code> again modifies <code>pavlo</code> again:</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n[5, 5]\n</code></pre>\n\n<p>Specifying <code>a</code> when calling <code>foo()</code> ensures <code>pavlo</code> is not touched.</p>\n\n<pre><code>&gt;&gt;&gt; ivan = [1, 2, 3, 4]\n&gt;&gt;&gt; foo(a=ivan)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; ivan\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p>So, <code>pavlo</code> is still <code>[5, 5]</code>.</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n[5, 5, 5]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Already busy topic, but from what I read here, the following helped me realizing how it's working internally:</p>\n\n<pre><code>def bar(a=[]):\n     print id(a)\n     a = a + [1]\n     print id(a)\n     return a\n\n&gt;&gt;&gt; bar()\n4484370232\n4484524224\n[1]\n&gt;&gt;&gt; bar()\n4484370232\n4484524152\n[1]\n&gt;&gt;&gt; bar()\n4484370232 # Never change, this is 'class property' of the function\n4484523720 # Always a new object \n[1]\n&gt;&gt;&gt; id(bar.func_defaults[0])\n4484370232\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This \"bug\" gave me a lot of overtime work hours! But I'm beginning to see a potential use of it (but I would have liked it to be at the execution time, still)</p>\n\n<p>I'm gonna give you what I see as a useful example.</p>\n\n<pre><code>def example(errors=[]):\n    # statements\n    # Something went wrong\n    mistake = True\n    if mistake:\n        tryToFixIt(errors)\n        # Didn't work.. let's try again\n        tryToFixItAnotherway(errors)\n        # This time it worked\n    return errors\n\ndef tryToFixIt(err):\n    err.append('Attempt to fix it')\n\ndef tryToFixItAnotherway(err):\n    err.append('Attempt to fix it by another way')\n\ndef main():\n    for item in range(2):\n        errors = example()\n    print '\\n'.join(errors)\n\nmain()\n</code></pre>\n\n<p>prints the following</p>\n\n<pre><code>Attempt to fix it\nAttempt to fix it by another way\nAttempt to fix it\nAttempt to fix it by another way\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I sometimes exploit this behavior as an alternative to the following pattern:</p>\n\n<pre><code>singleton = None\n\ndef use_singleton():\n    global singleton\n\n    if singleton is None:\n        singleton = _make_singleton()\n\n    return singleton.use_me()\n</code></pre>\n\n<p>If <code>singleton</code> is only used by <code>use_singleton</code>, I like the following pattern as a replacement:</p>\n\n<pre><code># _make_singleton() is called only once when the def is executed\ndef use_singleton(singleton=_make_singleton()):\n    return singleton.use_me()\n</code></pre>\n\n<p>I've used this for instantiating client classes that access external resources, and also for creating dicts or lists for memoization.</p>\n\n<p>Since I don't think this pattern is well known, I do put a short comment in to guard against future misunderstandings.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think the answer to this question lies in how python pass data to parameter (pass by value or by reference), not mutability or how python handle the \"def\" statement.</p>\n\n<p>A brief introduction. First, there are two type of data types in python, one is simple elementary data type, like numbers, and another data type is objects. Second, when passing data to parameters, python pass elementary data type by value, i.e., make a local copy of the value to a local variable, but pass object by reference, i.e., pointers to the object.</p>\n\n<p>Admitting the above two points, let's explain what happened to the python code. It's only because of passing by reference for objects, but has nothing to do with mutable/immutable, or arguably the fact that \"def\" statement is executed only once when it is defined.</p>\n\n<p>[] is an object, so python pass the reference of [] to <code>a</code>, i.e., <code>a</code> is only a pointer to [] which lies in memory as an object. There is only one copy of [] with, however, many references to it. For the first foo(), the list [] is changed to <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"nofollow\">1</a> by append method. But Note that there is only one copy of the list object and this object now becomes <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"nofollow\">1</a>. When running the second foo(), what effbot webpage says (items is not evaluated any more) is wrong. <code>a</code> is evaluated to be the list object, although now the content of the object is <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"nofollow\">1</a>. This is the effect of passing by reference! The result of foo(3) can be easily derived in the same way.</p>\n\n<p>To further validate my answer, let's take a look at two additional codes.</p>\n\n<p>====== No. 2 ========</p>\n\n<pre><code>def foo(x, items=None):\n    if items is None:\n        items = []\n    items.append(x)\n    return items\n\nfoo(1)  #return [1]\nfoo(2)  #return [2]\nfoo(3)  #return [3]\n</code></pre>\n\n<p><code>[]</code> is an object, so is <code>None</code> (the former is mutable while the latter is immutable. But the mutability has nothing to do with the question). None is somewhere in the space but we know it's there and there is only one copy of None there. So every time foo is invoked, items is evaluated (as opposed to some answer that it is only evaluated once) to be None, to be clear, the reference (or the address) of None. Then in the foo, item is changed to [], i.e., points to another object which has a different address. </p>\n\n<p>====== No. 3 =======</p>\n\n<pre><code>def foo(x, items=[]):\n    items.append(x)\n    return items\n\nfoo(1)    # returns [1]\nfoo(2,[]) # returns [2]\nfoo(3)    # returns [1,3]\n</code></pre>\n\n<p>The invocation of foo(1) make items point to a list object [] with an address, say, 11111111. the content of the list is changed to <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"nofollow\">1</a> in the foo function in the sequel, but the address is not changed, still 11111111. Then foo(2,[]) is coming. Although the [] in foo(2,[]) has the same content as the default parameter [] when calling foo(1), their address are different! Since we provide the parameter explicitly, <code>items</code> has to take the address of this new <code>[]</code>, say 2222222, and return it after making some change. Now foo(3) is executed. since only <code>x</code> is provided, items has to take its default value again. What's the default value? It is set when defining the foo function: the list object located in 11111111. So the items is evaluated to be the address 11111111 having an element 1. The list located at 2222222 also contains one element 2, but it is not pointed by items any more. Consequently, An append of 3 will make <code>items</code> [1,3]. </p>\n\n<p>From the above explanations, we can see that the <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"nofollow\">effbot</a> webpage recommended in the accepted answer failed to give a relevant answer to this question. What is more, I think a point in the effbot webpage is wrong. I think the code regarding the UI.Button is correct:</p>\n\n<pre><code>for i in range(10):\n    def callback():\n        print \"clicked button\", i\n    UI.Button(\"button %s\" % i, callback)\n</code></pre>\n\n<p>Each button can hold a distinct callback function which will display different value of <code>i</code>. I can provide an example to show this:</p>\n\n<pre><code>x=[]\nfor i in range(10):\n    def callback():\n        print(i)\n    x.append(callback) \n</code></pre>\n\n<p>If we execute <code>x[7]()</code> we'll get 7 as expected, and <code>x[9]()</code> will gives 9, another value of <code>i</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; def a():\n&gt;&gt;&gt;    print \"a executed\"\n&gt;&gt;&gt;    return []\n&gt;&gt;&gt; x =a()\na executed\n&gt;&gt;&gt; def b(m=[]):\n&gt;&gt;&gt;    m.append(5)\n&gt;&gt;&gt;    print m\n&gt;&gt;&gt; b(x)\n[5]\n&gt;&gt;&gt; b(x)\n[5, 5]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am going to demonstrate an alternative structure to pass a default list value to a function (it works equally well with dictionaries).  </p>\n\n<p>As others have extensively commented, the list parameter is bound to the function when it is defined as opposed to when it is executed.  Because lists and dictionaries are mutable, any alteration to this parameter will affect other calls to this function.  As a result, subsequent calls to the function will receive this shared list which may have been altered by any other calls to the function.  Worse yet, two parameters are using this function's shared parameter at the same time oblivious to the changes made by the other.</p>\n\n<p><strong>Wrong Method (probably...)</strong>:</p>\n\n<pre><code>def foo(list_arg=[5]):\n    return list_arg\n\na = foo()\na.append(6)\n&gt;&gt;&gt; a\n[5, 6]\n\nb = foo()\nb.append(7)\n# The value of 6 appended to variable 'a' is now part of the list held by 'b'.\n&gt;&gt;&gt; b\n[5, 6, 7]  \n\n# Although 'a' is expecting to receive 6 (the last element it appended to the list),\n# it actually receives the last element appended to the shared list.\n# It thus receives the value 7 previously appended by 'b'.\n&gt;&gt;&gt; a.pop()             \n7\n</code></pre>\n\n<p>You can verify that they are one and the same object by using <code>id</code>:</p>\n\n<pre><code>&gt;&gt;&gt; id(a)\n5347866528\n\n&gt;&gt;&gt; id(b)\n5347866528\n</code></pre>\n\n<p>Per Brett Slatkin's \"Effective Python: 59 Specific Ways to Write Better Python\", <em>Item 20: Use <code>None</code> and Docstrings to specify dynamic default arguments</em> (p. 48)</p>\n\n<blockquote>\n  <p>The convention for achieving the desired result in Python is to\n  provide a default value of <code>None</code> and to document the actual behaviour\n  in the docstring.</p>\n</blockquote>\n\n<p>This implementation ensures that each call to the function either receives the default list or else the list passed to the function.</p>\n\n<p><strong>Preferred Method</strong>:</p>\n\n<pre><code>def foo(list_arg=None):\n   \"\"\"\n   :param list_arg:  A list of input values. \n                     If none provided, used a list with a default value of 5.\n   \"\"\"\n   if not list_arg:\n       list_arg = [5]\n   return list_arg\n\na = foo()\na.append(6)\n&gt;&gt;&gt; a\n[5, 6]\n\nb = foo()\nb.append(7)\n&gt;&gt;&gt; b\n[5, 7]\n\nc = foo([10])\nc.append(11)\n&gt;&gt;&gt; c\n[10, 11]\n</code></pre>\n\n<p>There may be legitimate use cases for the 'Wrong Method' whereby the programmer intended the default list parameter to be shared, but this is more likely the exception than the rule.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A very subtle issue being pointed out here. Thanks for all the insights.</p>\n\n<p>I ran into a similar problem and found a fix for this.</p>\n\n<p><strong>It's always safe to clean the vessel before we start cooking</strong></p>\n\n<p><em>safe version:</em>  </p>\n\n<pre><code>def foo(bird=[]):  \n    del bird[:]  \n    bird.append('parrot')  \n    return bird  \n\n&gt;&gt;&gt;&gt; foo()       #1st call\n    ['parrot']\n&gt;&gt;&gt;&gt; foo()       #2nd call\n    ['parrot']\n&gt;&gt;&gt;&gt; foo()       #3rd call\n    ['parrot']\n</code></pre>\n\n<p>Now, independent of the number of times you call, this will work as \"expected\"</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just change the function to be:</p>\n\n<pre><code>def notastonishinganymore(a = [])'''The name is just a joke :)''':\n    del a[:]\n    a.append(5)\n    return a\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/4025909#4025909\"><code>fcntl</code></a>, <a href=\"http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/375511#375511\"><code>select</code></a>, <a href=\"http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/437888#437888\"><code>asyncproc</code></a> won't help in this case.</p>\n\n<p>Reliable way to read a stream without blocking on both Windows and Linux is to use <a href=\"http://docs.python.org/library/queue.html#Queue.Queue.get\"><code>Queue.get_nowait()</code></a>:</p>\n\n<pre><code>import sys\nfrom subprocess import PIPE, Popen\nfrom threading  import Thread\n\ntry:\n    from Queue import Queue, Empty\nexcept ImportError:\n    from queue import Queue, Empty  # python 3.x\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\ndef enqueue_output(out, queue):\n    for line in iter(out.readline, b''):\n        queue.put(line)\n    out.close()\n\np = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)\nq = Queue()\nt = Thread(target=enqueue_output, args=(p.stdout, q))\nt.daemon = True # thread dies with the program\nt.start()\n\n# ... do other things here\n\n# read line without blocking\ntry:  line = q.get_nowait() # or q.get(timeout=.1)\nexcept Empty:\n    print('no output yet')\nelse: # got line\n    # ... do something with line\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have often had a similar problem; Python programs I write frequently need to have the ability to execute some primary functionality while simultaneously accepting user input from the command line (stdin). Simply putting the user input handling functionality in another thread doesn't solve the problem because <code>readline()</code> blocks and has no timeout. If the primary functionality is complete and there is no longer any need to wait for further user input I typically want my program to exit, but it can't because <code>readline()</code> is still blocking in the other thread waiting for a line. A solution I have found to this problem is to make stdin a non-blocking file using the fcntl module:</p>\n\n<pre><code>import fcntl\nimport os\nimport sys\n\n# make stdin a non-blocking file\nfd = sys.stdin.fileno()\nfl = fcntl.fcntl(fd, fcntl.F_GETFL)\nfcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n# user input handling thread\nwhile mainThreadIsRunning:\n      try: input = sys.stdin.readline()\n      except: continue\n      handleInput(input)\n</code></pre>\n\n<p>In my opinion this is a bit cleaner than using the select or signal modules to solve this problem but then again it only works on UNIX...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try the <a href=\"http://www.lysator.liu.se/~bellman/download/asyncproc.py\">asyncproc</a> module. For example:</p>\n\n<pre><code>import os\nfrom asyncproc import Process\nmyProc = Process(\"myprogram.app\")\n\nwhile True:\n    # check to see if process has ended\n    poll = myProc.wait(os.WNOHANG)\n    if poll != None:\n        break\n    # print any new output\n    out = myProc.read()\n    if out != \"\":\n        print out\n</code></pre>\n\n<p>The module takes care of all the threading as suggested by S.Lott.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python 3.4 introduces new <a href=\"http://www.python.org/dev/peps/pep-0411/\" rel=\"nofollow\">provisional API</a> for asynchronous IO -- <a href=\"http://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\"><code>asyncio</code> module</a>. </p>\n\n<p>The approach is similar to <a href=\"http://stackoverflow.com/a/5750194/4279\"><code>twisted</code>-based answer by @Bryan Ward</a> -- define a protocol and its methods are called as soon as data is ready:</p>\n\n<pre><code>#!/usr/bin/env python3\nimport asyncio\nimport os\n\nclass SubprocessProtocol(asyncio.SubprocessProtocol):\n    def pipe_data_received(self, fd, data):\n        if fd == 1: # got stdout data (bytes)\n            print(data)\n\n    def connection_lost(self, exc):\n        loop.stop() # end loop.run_forever()\n\nif os.name == 'nt':\n    loop = asyncio.ProactorEventLoop() # for subprocess' pipes on Windows\n    asyncio.set_event_loop(loop)\nelse:\n    loop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(loop.subprocess_exec(SubprocessProtocol, \n        \"myprogram.exe\", \"arg1\", \"arg2\"))\n    loop.run_forever()\nfinally:\n    loop.close()\n</code></pre>\n\n<p>See <a href=\"https://docs.python.org/3/library/asyncio-subprocess.html\" rel=\"nofollow\">\"Subprocess\" in the docs</a>.</p>\n\n<p>There is a high-level interface <code>asyncio.create_subprocess_exec()</code> that returns <a href=\"https://docs.python.org/3/library/asyncio-subprocess.html#process\" rel=\"nofollow\"><code>Process</code> objects</a> that allows to read a line asynchroniosly using <a href=\"https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader\" rel=\"nofollow\"><code>StreamReader.readline()</code> coroutine</a> \n(with <a href=\"https://www.python.org/dev/peps/pep-0492/\" rel=\"nofollow\"><code>async</code>/<code>await</code> Python 3.5+ syntax</a>):</p>\n\n<pre><code>#!/usr/bin/env python3.5\nimport asyncio\nimport locale\nimport sys\nfrom asyncio.subprocess import PIPE\nfrom contextlib import closing\n\nasync def readline_and_kill(*args):\n    # start child process\n    process = await asyncio.create_subprocess_exec(*args, stdout=PIPE)\n\n    # read line (sequence of bytes ending with b'\\n') asynchronously\n    async for line in process.stdout:\n        print(\"got line:\", line.decode(locale.getpreferredencoding(False)))\n        break\n    process.kill()\n    return await process.wait() # wait for the child process to exit\n\n\nif sys.platform == \"win32\":\n    loop = asyncio.ProactorEventLoop()\n    asyncio.set_event_loop(loop)\nelse:\n    loop = asyncio.get_event_loop()\n\nwith closing(loop):\n    sys.exit(loop.run_until_complete(readline_and_kill(\n        \"myprogram.exe\", \"arg1\", \"arg2\")))\n</code></pre>\n\n<p><code>readline_and_kill()</code> performs the following tasks:</p>\n\n<ul>\n<li>start subprocess, redirect its stdout to a pipe</li>\n<li>read a line from subprocess' stdout asynchronously</li>\n<li>kill subprocess</li>\n<li>wait for it to exit</li>\n</ul>\n\n<p>Each step could be limited by timeout seconds if necessary.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can do this really easily in <a href=\"http://twistedmatrix.com/trac/\">Twisted</a>. Depending upon your existing code base, this might not be that easy to use, but if you are building a twisted application, then things like this become almost trivial. You create a <code>ProcessProtocol</code> class, and override the <code>outReceived()</code> method. Twisted (depending upon the reactor used) is usually just a big <code>select()</code> loop with callbacks installed to handle data from different file descriptors (often network sockets). So the <code>outReceived()</code> method is simply installing a callback for handling data coming from <code>STDOUT</code>.  A simple example demonstrating this behavior is as follows:</p>\n\n<pre><code>from twisted.internet import protocol, reactor\n\nclass MyProcessProtocol(protocol.ProcessProtocol):\n\n    def outReceived(self, data):\n        print data\n\nproc = MyProcessProtocol()\nreactor.spawnProcess(proc, './myprogram', ['./myprogram', 'arg1', 'arg2', 'arg3'])\nreactor.run()\n</code></pre>\n\n<p>The <a href=\"http://twistedmatrix.com/documents/current/core/howto/process.html\">Twisted documentation</a> has some good information on this.</p>\n\n<p>If you build your entire application around Twisted, it makes asynchronous communication with other processes, local or remote, really elegant like this. On the other hand, if your program isn't built on top of Twisted, this isn't really going to be that helpful. Hopefully this can be helpful to other readers, even if it isn't applicable for your particular application.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use select &amp; read(1).  </p>\n\n<pre><code>import subprocess     #no new requirements\ndef readAllSoFar(proc, retVal=''): \n  while (select.select([proc.stdout],[],[],0)[0]!=[]):   \n    retVal+=proc.stdout.read(1)\n  return retVal\np = subprocess.Popen(['/bin/ls'], stdout=subprocess.PIPE)\nwhile not p.poll():\n  print (readAllSoFar(p))\n</code></pre>\n\n<p>For readline()-like:</p>\n\n<pre><code>lines = ['']\nwhile not p.poll():\n  lines = readAllSoFar(p, lines[-1]).split('\\n')\n  for a in range(len(lines)-1):\n    print a\nlines = readAllSoFar(p, lines[-1]).split('\\n')\nfor a in range(len(lines)-1):\n  print a\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One solution is to make another process to perform your read of the process, or make a thread of the process with a timeout.</p>\n\n<p>Here's the threaded version of a timeout function:</p>\n\n<p><a href=\"http://code.activestate.com/recipes/473878/\">http://code.activestate.com/recipes/473878/</a></p>\n\n<p>However, do you need to read the stdout as it's coming in?\nAnother solution may be to dump the output to a file and wait for the process to finish using <strong>p.wait()</strong>.</p>\n\n<pre><code>f = open('myprogram_output.txt','w')\np = subprocess.Popen('myprogram.exe', stdout=f)\np.wait()\nf.close()\n\n\nstr = open('myprogram_output.txt','r').read()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Disclaimer: this works only for tornado</p>\n\n<p>You can do this by setting the fd to be nonblocking and then use ioloop to register callbacks. I have packaged this in an egg called <a href=\"http://pypi.python.org/pypi/tornado_subprocess/0.1.3\">tornado_subprocess</a> and you can install it via PyPI:</p>\n\n<pre><code>easy_install tornado_subprocess\n</code></pre>\n\n<p>now you can do something like this:</p>\n\n<pre><code>import tornado_subprocess\nimport tornado.ioloop\n\n    def print_res( status, stdout, stderr ) :\n    print status, stdout, stderr\n    if status == 0:\n        print \"OK:\"\n        print stdout\n    else:\n        print \"ERROR:\"\n        print stderr\n\nt = tornado_subprocess.Subprocess( print_res, timeout=30, args=[ \"cat\", \"/etc/passwd\" ] )\nt.start()\ntornado.ioloop.IOLoop.instance().start()\n</code></pre>\n\n<p>you can also use it with a RequestHandler</p>\n\n<pre><code>class MyHandler(tornado.web.RequestHandler):\n    def on_done(self, status, stdout, stderr):\n        self.write( stdout )\n        self.finish()\n\n    @tornado.web.asynchronous\n    def get(self):\n        t = tornado_subprocess.Subprocess( self.on_done, timeout=30, args=[ \"cat\", \"/etc/passwd\" ] )\n        t.start()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Existing solutions did not work for me (details below). What finally worked was to implement readline using read(1) (based on <a href=\"http://stackoverflow.com/a/883166/2039589\">this answer</a>). The latter does not block:</p>\n\n<pre><code>from subprocess import Popen, PIPE\nfrom threading import Thread\ndef process_output(myprocess): #output-consuming thread\n    nextline = None\n    buf = ''\n    while True:\n        #--- extract line using read(1)\n        out = myprocess.stdout.read(1)\n        if out == '' and myprocess.poll() != None: break\n        if out != '':\n            buf += out\n            if out == '\\n':\n                nextline = buf\n                buf = ''\n        if not nextline: continue\n        line = nextline\n        nextline = None\n\n        #--- do whatever you want with line here\n        print 'Line is:', line\n    myprocess.stdout.close()\n\nmyprocess = Popen('myprogram.exe', stdout=PIPE) #output-producing process\np1 = Thread(target=process_output, args=(dcmpid,)) #output-consuming thread\np1.daemon = True\np1.start()\n\n#--- do whatever here and then kill process and thread if needed\nif myprocess.poll() == None: #kill process; will automatically stop thread\n    myprocess.kill()\n    myprocess.wait()\nif p1 and p1.is_alive(): #wait for thread to finish\n    p1.join()\n</code></pre>\n\n<p>Why existing solutions did not work:</p>\n\n<ol>\n<li>Solutions that require readline (including the Queue based ones) always block. It is difficult (impossible?) to kill the thread that executes readline. It only gets killed when the process that created it finishes, but not when the output-producing process is killed.</li>\n<li>Mixing low-level fcntl with high-level readline calls may not work properly as anonnn has pointed out.</li>\n<li>Using select.poll() is neat, but doesn't work on Windows according to python docs.</li>\n<li>Using third-party libraries seems overkill for this task and adds additional dependencies.</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I add this problem to read some subprocess.Popen stdout.\nHere is my non blocking read solution:</p>\n\n<pre><code>import fcntl\n\ndef non_block_read(output):\n    fd = output.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n    try:\n        return output.read()\n    except:\n        return \"\"\n\n# Use example\nfrom subprocess import *\nsb = Popen(\"echo test &amp;&amp; sleep 1000\", shell=True, stdout=PIPE)\nsb.kill()\n\n# sb.stdout.read() # &lt;-- This will block\nnon_block_read(sb.stdout)\n'test\\n'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is my code, used to catch every output from subprocess ASAP, including partial lines. It pumps at same time and stdout and stderr in almost correct order.</p>\n\n<p>Tested and correctly worked on Python 2.7 linux &amp; windows.\n</p>\n\n<pre><code>#!/usr/bin/python\n#\n# Runner with stdout/stderr catcher\n#\nfrom sys import argv\nfrom subprocess import Popen, PIPE\nimport os, io\nfrom threading import Thread\nimport Queue\ndef __main__():\n    if (len(argv) &gt; 1) and (argv[-1] == \"-sub-\"):\n        import time, sys\n        print \"Application runned!\"\n        time.sleep(2)\n        print \"Slept 2 second\"\n        time.sleep(1)\n        print \"Slept 1 additional second\",\n        time.sleep(2)\n        sys.stderr.write(\"Stderr output after 5 seconds\")\n        print \"Eol on stdin\"\n        sys.stderr.write(\"Eol on stderr\\n\")\n        time.sleep(1)\n        print \"Wow, we have end of work!\",\n    else:\n        os.environ[\"PYTHONUNBUFFERED\"]=\"1\"\n        try:\n            p = Popen( argv + [\"-sub-\"],\n                       bufsize=0, # line-buffered\n                       stdin=PIPE, stdout=PIPE, stderr=PIPE )\n        except WindowsError, W:\n            if W.winerror==193:\n                p = Popen( argv + [\"-sub-\"],\n                           shell=True, # Try to run via shell\n                           bufsize=0, # line-buffered\n                           stdin=PIPE, stdout=PIPE, stderr=PIPE )\n            else:\n                raise\n        inp = Queue.Queue()\n        sout = io.open(p.stdout.fileno(), 'rb', closefd=False)\n        serr = io.open(p.stderr.fileno(), 'rb', closefd=False)\n        def Pump(stream, category):\n            queue = Queue.Queue()\n            def rdr():\n                while True:\n                    buf = stream.read1(8192)\n                    if len(buf)&gt;0:\n                        queue.put( buf )\n                    else:\n                        queue.put( None )\n                        return\n            def clct():\n                active = True\n                while active:\n                    r = queue.get()\n                    try:\n                        while True:\n                            r1 = queue.get(timeout=0.005)\n                            if r1 is None:\n                                active = False\n                                break\n                            else:\n                                r += r1\n                    except Queue.Empty:\n                        pass\n                    inp.put( (category, r) )\n            for tgt in [rdr, clct]:\n                th = Thread(target=tgt)\n                th.setDaemon(True)\n                th.start()\n        Pump(sout, 'stdout')\n        Pump(serr, 'stderr')\n\n        while p.poll() is None:\n            # App still working\n            try:\n                chan,line = inp.get(timeout = 1.0)\n                if chan=='stdout':\n                    print \"STDOUT&gt;&gt;\", line, \"&lt;?&lt;\"\n                elif chan=='stderr':\n                    print \" ERROR==\", line, \"=?=\"\n            except Queue.Empty:\n                pass\n        print \"Finish\"\n\nif __name__ == '__main__':\n    __main__()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://www.python.org/doc/2.5.2/lib/module-select.html\" rel=\"nofollow\">select</a> module helps you determine where the next useful input is.</p>\n\n<p>However, you're almost always happier with separate threads.  One does a blocking read the stdin, another does wherever it is you don't want blocked.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have created a library based on <a href=\"http://stackoverflow.com/a/4896288/242451\">J. F. Sebastian's solution</a>. You can use it.</p>\n\n<p><a href=\"https://github.com/cenkalti/what\" rel=\"nofollow\">https://github.com/cenkalti/what</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I did a little checking and as far as I can tell the most convenient solution is still <a href=\"http://code.activestate.com/recipes/440554-module-to-allow-asynchronous-subprocess-use-on-win/\" rel=\"nofollow\">this old recipe for an asynchronous Popen subclass</a>, which appears to be also available on <a href=\"https://pypi.python.org/pypi/async_subprocess/0.2.1\" rel=\"nofollow\">PyPI</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Working from J.F. Sebastian's answer, and several other sources, I've put together a simple subprocess manager. It provides the request non-blocking reading, as well as running several processes in parallel. It doesn't use any OS-specific call (that I'm aware) and thus should work anywhere.</p>\n\n<p>It's available from pypi, so just <code>pip install shelljob</code>. Refer to the <a href=\"https://pypi.python.org/pypi/shelljob\" rel=\"nofollow\">project page</a> for examples and full docs.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>EDIT: This implementation still blocks. Use J.F.Sebastian's <a href=\"http://stackoverflow.com/a/4896288/2359288\">answer</a> instead.</p>\n\n<p><strike>I tried the <a href=\"http://stackoverflow.com/a/4896288/2359288\">top answer</a>, but the additional risk and maintenance of thread code was worrisome.</strike></p>\n\n<p>Looking through the <a href=\"http://docs.python.org/2.6/library/io.html\" rel=\"nofollow\">io module</a> (and being limited to 2.6), I found BufferedReader. This is my threadless, non-blocking solution.\n</p>\n\n<pre><code>import io\nfrom subprocess import PIPE, Popen\n\np = Popen(['myprogram.exe'], stdout=PIPE)\n\nSLEEP_DELAY = 0.001\n\n# Create an io.BufferedReader on the file descriptor for stdout\nwith io.open(p.stdout.fileno(), 'rb', closefd=False) as buffer:\n  while p.poll() == None:\n      time.sleep(SLEEP_DELAY)\n      while '\\n' in bufferedStdout.peek(bufferedStdout.buffer_size):\n          line = buffer.readline()\n          # do stuff with the line\n\n  # Handle any remaining output after the process has ended\n  while buffer.peek():\n    line = buffer.readline()\n    # do stuff with the line\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I recently stumbled upon on the same problem\nI need to read one line at time from stream ( tail run in subprocess )\nin non-blocking mode \nI wanted to avoid next problems: not to burn cpu, don't read stream by one byte (like readline did ), etc</p>\n\n<p>Here is my implementation\n<a href=\"https://gist.github.com/grubberr/5501e1a9760c3eab5e0a\" rel=\"nofollow\">https://gist.github.com/grubberr/5501e1a9760c3eab5e0a</a>\nit don't support windows (poll), don't handle EOF,\nbut it works for me well</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>why bothering thread&amp;queue?\nunlike readline(), BufferedReader.read1() wont block waiting for \\r\\n, it returns ASAP if there is any output coming in.</p>\n\n<pre><code>#!/usr/bin/python\nfrom subprocess import Popen, PIPE, STDOUT\nimport io\n\ndef __main__():\n    try:\n        p = Popen( [\"ping\", \"-n\", \"3\", \"127.0.0.1\"], stdin=PIPE, stdout=PIPE, stderr=STDOUT )\n    except: print(\"Popen failed\"); quit()\n    sout = io.open(p.stdout.fileno(), 'rb', closefd=False)\n    while True:\n        buf = sout.read1(1024)\n        if len(buf) == 0: break\n        print buf,\n\nif __name__ == '__main__':\n    __main__()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In my case I needed a logging module that catches the output from the background applications and augments it(adding time-stamps, colors, etc.).</p>\n\n<p>I ended up with a background thread that does the actual I/O. Following code is only for POSIX platforms. I stripped non-essential parts. </p>\n\n<p>If someone is going to use this beast for long runs consider managing open descriptors. In my case it was not a big problem.</p>\n\n<pre><code># -*- python -*-\nimport fcntl\nimport threading\nimport sys, os, errno\nimport subprocess\n\nclass Logger(threading.Thread):\n    def __init__(self, *modules):\n        threading.Thread.__init__(self)\n        try:\n            from select import epoll, EPOLLIN\n            self.__poll = epoll()\n            self.__evt = EPOLLIN\n            self.__to = -1\n        except:\n            from select import poll, POLLIN\n            print 'epoll is not available'\n            self.__poll = poll()\n            self.__evt = POLLIN\n            self.__to = 100\n        self.__fds = {}\n        self.daemon = True\n        self.start()\n\n    def run(self):\n        while True:\n            events = self.__poll.poll(self.__to)\n            for fd, ev in events:\n                if (ev&amp;self.__evt) != self.__evt:\n                    continue\n                try:\n                    self.__fds[fd].run()\n                except Exception, e:\n                    print e\n\n    def add(self, fd, log):\n        assert not self.__fds.has_key(fd)\n        self.__fds[fd] = log\n        self.__poll.register(fd, self.__evt)\n\nclass log:\n    logger = Logger()\n\n    def __init__(self, name):\n        self.__name = name\n        self.__piped = False\n\n    def fileno(self):\n        if self.__piped:\n            return self.write\n        self.read, self.write = os.pipe()\n        fl = fcntl.fcntl(self.read, fcntl.F_GETFL)\n        fcntl.fcntl(self.read, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n        self.fdRead = os.fdopen(self.read)\n        self.logger.add(self.read, self)\n        self.__piped = True\n        return self.write\n\n    def __run(self, line):\n        self.chat(line, nl=False)\n\n    def run(self):\n        while True:\n            try: line = self.fdRead.readline()\n            except IOError, exc:\n                if exc.errno == errno.EAGAIN:\n                    return\n                raise\n            self.__run(line)\n\n    def chat(self, line, nl=True):\n        if nl: nl = '\\n'\n        else: nl = ''\n        sys.stdout.write('[%s] %s%s' % (self.__name, line, nl))\n\ndef system(command, param=[], cwd=None, env=None, input=None, output=None):\n    args = [command] + param\n    p = subprocess.Popen(args, cwd=cwd, stdout=output, stderr=output, stdin=input, env=env, bufsize=0)\n    p.wait()\n\nls = log('ls')\nls.chat('go')\nsystem(\"ls\", ['-l', '/'], output=ls)\n\ndate = log('date')\ndate.chat('go')\nsystem(\"date\", output=date)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This allows you to pass a timeout to read()\n<a href=\"http://www.pixelbeat.org/libs/subProcess.py\" rel=\"nofollow\">http://www.pixelbeat.org/libs/subProcess.py</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Warning:</strong> <code>timeit</code> results may vary due to differences in hardware or\nversion of Python.  </p>\n\n<p>Below is a script which compares a number of implementations: \n</p><ul>\n<li>ambi_sieve_plain,\n</li><li><a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes</a>, \n</li><li><a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes1</a>, \n</li><li><a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes2</a>, \n</li><li><a href=\"http://krenzel.info/?p=83\">sieveOfAtkin</a>, \n</li><li><a href=\"http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\">sieveOfEratosthenes</a>, \n</li><li><a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\">sundaram3</a>,\n</li><li><a href=\"http://zerovolt.com/?p=88\">sieve_wheel_30</a>,\n</li><li><a href=\"http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\">ambi_sieve</a> (requires numpy)\n</li><li><a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">primesfrom3to</a> (requires numpy)\n</li><li><a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">primesfrom2to</a> (requires numpy)\n</li></ul>\n\n<p>Many thanks to <a href=\"http://stackoverflow.com/users/92092/stephan\">stephan</a> for bringing sieve_wheel_30 to my attention.\nCredit goes to <a href=\"http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">Robert William Hanks</a> for primesfrom2to, primesfrom3to, rwh_primes, rwh_primes1, and rwh_primes2.</p>\n\n<p>Of the plain Python methods tested, <strong>with psyco</strong>, for n=1000000,\n<strong>rwh_primes1</strong> was the fastest tested.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes1         | 43.0  |\n| sieveOfAtkin        | 46.4  |\n| rwh_primes          | 57.4  |\n| sieve_wheel_30      | 63.0  |\n| rwh_primes2         | 67.8  |    \n| sieveOfEratosthenes | 147.0 |\n| ambi_sieve_plain    | 152.0 |\n| sundaram3           | 194.0 |\n+---------------------+-------+\n</code></pre>\n\n<p>Of the plain Python methods tested, <strong>without psyco</strong>, for n=1000000,\n<strong>rwh_primes2</strong> was the fastest.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes2         | 68.1  |\n| rwh_primes1         | 93.7  |\n| rwh_primes          | 94.6  |\n| sieve_wheel_30      | 97.4  |\n| sieveOfEratosthenes | 178.0 |\n| ambi_sieve_plain    | 286.0 |\n| sieveOfAtkin        | 314.0 |\n| sundaram3           | 416.0 |\n+---------------------+-------+\n</code></pre>\n\n<p>Of all the methods tested, <em>allowing numpy</em>, for n=1000000,\n<strong>primesfrom2to</strong> was the fastest tested.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| primesfrom2to       | 15.9  |\n| primesfrom3to       | 18.4  |\n| ambi_sieve          | 29.3  |\n+---------------------+-------+\n</code></pre>\n\n<p>Timings were measured using the command:</p>\n\n<pre><code>python -mtimeit -s\"import primes\" \"primes.{method}(1000000)\"\n</code></pre>\n\n<p>with <code>{method}</code> replaced by each of the method names.</p>\n\n<p>primes.py:</p>\n\n<pre><code>#!/usr/bin/env python\nimport psyco; psyco.full()\nfrom math import sqrt, ceil\nimport numpy as np\n\ndef rwh_primes(n):\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * n\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)\n    return [2] + [i for i in xrange(3,n,2) if sieve[i]]\n\ndef rwh_primes1(n):\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * (n/2)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)\n    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]\n\ndef rwh_primes2(n):\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n \"\"\"\n    correction = (n%6&gt;1)\n    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\n    sieve = [True] * (n/3)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)\n        sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)\n    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]\n\ndef sieve_wheel_30(N):\n    # http://zerovolt.com/?p=88\n    ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30\n\nCopyright 2009 by zerovolt.com\nThis code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.\nIf you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''\n    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\n    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\n    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\n    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\n    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\n    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\n    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\n    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\n    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n\n    wheel = (2, 3, 5)\n    const = 30\n    if N &lt; 2:\n        return []\n    if N &lt;= const:\n        pos = 0\n        while __smallp[pos] &lt;= N:\n            pos += 1\n        return list(__smallp[:pos])\n    # make the offsets list\n    offsets = (7, 11, 13, 17, 19, 23, 29, 1)\n    # prepare the list\n    p = [2, 3, 5]\n    dim = 2 + N // const\n    tk1  = [True] * dim\n    tk7  = [True] * dim\n    tk11 = [True] * dim\n    tk13 = [True] * dim\n    tk17 = [True] * dim\n    tk19 = [True] * dim\n    tk23 = [True] * dim\n    tk29 = [True] * dim\n    tk1[0] = False\n    # help dictionary d\n    # d[a , b] = c  ==&gt; if I want to find the smallest useful multiple of (30*pos)+a\n    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]\n    # in general. If b &lt; a, I need [(30*pos)+a][(30*(pos+1))+b]\n    d = {}\n    for x in offsets:\n        for y in offsets:\n            res = (x*y) % const\n            if res in offsets:\n                d[(x, res)] = y\n    # another help dictionary: gives tkx calling tmptk[x]\n    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}\n    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))\n    # inner functions definition\n    def del_mult(tk, start, step):\n        for k in xrange(start, len(tk), step):\n            tk[k] = False\n    # end of inner functions definition\n    cpos = const * pos\n    while prime &lt; stop:\n        # 30k + 7\n        if tk7[pos]:\n            prime = cpos + 7\n            p.append(prime)\n            lastadded = 7\n            for off in offsets:\n                tmp = d[(7, off)]\n                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 11\n        if tk11[pos]:\n            prime = cpos + 11\n            p.append(prime)\n            lastadded = 11\n            for off in offsets:\n                tmp = d[(11, off)]\n                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 13\n        if tk13[pos]:\n            prime = cpos + 13\n            p.append(prime)\n            lastadded = 13\n            for off in offsets:\n                tmp = d[(13, off)]\n                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 17\n        if tk17[pos]:\n            prime = cpos + 17\n            p.append(prime)\n            lastadded = 17\n            for off in offsets:\n                tmp = d[(17, off)]\n                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 19\n        if tk19[pos]:\n            prime = cpos + 19\n            p.append(prime)\n            lastadded = 19\n            for off in offsets:\n                tmp = d[(19, off)]\n                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 23\n        if tk23[pos]:\n            prime = cpos + 23\n            p.append(prime)\n            lastadded = 23\n            for off in offsets:\n                tmp = d[(23, off)]\n                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 29\n        if tk29[pos]:\n            prime = cpos + 29\n            p.append(prime)\n            lastadded = 29\n            for off in offsets:\n                tmp = d[(29, off)]\n                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # now we go back to top tk1, so we need to increase pos by 1\n        pos += 1\n        cpos = const * pos\n        # 30k + 1\n        if tk1[pos]:\n            prime = cpos + 1\n            p.append(prime)\n            lastadded = 1\n            for off in offsets:\n                tmp = d[(1, off)]\n                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n    # time to add remaining primes\n    # if lastadded == 1, remove last element and start adding them from tk1\n    # this way we don't need an \"if\" within the last while\n    if lastadded == 1:\n        p.pop()\n    # now complete for every other possible prime\n    while pos &lt; len(tk1):\n        cpos = const * pos\n        if tk1[pos]: p.append(cpos + 1)\n        if tk7[pos]: p.append(cpos + 7)\n        if tk11[pos]: p.append(cpos + 11)\n        if tk13[pos]: p.append(cpos + 13)\n        if tk17[pos]: p.append(cpos + 17)\n        if tk19[pos]: p.append(cpos + 19)\n        if tk23[pos]: p.append(cpos + 23)\n        if tk29[pos]: p.append(cpos + 29)\n        pos += 1\n    # remove exceeding if present\n    pos = len(p) - 1\n    while p[pos] &gt; N:\n        pos -= 1\n    if pos &lt; len(p) - 1:\n        del p[pos+1:]\n    # return p list\n    return p\n\ndef sieveOfEratosthenes(n):\n    \"\"\"sieveOfEratosthenes(n): return the list of the primes &lt; n.\"\"\"\n    # Code from: &lt;dickinsm@gmail.com&gt;, Nov 30 2006\n    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\n    if n &lt;= 2:\n        return []\n    sieve = range(3, n, 2)\n    top = len(sieve)\n    for si in sieve:\n        if si:\n            bottom = (si*si - 3) // 2\n            if bottom &gt;= top:\n                break\n            sieve[bottom::si] = [0] * -((bottom - top) // si)\n    return [2] + [el for el in sieve if el]\n\ndef sieveOfAtkin(end):\n    \"\"\"sieveOfAtkin(end): return a list of all the prime numbers &lt;end\n    using the Sieve of Atkin.\"\"\"\n    # Code by Steve Krenzel, &lt;Sgk284@gmail.com&gt;, improved\n    # Code: http://krenzel.info/?p=83\n    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin\n    assert end &gt; 0\n    lng = ((end-1) // 2)\n    sieve = [False] * (lng + 1)\n\n    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4\n    for xd in xrange(4, 8*x_max + 2, 8):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1\n        if not (n &amp; 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):\n            m = n % 12\n            if m == 1 or m == 5:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3\n    for xd in xrange(3, 6 * x_max + 2, 6):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1\n        if not(n &amp; 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):\n            if n % 12 == 7:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3\n    for x in xrange(1, x_max + 1):\n        x2 += xd\n        xd += 6\n        if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1\n        n, n_diff = ((x*x + x) &lt;&lt; 1) - 1, (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1\n        for d in xrange(n_diff, y_min, -8):\n            if n % 12 == 11:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n += d\n\n    primes = [2, 3]\n    if end &lt;= 3:\n        return primes[:max(0,end-2)]\n\n    for n in xrange(5 &gt;&gt; 1, (int(sqrt(end))+1) &gt;&gt; 1):\n        if sieve[n]:\n            primes.append((n &lt;&lt; 1) + 1)\n            aux = (n &lt;&lt; 1) + 1\n            aux *= aux\n            for k in xrange(aux, end, 2 * aux):\n                sieve[k &gt;&gt; 1] = False\n\n    s  = int(sqrt(end)) + 1\n    if s  % 2 == 0:\n        s += 1\n    primes.extend([i for i in xrange(s, end, 2) if sieve[i &gt;&gt; 1]])\n\n    return primes\n\ndef ambi_sieve_plain(n):\n    s = range(3, n, 2)\n    for m in xrange(3, int(n**0.5)+1, 2): \n        if s[(m-3)/2]: \n            for t in xrange((m*m-3)/2,(n&gt;&gt;1)-1,m):\n                s[t]=0\n    return [2]+[t for t in s if t&gt;0]\n\ndef sundaram3(max_n):\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\n    numbers = range(3, max_n+1, 2)\n    half = (max_n)//2\n    initial = 4\n\n    for step in xrange(3, max_n+1, 2):\n        for i in xrange(initial, half, step):\n            numbers[i-1] = 0\n        initial += 2*(step+1)\n\n        if initial &gt; half:\n            return [2] + filter(None, numbers)\n\n################################################################################\n# Using Numpy:\ndef ambi_sieve(n):\n    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\n    s = np.arange(3, n, 2)\n    for m in xrange(3, int(n ** 0.5)+1, 2): \n        if s[(m-3)/2]: \n            s[(m*m-3)/2::m]=0\n    return np.r_[2, s[s&gt;0]]\n\ndef primesfrom3to(n):\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns a array of primes, p &lt; n \"\"\"\n    assert n&gt;=2\n    sieve = np.ones(n/2, dtype=np.bool)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = False\n    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    \n\ndef primesfrom2to(n):\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n \"\"\"\n    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n        if sieve[i]:\n            k=3*i+1|1\n            sieve[      ((k*k)/3)      ::2*k] = False\n            sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False\n    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]\n\nif __name__=='__main__':\n    import itertools\n    import sys\n\n    def test(f1,f2,num):\n        print('Testing {f1} and {f2} return same results'.format(\n            f1=f1.func_name,\n            f2=f2.func_name))\n        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):\n            sys.exit(\"Error: %s(%s) != %s(%s)\"%(f1.func_name,num,f2.func_name,num))\n\n    n=1000000\n    test(sieveOfAtkin,sieveOfEratosthenes,n)\n    test(sieveOfAtkin,ambi_sieve,n)\n    test(sieveOfAtkin,ambi_sieve_plain,n) \n    test(sieveOfAtkin,sundaram3,n)\n    test(sieveOfAtkin,sieve_wheel_30,n)\n    test(sieveOfAtkin,primesfrom3to,n)\n    test(sieveOfAtkin,primesfrom2to,n)\n    test(sieveOfAtkin,rwh_primes,n)\n    test(sieveOfAtkin,rwh_primes1,n)         \n    test(sieveOfAtkin,rwh_primes2,n)\n</code></pre>\n\n<p>Running the script tests that all implementations give the same result.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Related question(dealing with primes generators &amp; including benchmarks):<br>\n<a href=\"http://stackoverflow.com/questions/2897297/speed-up-bitstring-bit-operations-in-python\">Speed up bitstring/bit operations in Python?</a>  </p>\n\n<p>Faster &amp; more memory-wise pure Python code:</p>\n\n<pre><code>def primes(n):\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * n\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)\n    return [2] + [i for i in xrange(3,n,2) if sieve[i]]\n</code></pre>\n\n<p>or starting with half sieve</p>\n\n<pre><code>def primes1(n):\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * (n/2)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)\n    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]\n</code></pre>\n\n<p>Faster &amp; more memory-wise numpy code:</p>\n\n<pre><code>import numpy\ndef primesfrom3to(n):\n    \"\"\" Returns a array of primes, 3 &lt;= p &lt; n \"\"\"\n    sieve = numpy.ones(n/2, dtype=numpy.bool)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = False\n    return 2*numpy.nonzero(sieve)[0][1::]+1\n</code></pre>\n\n<p>a faster variation starting with a third of a sieve:</p>\n\n<pre><code>import numpy\ndef primesfrom2to(n):\n    \"\"\" Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n \"\"\"\n    sieve = numpy.ones(n/3 + (n%6==2), dtype=numpy.bool)\n    for i in xrange(1,int(n**0.5)/3+1):\n        if sieve[i]:\n            k=3*i+1|1\n            sieve[       k*k/3     ::2*k] = False\n            sieve[k*(k-2*(i&amp;1)+4)/3::2*k] = False\n    return numpy.r_[2,3,((3*numpy.nonzero(sieve)[0][1:]+1)|1)]\n</code></pre>\n\n<p>A (hard-to-code) pure-python version of the above code would be:</p>\n\n<pre><code>def primes2(n):\n    \"\"\" Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6&gt;1)\n    sieve = [True] * (n/3)\n    for i in xrange(1,int(n**0.5)/3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k/3      ::2*k] = [False] * ((n/6-k*k/6-1)/k+1)\n        sieve[k*(k-2*(i&amp;1)+4)/3::2*k] = [False] * ((n/6-k*(k-2*(i&amp;1)+4)/6-1)/k+1)\n    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]\n</code></pre>\n\n<p>Unfortunately pure-python don't adopt the simpler and faster numpy way of doing Assignment, and calling len() inside the loop as in [False]*len(sieve[((k*k)/3)::2*k]) is too slow. So i had to improvise to correct input (&amp; avoid more math) and do some extreme (&amp; painful) math-magic.<br>\n  Personally i think it is a shame that numpy (which is so widely used) is not part of python standard library(2 years after python 3 release &amp; no numpy compatibility), and that the improvements in syntax and speed seem to be completely overlooked by python developers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's a pretty neat sample from the Python Cookbook <a href=\"http://oreilly.com/pub/a/python/excerpt/pythonckbk_chap1/index1.html?page=last\" rel=\"nofollow\">here</a> -- the fastest version proposed on that URL is:</p>\n\n<pre><code>import itertools\ndef erat2( ):\n    D = {  }\n    yield 2\n    for q in itertools.islice(itertools.count(3), 0, None, 2):\n        p = D.pop(q, None)\n        if p is None:\n            D[q*q] = q\n            yield q\n        else:\n            x = p + q\n            while x in D or not (x&amp;1):\n                x += p\n            D[x] = p\n</code></pre>\n\n<p>so that would give</p>\n\n<pre><code>def get_primes_erat(n):\n  return list(itertools.takewhile(lambda p: p&lt;n, erat2()))\n</code></pre>\n\n<p>Measuring at the shell prompt (as I prefer to do) with this code in pri.py, I observe:</p>\n\n<pre><code>$ python2.5 -mtimeit -s'import pri' 'pri.get_primes(1000000)'\n10 loops, best of 3: 1.69 sec per loop\n$ python2.5 -mtimeit -s'import pri' 'pri.get_primes_erat(1000000)'\n10 loops, best of 3: 673 msec per loop\n</code></pre>\n\n<p>so it looks like the Cookbook solution is over twice as fast.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using <a href=\"http://plus.maths.org/issue50/features/havil/index.html\">Sundaram's Sieve</a>, I think I broke pure-Python's record:</p>\n\n<pre><code>def sundaram3(max_n):\n    numbers = range(3, max_n+1, 2)\n    half = (max_n)//2\n    initial = 4\n\n    for step in xrange(3, max_n+1, 2):\n        for i in xrange(initial, half, step):\n            numbers[i-1] = 0\n        initial += 2*(step+1)\n\n        if initial &gt; half:\n            return [2] + filter(None, numbers)\n</code></pre>\n\n<p>Comparasion:</p>\n\n<pre><code>C:\\USERS&gt;python -m timeit -n10 -s \"import get_primes\" \"get_primes.get_primes_erat(1000000)\"\n10 loops, best of 3: 710 msec per loop\n\nC:\\USERS&gt;python -m timeit -n10 -s \"import get_primes\" \"get_primes.daniel_sieve_2(1000000)\"\n10 loops, best of 3: 435 msec per loop\n\nC:\\USERS&gt;python -m timeit -n10 -s \"import get_primes\" \"get_primes.sundaram3(1000000)\"\n10 loops, best of 3: 327 msec per loop\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The algorithm is fast, but it has a serious flaw:</p>\n\n<pre><code>&gt;&gt;&gt; sorted(get_primes(530))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\n79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\n167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\n257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\n353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\n449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 527, 529]\n&gt;&gt;&gt; 17*31\n527\n&gt;&gt;&gt; 23*23\n529\n</code></pre>\n\n<p>You assume that <code>numbers.pop()</code> would return the smallest number in the set, but this is not guaranteed at all. Sets are unordered and <code>pop()</code> removes and returns an <a href=\"http://docs.python.org/library/stdtypes.html#set.pop\"><strong>arbitrary</strong></a> element, so it cannot be used to select the next prime from the remaining numbers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For <strong>truly</strong> fastest solution with sufficiently large N would be to download a <a href=\"http://primes.utm.edu/lists/small/millions/\">pre-calculated list of primes</a>, store it as a tuple and do something like:</p>\n\n<pre><code>for pos,i in enumerate(primes):\n    if i &gt; N:\n        print primes[:pos]\n</code></pre>\n\n<p>If <code>N &gt; primes[-1]</code> <em>only</em> then calculate more primes and save the new list in your code, so next time it is equally as fast.</p>\n\n<p><em>Always think outside the box.</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you have control over N, the very fastest way to list all primes is to precompute them. Seriously. Precomputing is a way overlooked optimization.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For the fastest code, the numpy solution is the best. For purely academic reasons, though, I'm posting my pure python version, which is a bit less than 50% faster than the cookbook version posted above. Since I make the entire list in memory, you need enough space to hold everything, but it seems to scale fairly well.</p>\n\n<pre><code>def daniel_sieve_2(maxNumber):\n    \"\"\"\n    Given a number, returns all numbers less than or equal to\n    that number which are prime.\n    \"\"\"\n    allNumbers = range(3, maxNumber+1, 2)\n    for mIndex, number in enumerate(xrange(3, maxNumber+1, 2)):\n        if allNumbers[mIndex] == 0:\n            continue\n        # now set all multiples to 0\n        for index in xrange(mIndex+number, (maxNumber-3)/2+1, number):\n            allNumbers[index] = 0\n    return [2] + filter(lambda n: n!=0, allNumbers)\n</code></pre>\n\n<p>And the results:</p>\n\n<pre><code>&gt;&gt;&gt;mine = timeit.Timer(\"daniel_sieve_2(1000000)\",\n...                    \"from sieves import daniel_sieve_2\")\n&gt;&gt;&gt;prev = timeit.Timer(\"get_primes_erat(1000000)\",\n...                    \"from sieves import get_primes_erat\")\n&gt;&gt;&gt;print \"Mine: {0:0.4f} ms\".format(min(mine.repeat(3, 1))*1000)\nMine: 428.9446 ms\n&gt;&gt;&gt;print \"Previous Best {0:0.4f} ms\".format(min(prev.repeat(3, 1))*1000)\nPrevious Best 621.3581 ms\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A deterministic implementation of Miller-Rabin's Primality test on the assumption that N &lt; 9,080,191</p>\n\n<pre><code>import sys\nimport random\n\ndef miller_rabin_pass(a, n):\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d &gt;&gt;= 1\n        s += 1\n\n    a_to_power = pow(a, d, n)\n    if a_to_power == 1:\n        return True\n    for i in xrange(s-1):\n        if a_to_power == n - 1:\n            return True\n        a_to_power = (a_to_power * a_to_power) % n\n    return a_to_power == n - 1\n\n\ndef miller_rabin(n):\n    for a in [2, 3, 37, 73]:\n      if not miller_rabin_pass(a, n):\n        return False\n    return True\n\n\nn = int(sys.argv[1])\nprimes = [2]\nfor p in range(3,n,2):\n  if miller_rabin(p):\n    primes.append(p)\nprint len(primes)\n</code></pre>\n\n<p>According to the article on Wikipedia (http://en.wikipedia.org/wiki/Miller\u2013Rabin_primality_test) testing N &lt; 9,080,191 for a = 2,3,37, and 73 is enough to decide whether N is composite or not.</p>\n\n<p>And I adapted the source code from the probabilistic implementation of original Miller-Rabin's test found here: <a href=\"http://en.literateprograms.org/Miller-Rabin_primality_test_(Python\" rel=\"nofollow\">http://en.literateprograms.org/Miller-Rabin_primality_test_(Python</a>)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's the code I normally use to generate primes in Python:</p>\n\n<pre><code>$ python -mtimeit -s'import sieve' 'sieve.sieve(1000000)' \n10 loops, best of 3: 445 msec per loop\n$ cat sieve.py\nfrom math import sqrt\n\ndef sieve(size):\n prime=[True]*size\n rng=xrange\n limit=int(sqrt(size))\n\n for i in rng(3,limit+1,+2):\n  if prime[i]:\n   prime[i*i::+i]=[False]*len(prime[i*i::+i])\n\n return [2]+[i for i in rng(3,size,+2) if prime[i]]\n\nif __name__=='__main__':\n print sieve(100)\n</code></pre>\n\n<p>It can't compete with the faster solutions posted here, but at least it is pure python.</p>\n\n<p>Thanks for posting this question. I really learnt a lot today. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A slightly different implementation of a half sieve using Numpy:</p>\n\n<p><a href=\"http://rebrained.com/?p=458\" rel=\"nofollow\">http://rebrained.com/?p=458</a></p>\n\n<pre>\nimport math\nimport numpy\ndef prime6(upto):\n    primes=numpy.arange(3,upto+1,2)\n    isprime=numpy.ones((upto-1)/2,dtype=bool)\n    for factor in primes[:int(math.sqrt(upto))]:\n        if isprime[(factor-2)/2]: isprime[(factor*3-2)/2:(upto-1)/2:factor]=0\n    return numpy.insert(primes[isprime],0,2)\n</pre>\n\n<p>Can someone compare this with the other timings?  On my machine it seems pretty comparable to the other Numpy half-sieve.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>First time using python, so some of the methods I use in this might seem a bit cumbersome. I just straight converted my c++ code to python and this is what I have (albeit a tad bit slowww in python)</p>\n\n<pre><code>#!/usr/bin/env python\nimport time\n\ndef GetPrimes(n):\n\n    Sieve = [1 for x in xrange(n)]\n\n    Done = False\n    w = 3\n\n    while not Done:\n\n        for q in xrange (3, n, 2):\n            Prod = w*q\n            if Prod &lt; n:\n                Sieve[Prod] = 0\n            else:\n                break\n\n        if w &gt; (n/2):\n            Done = True\n        w += 2\n\n    return Sieve\n\n\n\nstart = time.clock()\n\nd = 10000000\nPrimes = GetPrimes(d)\n\ncount = 1 #This is for 2\n\nfor x in xrange (3, d, 2):\n    if Primes[x]:\n        count+=1\n\nelapsed = (time.clock() - start)\nprint \"\\nFound\", count, \"primes in\", elapsed, \"seconds!\\n\"\n</code></pre>\n\n<blockquote>\n  <p>pythonw Primes.py</p>\n  \n  <p>Found 664579 primes in 12.799119 seconds!</p>\n</blockquote>\n\n<pre><code>#!/usr/bin/env python\nimport time\n\ndef GetPrimes2(n):\n\n    Sieve = [1 for x in xrange(n)]\n\n    for q in xrange (3, n, 2):\n        k = q\n        for y in xrange(k*3, n, k*2):\n            Sieve[y] = 0\n\n    return Sieve\n\n\n\nstart = time.clock()\n\nd = 10000000\nPrimes = GetPrimes2(d)\n\ncount = 1 #This is for 2\n\nfor x in xrange (3, d, 2):\n    if Primes[x]:\n        count+=1\n\nelapsed = (time.clock() - start)\nprint \"\\nFound\", count, \"primes in\", elapsed, \"seconds!\\n\"\n</code></pre>\n\n<blockquote>\n  <p>pythonw Primes2.py</p>\n  \n  <p>Found 664579 primes in 10.230172 seconds!</p>\n</blockquote>\n\n<pre><code>#!/usr/bin/env python\nimport time\n\ndef GetPrimes3(n):\n\n    Sieve = [1 for x in xrange(n)]\n\n    for q in xrange (3, n, 2):\n        k = q\n        for y in xrange(k*k, n, k &lt;&lt; 1):\n            Sieve[y] = 0\n\n    return Sieve\n\n\n\nstart = time.clock()\n\nd = 10000000\nPrimes = GetPrimes3(d)\n\ncount = 1 #This is for 2\n\nfor x in xrange (3, d, 2):\n    if Primes[x]:\n        count+=1\n\nelapsed = (time.clock() - start)\nprint \"\\nFound\", count, \"primes in\", elapsed, \"seconds!\\n\"\n</code></pre>\n\n<blockquote>\n  <p>python Primes2.py</p>\n  \n  <p>Found 664579 primes in 7.113776 seconds!</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know the competition is closed for some years. \u2026</p>\n\n<p>Nonetheless this is my suggestion for a pure python prime sieve, based on omitting the multiples of 2, 3 and 5 by using appropriate steps while processing the sieve forward. Nonetheless it is actually slower for N&lt;10^9 than @Robert William Hanks superior solutions rwh_primes2 and rwh_primes1. By using a ctypes.c_ushort sieve array above 1.5* 10^8 it is somehow adaptive to memory limits.</p>\n\n<p>10^6</p>\n\n<p>$ python -mtimeit -s\"import primeSieveSpeedComp\" \"primeSieveSpeedComp.primeSieveSeq(1000000)\"\n10 loops, best of 3: 46.7 msec per loop</p>\n\n<blockquote>\n  <p>to compare:$ python -mtimeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes1(1000000)\" 10 loops, best of 3: 43.2\n  msec per loop\n  to compare: $ python -m timeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes2(1000000)\" 10 loops, best of 3: 34.5\n  msec per loop</p>\n</blockquote>\n\n<p>10^7</p>\n\n<p>$ python -mtimeit -s\"import primeSieveSpeedComp\" \"primeSieveSpeedComp.primeSieveSeq(10000000)\"\n10 loops, best of 3: 530 msec per loop</p>\n\n<blockquote>\n  <p>to compare:$ python -mtimeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes1(10000000)\" 10 loops, best of 3: 494\n  msec per loop\n  to compare: $ python -m timeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes2(10000000)\" 10 loops, best of 3: 375\n  msec per loop</p>\n</blockquote>\n\n<p>10^8</p>\n\n<p>$ python -mtimeit -s\"import primeSieveSpeedComp\" \"primeSieveSpeedComp.primeSieveSeq(100000000)\"\n10 loops, best of 3: 5.55 sec per loop</p>\n\n<blockquote>\n  <p>to compare: $ python -mtimeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes1(100000000)\" 10 loops, best of 3: 5.33\n  sec per loop\n  to compare: $ python -m timeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes2(100000000)\" 10 loops, best of 3: 3.95\n  sec per loop</p>\n</blockquote>\n\n<p>10^9</p>\n\n<p>$ python -mtimeit -s\"import primeSieveSpeedComp\" \"primeSieveSpeedComp.primeSieveSeq(1000000000)\"\n10 loops, best of 3: <strong>61.2</strong> sec per loop</p>\n\n<blockquote>\n  <p>to compare: $ python -mtimeit -n 3 -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes1(1000000000)\" 3 loops, best of 3: <strong>97.8</strong>\n  sec per loop</p>\n  \n  <p>to compare: $ python -m timeit -s\"import primeSieveSpeedComp\"\n  \"primeSieveSpeedComp.rwh_primes2(1000000000)\" 10 loops, best of 3:\n  41.9 sec per loop</p>\n</blockquote>\n\n<p>You may copy the code below into ubuntus primeSieveSpeedComp to review this tests.</p>\n\n<pre><code>def primeSieveSeq(MAX_Int):\n    if MAX_Int &gt; 5*10**8:\n        import ctypes\n        int16Array = ctypes.c_ushort * (MAX_Int &gt;&gt; 1)\n        sieve = int16Array()\n        #print 'uses ctypes \"unsigned short int Array\"'\n    else:\n        sieve = (MAX_Int &gt;&gt; 1) * [False]\n        #print 'uses python list() of long long int'\n    if MAX_Int &lt; 10**8:\n        sieve[4::3] = [True]*((MAX_Int - 8)/6+1)\n        sieve[12::5] = [True]*((MAX_Int - 24)/10+1)\n    r = [2, 3, 5]\n    n = 0\n    for i in xrange(int(MAX_Int**0.5)/30+1):\n        n += 3\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 2\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 1\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 2\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 1\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 2\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 3\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n        n += 1\n        if not sieve[n]:\n            n2 = (n &lt;&lt; 1) + 1\n            r.append(n2)\n            n2q = (n2**2) &gt;&gt; 1\n            sieve[n2q::n2] = [True]*(((MAX_Int &gt;&gt; 1) - n2q - 1) / n2 + 1)\n    if MAX_Int &lt; 10**8:\n        return [2, 3, 5]+[(p &lt;&lt; 1) + 1 for p in [n for n in xrange(3, MAX_Int &gt;&gt; 1) if not sieve[n]]]\n    n = n &gt;&gt; 1\n    try:\n        for i in xrange((MAX_Int-2*n)/30 + 1):\n            n += 3\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 2\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 1\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 2\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 1\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 2\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 3\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n            n += 1\n            if not sieve[n]:\n                r.append((n &lt;&lt; 1) + 1)\n    except:\n        pass\n    return r\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's instructive to write your own prime finding code, but it's also useful to have a fast reliable library at hand. I wrote a wrapper around the <a href=\"http://primesieve.org/\" rel=\"nofollow\">C++ library primesieve</a>, named it <a href=\"https://github.com/hickford/primesieve-python\" rel=\"nofollow\">primesieve-python</a></p>\n\n<p>Try it <code>pip install primesieve</code></p>\n\n<pre><code>import primesieve\nprimes = primesieve.generate_primes(10**8)\n</code></pre>\n\n<p>I'd be curious to see the speed compared.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In general if you need fast number computation python is not the best choice. Today there are a lot of faster (and complex) algorithm. For example on my computer I got 2.2 second for your code, with Mathematica I got 0.088005.</p>\n\n<p>First of all: do you need set?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The easiest optimization to implement is that if you want to check whether n is prime, you only have to check to see if n is divisible by a number up to square_root(n).\nIs this for Project Euler?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sorry to bother but erat2() has a serious flaw in the algorithm.</p>\n\n<p>While searching for the next composite, we need to test odd numbers only.\nq,p both are odd; then q+p is even and doesn't need to be tested, but q+2*p is always odd. This eliminates the \"if even\" test in the while loop condition and saves about 30% of the runtime.</p>\n\n<p>While we're at it: instead of the elegant 'D.pop(q,None)' get and delete method use 'if q in D: p=D[q],del D[q]' which is twice as fast! At least on my machine (P3-1Ghz).\nSo I suggest this implementation of this clever algorithm:</p>\n\n<pre><code>def erat3( ):\n    from itertools import islice, count\n\n    # q is the running integer that's checked for primeness.\n    # yield 2 and no other even number thereafter\n    yield 2\n    D = {}\n    # no need to mark D[4] as we will test odd numbers only\n    for q in islice(count(3),0,None,2):\n        if q in D:                  #  is composite\n            p = D[q]\n            del D[q]\n            # q is composite. p=D[q] is the first prime that\n            # divides it. Since we've reached q, we no longer\n            # need it in the map, but we'll mark the next\n            # multiple of its witnesses to prepare for larger\n            # numbers.\n            x = q + p+p        # next odd(!) multiple\n            while x in D:      # skip composites\n                x += p+p\n            D[x] = p\n        else:                  # is prime\n            # q is a new prime.\n            # Yield it and mark its first multiple that isn't\n            # already marked in previous iterations.\n            D[q*q] = q\n            yield q\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The fastest method I've tried so far is based on the <a href=\"http://oreilly.com/pub/a/python/excerpt/pythonckbk_chap1/index1.html?page=last\" rel=\"nofollow\">Python cookbook <code>erat2</code></a> function:</p>\n\n<pre><code>import itertools as it\ndef erat2a( ):\n    D = {  }\n    yield 2\n    for q in it.islice(it.count(3), 0, None, 2):\n        p = D.pop(q, None)\n        if p is None:\n            D[q*q] = q\n            yield q\n        else:\n            x = q + 2*p\n            while x in D:\n                x += 2*p\n            D[x] = p\n</code></pre>\n\n<p>See <a href=\"http://stackoverflow.com/questions/2211990/how-to-implement-an-efficient-infinite-generator-of-prime-numbers-in-python/3796442#3796442\">this</a> answer for an explanation of the speeding-up.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I may be late to the party but will have to add my own code for this. It uses approximately n/2 in space because we don't need to store even numbers and I also make use of the bitarray python module, further draStically cutting down on memory consumption and enabling computing all primes up to 1,000,000,000</p>\n\n<pre><code>from bitarray import bitarray\ndef primes_to(n):\n    size = n//2\n    sieve = bitarray(size)\n    sieve.setall(1)\n    limit = int(n**0.5)\n    for i in range(1,limit):\n        if sieve[i]:\n            val = 2*i+1\n            sieve[(i+i*val)::val] = 0\n    return [2] + [2*i+1 for i, v in enumerate(sieve) if v and i &gt; 0]\n\npython -m timeit -n10 -s \"import euler\" \"euler.primes_to(1000000000)\"\n10 loops, best of 3: 46.5 sec per loop\n</code></pre>\n\n<p>This was run on a 64bit 2.4GHZ MAC OSX 10.8.3</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I collected several prime number sieves over time. The fastest on my computer is this:</p>\n\n<pre><code>from time import time\n# 175 ms for all the primes up to the value 10**6\ndef primes_sieve(limit):\n    a = [True] * limit\n    a[0] = a[1] = False\n    #a[2] = True\n    for n in xrange(4, limit, 2):\n        a[n] = False\n    root_limit = int(limit**.5)+1\n    for i in xrange(3,root_limit):\n        if a[i]:\n            for n in xrange(i*i, limit, 2*i):\n                a[n] = False\n    return a\n\nLIMIT = 10**6\ns=time()\nprimes = primes_sieve(LIMIT)\nprint time()-s\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm slow responding to this question but it seemed like a fun exercise. I'm using numpy which might be cheating and I doubt this method is the fastest but it should be clear. It sieves a Boolean array referring to its indices only and elicits prime numbers from the indices of all True values. No modulo needed.</p>\n\n<pre><code>import numpy as np\ndef ajs_primes3a(upto):\n    mat = np.ones((upto), dtype=bool)\n    mat[0] = False\n    mat[1] = False\n    mat[4::2] = False\n    for idx in range(3, int(upto ** 0.5)+1, 2):\n        mat[idx*2::idx] = False\n    return np.where(mat == True)[0]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you don't want to reinvent the wheel, you can install the symbolic maths library <a href=\"http://www.sympy.org/en/index.html\" rel=\"nofollow\">sympy</a> (yes it's Python 3 compatible)</p>\n\n<pre><code>pip install sympy\n</code></pre>\n\n<p>And use the <a href=\"http://docs.sympy.org/dev/modules/ntheory.html#sympy.ntheory.generate.Sieve.primerange\" rel=\"nofollow\">primerange</a> function</p>\n\n<pre><code>from sympy import sieve\nprimes = list(sieve.primerange(1, 10**6))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you accept itertools but not numpy, here is an adaptation of rwh_primes2 for Python 3 that runs about twice as fast on my machine.  The only substantial change is using a bytearray instead of a list for the boolean, and using compress instead of a list comprehension to build the final list.  (I'd add this as a comment like moarningsun if I were able.)</p>\n\n<pre><code>import itertools\nizip = itertools.zip_longest\nchain = itertools.chain.from_iterable\ncompress = itertools.compress\ndef rwh_primes2_python3(n):\n    \"\"\" Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n \"\"\"\n    zero = bytearray([False])\n    size = n//3 + (n % 6 == 2)\n    sieve = bytearray([True]) * size\n    sieve[:1] = False\n    for i in range(int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        start = (k*k+4*k-2*k*(i&amp;1))//3\n        sieve[(k*k)//3::2*k]=zero*((size - (k*k)//3 - 1) // (2 * k) + 1)\n        sieve[  start ::2*k]=zero*((size -   start  - 1) // (2 * k) + 1)\n    ans = [2,3]\n    poss = chain(izip(*[range(i, n, 6) for i in (1,5)]))\n    ans.extend(compress(poss, sieve))\n    return ans\n</code></pre>\n\n<p>Comparisons:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit('primes.rwh_primes2(10**6)', setup='import primes', number=1)\n0.0652179726976101\n&gt;&gt;&gt; timeit.timeit('primes.rwh_primes2_python3(10**6)', setup='import primes', number=1)\n0.03267321276325674\n</code></pre>\n\n<p>and</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit('primes.rwh_primes2(10**8)', setup='import primes', number=1)\n6.394284538007014\n&gt;&gt;&gt; timeit.timeit('primes.rwh_primes2_python3(10**8)', setup='import primes', number=1)\n3.833829450302801\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My guess is that the <em>fastest</em> of all ways is to hard code the primes in your code.</p>\n\n<p>So why not just write a slow script that generates another source file that has all numbers hardwired in it, and then import that source file when you run your actual program.</p>\n\n<p>Of course, this works only if you know the upper bound of N at compile time, but thus is the case for (almost) all project Euler problems. </p>\n\n<p>\u00a0</p>\n\n<p><strong>PS:</strong> <em>I might be wrong though iff parsing the source with hard-wired primes is slower than computing them in the first place, but as far I know Python runs from compiled <code>.pyc</code> files so reading a binary array with all primes up to N should be bloody fast in that case.</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is an elegant and simpler solution to find primes using a stored list. Starts with a 4 variables, you only have to test odd primes for divisors, and you only have to test up to a half of what number you are testing as a prime (no point in testing whether 9, 11, 13 divide into 17). It tests previously stored primes as divisors.`</p>\n\n<pre><code>    # Program to calculate Primes\n primes = [1,3,5,7]\nfor n in range(9,100000,2):\n    for x in range(1,(len(primes)/2)):\n        if n % primes[x] == 0:\n            break\n    else:\n        primes.append(n)\nprint primes\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is the way you can compare with others.</p>\n\n<pre><code># You have to list primes upto n\nnums = xrange(2, n)\nfor i in range(2, 10):\n    nums = filter(lambda s: s==i or s%i, nums)\nprint nums\n</code></pre>\n\n<p>So simple...</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Enums have been added to Python 3.4 as described in <a href=\"http://www.python.org/dev/peps/pep-0435/\">PEP 435</a>.  It has also been <a href=\"https://pypi.python.org/pypi/enum34\">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.<br>\nTo use backports, do <code>$ pip install enum34</code>, installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>\n\n<pre><code>from enum import Enum\nAnimal = Enum('Animal', 'ant bee cat dog')\n</code></pre>\n\n<p>or equivalently:</p>\n\n<pre><code>class Animals(Enum):\n    ant = 1\n    bee = 2\n    cat = 3\n    dog = 4\n</code></pre>\n\n<hr>\n\n<p>In earlier versions, one way of accomplishing enums is:</p>\n\n<pre><code>def enum(**enums):\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>which is used like so:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')\n&gt;&gt;&gt; Numbers.ONE\n1\n&gt;&gt;&gt; Numbers.TWO\n2\n&gt;&gt;&gt; Numbers.THREE\n'three'\n</code></pre>\n\n<p>You can also easily support automatic enumeration with something like this:</p>\n\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>and used like so:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')\n&gt;&gt;&gt; Numbers.ZERO\n0\n&gt;&gt;&gt; Numbers.ONE\n1\n</code></pre>\n\n<p>Support for converting the values back to names can be added this way:</p>\n\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    reverse = dict((value, key) for key, value in enums.iteritems())\n    enums['reverse_mapping'] = reverse\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>This overwrites anything with that name, but it is useful for rendering your enums in output.  It will throw KeyError if the reverse mapping doesn't exist.  With the first example:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']\n'THREE'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Before PEP 435, Python didn't have an equivalent but you could implement your own.</p>\n\n<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>\n\n<pre><code>class Animal:\n    DOG = 1\n    CAT = 2\n\nx = Animal.DOG\n</code></pre>\n\n<hr>\n\n<p>In Python 3.4 (<a href=\"http://www.python.org/dev/peps/pep-0435/\">PEP 435</a>), you can make Enum the base class.  This gets you a little bit of extra functionality, described in the PEP.  For example, enum values are distinct from integers.</p>\n\n<pre><code>class Animal(Enum):\n    DOG = 1\n    CAT = 2\n\nprint(Animal.DOG)\n&lt;Animal.DOG: 1&gt;\n</code></pre>\n\n<hr>\n\n<p>If you don't want to type the values, use the following shortcut:</p>\n\n<pre><code>class Animal(Enum):\n    DOG, CAT = range(2)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is what I use:</p>\n\n<pre><code>class Enum(set):\n    def __getattr__(self, name):\n        if name in self:\n            return name\n        raise AttributeError\n</code></pre>\n\n<p>Here is its implementation:</p>\n\n<pre><code>Animals = Enum([\"DOG\", \"CAT\", \"HORSE\"])\n\nprint(Animals.DOG)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you need the numeric values, here's the quickest way:</p>\n\n<pre><code>dog, cat, rabbit = range(3)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The best solution for you would depend on what you require from your <em>fake</em> <strong><code>enum</code></strong>.</p>\n\n<p><strong>Simple enum:</strong></p>\n\n<p>If you need the <strong><code>enum</code></strong> as only a list of <em>names</em> identifying different <em>items</em>, the solution by <strong>Mark Harrison</strong> (above) is great:</p>\n\n<pre><code>Pen, Pencil, Eraser = range(0, 3)\n</code></pre>\n\n<p>Using a <strong><code>range</code></strong> also allows you to set any <em>starting value</em>:</p>\n\n<pre><code>Pen, Pencil, Eraser = range(9, 12)\n</code></pre>\n\n<p>In addition to the above, if you also require that the items belong to a <em>container</em> of some sort, then embed them in a class:</p>\n\n<pre><code>class Stationery:\n    Pen, Pencil, Eraser = range(0, 3)\n</code></pre>\n\n<p>To use the enum item, you would now need to use the container name and the item name:</p>\n\n<pre><code>stype = Stationery.Pen\n</code></pre>\n\n<p><strong>Complex enum:</strong></p>\n\n<p>For long lists of enum or more complicated uses of enum, these solutions will not suffice. You could look to the recipe by Will Ware for <em>Simulating Enumerations in Python</em> published in the <em>Python Cookbook</em>. An online version of that is available <a href=\"http://code.activestate.com/recipes/67107/\">here</a>.</p>\n\n<p><strong>More info:</strong></p>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-0354/\"><em>PEP 354: Enumerations in Python</em></a> has the interesting details of a proposal for enum in Python and why it was rejected.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The typesafe enum pattern which was used in Java pre-JDK 5 has a\nnumber of advantages. Much like in Alexandru's answer, you create a\nclass and class level fields are the enum values; however, the enum\nvalues are instances of the class rather than small integers. This has\nthe advantage that your enum values don't inadvertently compare equal\nto small integers, you can control how they're printed, add arbitrary\nmethods if that's useful and make assertions using isinstance:</p>\n\n<pre><code>class Animal:\n   def __init__(self, name):\n       self.name = name\n\n   def __str__(self):\n       return self.name\n\n   def __repr__(self):\n       return \"&lt;Animal: %s&gt;\" % self\n\nAnimal.DOG = Animal(\"dog\")\nAnimal.CAT = Animal(\"cat\")\n\n&gt;&gt;&gt; x = Animal.DOG\n&gt;&gt;&gt; x\n&lt;Animal: dog&gt;\n&gt;&gt;&gt; x == 1\nFalse\n</code></pre>\n\n<hr>\n\n<p>A recent <a href=\"http://mail.python.org/pipermail/python-dev/2010-November/105873.html\">thread on python-dev</a> pointed out there are a couple of enum libraries in the wild, including:</p>\n\n<ul>\n<li><a href=\"http://packages.python.org/flufl.enum/docs/using.html\">flufl.enum</a></li>\n<li><a href=\"http://pypi.python.org/pypi/lazr.enum\">lazr.enum</a></li>\n<li>... and the imaginatively named <a href=\"http://pypi.python.org/pypi/enum/\">enum</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python doesn't have a built-in equivalent to <code>enum</code>, and other answers have ideas for implementing your own (you may also be interested in the <a href=\"http://code.activestate.com/recipes/67107/\">over the top version</a> in the Python cookbook).</p>\n\n<p>However, in situations where an <code>enum</code> would be called for in C, I usually end up <strong><em>just using simple strings</em></strong>: because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places.</p>\n\n<pre><code>ANIMALS = ['cat', 'dog', 'python']\n\ndef take_for_a_walk(animal):\n    assert animal in ANIMALS\n    ...\n</code></pre>\n\n<p>(One disadvantage compared to using a class is that you lose the benefit of autocomplete)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An Enum class can be a one-liner.</p>\n\n<pre><code>class Enum(tuple): __getattr__ = tuple.index\n</code></pre>\n\n<p>How to use it (forward and reverse lookup, keys, values, items, etc.)</p>\n\n<pre><code>&gt;&gt;&gt; State = Enum(['Unclaimed', 'Claimed'])\n&gt;&gt;&gt; State.Claimed\n1\n&gt;&gt;&gt; State[1]\n'Claimed'\n&gt;&gt;&gt; State\n('Unclaimed', 'Claimed')\n&gt;&gt;&gt; range(len(State))\n[0, 1]\n&gt;&gt;&gt; [(k, State[k]) for k in range(len(State))]\n[(0, 'Unclaimed'), (1, 'Claimed')]\n&gt;&gt;&gt; [(k, getattr(State, k)) for k in State]\n[('Unclaimed', 0), ('Claimed', 1)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>So, I agree. Let's not enforce type safety in Python, but I would like to protect myself from silly mistakes. So what do we think about this?</p>\n\n<pre><code>class Animal(object):\n    values = ['Horse','Dog','Cat']\n\n    class __metaclass__(type):\n        def __getattr__(self, name):\n            return self.values.index(name)\n</code></pre>\n\n<p>It keeps me from value-collision in defining my enums.</p>\n\n<pre><code>&gt;&gt;&gt; Animal.Cat\n2\n</code></pre>\n\n<p>There's another handy advantage: really fast reverse lookups:</p>\n\n<pre><code>def name_of(self, i):\n    return self.values[i]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def M_add_class_attribs(attribs):\n    def foo(name, bases, dict_):\n        for v, k in attribs:\n            dict_[k] = v\n        return type(name, bases, dict_)\n    return foo\n\ndef enum(*names):\n    class Foo(object):\n        __metaclass__ = M_add_class_attribs(enumerate(names))\n        def __setattr__(self, name, value):  # this makes it read-only\n            raise NotImplementedError\n    return Foo()\n</code></pre>\n\n<p>Use it like this:  </p>\n\n<pre><code>Animal = enum('DOG', 'CAT')\nAnimal.DOG # returns 0\nAnimal.CAT # returns 1\nAnimal.DOG = 2 # raises NotImplementedError\n</code></pre>\n\n<p>if you just want unique symbols and don't care about the values, replace this line:  </p>\n\n<pre><code>__metaclass__ = M_add_class_attribs(enumerate(names))\n</code></pre>\n\n<p>with this:</p>\n\n<pre><code>__metaclass__ = M_add_class_attribs((object(), name) for name in names)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I prefer to define enums in Python like so:</p>\n\n<pre><code>class Animal:\n  class Dog: pass\n  class Cat: pass\n\nx = Animal.Dog\n</code></pre>\n\n<p>It's more bug-proof than using integers since you don't have to worry about ensuring that the integers are unique (e.g. if you said Dog = 1 and Cat = 1 you'd be screwed).</p>\n\n<p>It's more bug-proof than using strings since you don't have to worry about typos (e.g.\nx == \"catt\" fails silently, but x == Animal.Catt is a runtime exception).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>On 2013-05-10, Guido agreed to accept <a href=\"http://www.python.org/dev/peps/pep-0435/\">PEP 435</a> into the Python 3.4 standard library. This means that Python finally has builtin support for enumerations!</p>\n\n<p>There is a backport available for Python 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4.  It's on Pypi as <a href=\"https://pypi.python.org/pypi/enum34\">enum34</a>.</p>\n\n<p>Declaration:</p>\n\n<pre><code>&gt;&gt;&gt; from enum import Enum\n&gt;&gt;&gt; class Color(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n</code></pre>\n\n<p>Representation:</p>\n\n<pre><code>&gt;&gt;&gt; print(Color.red)\nColor.red\n&gt;&gt;&gt; print(repr(Color.red))\n&lt;Color.red: 1&gt;\n</code></pre>\n\n<p>Iteration:</p>\n\n<pre><code>&gt;&gt;&gt; for color in Color:\n...   print(color)\n...\nColor.red\nColor.green\nColor.blue\n</code></pre>\n\n<p>Programmatic access:</p>\n\n<pre><code>&gt;&gt;&gt; Color(1)\nColor.red\n&gt;&gt;&gt; Color['blue']\nColor.blue\n</code></pre>\n\n<p>For more information, refer to <a href=\"http://www.python.org/dev/peps/pep-0435/\">the proposal</a>. Official documentation will probably follow soon.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:</p>\n\n<pre><code>months = {\n    'January': 1,\n    'February': 2,\n    ...\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>months = dict(\n    January=1,\n    February=2,\n    ...\n)\n</code></pre>\n\n<p>Then, you can use the symbolic name for the constants like this:</p>\n\n<pre><code>mymonth = months['January']\n</code></pre>\n\n<p>There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a \"symbolic\" (constant string) way to access the \nvalue.</p>\n\n<p>Edit: I like Alexandru's answer too!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another, very simple, implementation of an enum in Python, using <code>namedtuple</code>:</p>\n\n<pre><code>from collections import namedtuple\n\ndef enum(*keys):\n    return namedtuple('Enum', keys)(*keys)\n\nMyEnum = enum('FOO', 'BAR', 'BAZ')\n</code></pre>\n\n<p>or, alternatively,</p>\n\n<pre><code># With sequential number values\ndef enum(*keys):\n    return namedtuple('Enum', keys)(*range(len(keys)))\n\n# From a dict / keyword args\ndef enum(**kwargs):\n    return namedtuple('Enum', kwargs.keys())(*kwargs.values())\n</code></pre>\n\n<p>Like the method above that subclasses <code>set</code>, this allows:</p>\n\n<pre><code>'FOO' in MyEnum\nother = MyEnum.FOO\nassert other == MyEnum.FOO\n</code></pre>\n\n<p>But has more flexibility as it can have different keys and values. This allows</p>\n\n<pre><code>MyEnum.FOO &lt; MyEnum.BAR\n</code></pre>\n\n<p>to act as is expected if you use the version that fills in sequential number values.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What I use:</p>\n\n<pre><code>class Enum(object):\n    def __init__(self, names, separator=None):\n        self.names = names.split(separator)\n        for value, name in enumerate(self.names):\n            setattr(self, name.upper(), value)\n    def tuples(self):\n        return tuple(enumerate(self.names))\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>&gt;&gt;&gt; state = Enum('draft published retracted')\n&gt;&gt;&gt; state.DRAFT\n0\n&gt;&gt;&gt; state.RETRACTED\n2\n&gt;&gt;&gt; state.FOO\nTraceback (most recent call last):\n   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Enum' object has no attribute 'FOO'\n&gt;&gt;&gt; state.tuples()\n((0, 'draft'), (1, 'published'), (2, 'retracted'))\n</code></pre>\n\n<p>So this gives you integer constants like state.PUBLISHED and the two-tuples to use as choices in Django models.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>davidg recommends using dicts.  I'd go one step further and use sets:</p>\n\n<pre><code>months = set('January', 'February', ..., 'December')\n</code></pre>\n\n<p>Now you can test whether a value matches one of the values in the set like this:</p>\n\n<pre><code>if m in months:\n</code></pre>\n\n<p>like dF, though, I usually just use string constants in place of enums.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is the best one I have seen: \"First Class Enums in Python\"</p>\n\n<p><a href=\"http://code.activestate.com/recipes/413486/\">http://code.activestate.com/recipes/413486/</a></p>\n\n<p>It gives you a class, and the class contains all the enums. The enums can be compared to each other, but don't have any particular value; you can't use them as an integer value. (I resisted this at first because I am used to C enums, which are integer values. But if you can't use it as an integer, you can't use it as an integer by mistake so overall I think it is a win.) Each enum is a unique value. You can print enums, you can iterate over them, you can test that an enum value is \"in\" the enum. It's pretty complete and slick.</p>\n\n<p>Edit (cfi): The above link is not Python 3 compatible. Here's my port of enum.py to Python 3:</p>\n\n<pre><code>def cmp(a,b):\n   if a &lt; b: return -1\n   if b &lt; a: return 1\n   return 0\n\n\ndef Enum(*names):\n   ##assert names, \"Empty enums are not supported\" # &lt;- Don't like empty enums? Uncomment!\n\n   class EnumClass(object):\n      __slots__ = names\n      def __iter__(self):        return iter(constants)\n      def __len__(self):         return len(constants)\n      def __getitem__(self, i):  return constants[i]\n      def __repr__(self):        return 'Enum' + str(names)\n      def __str__(self):         return 'enum ' + str(constants)\n\n   class EnumValue(object):\n      __slots__ = ('__value')\n      def __init__(self, value): self.__value = value\n      Value = property(lambda self: self.__value)\n      EnumType = property(lambda self: EnumType)\n      def __hash__(self):        return hash(self.__value)\n      def __cmp__(self, other):\n         # C fans might want to remove the following assertion\n         # to make all enums comparable by ordinal value {;))\n         assert self.EnumType is other.EnumType, \"Only values from the same enum are comparable\"\n         return cmp(self.__value, other.__value)\n      def __lt__(self, other):   return self.__cmp__(other) &lt; 0\n      def __eq__(self, other):   return self.__cmp__(other) == 0\n      def __invert__(self):      return constants[maximum - self.__value]\n      def __nonzero__(self):     return bool(self.__value)\n      def __repr__(self):        return str(names[self.__value])\n\n   maximum = len(names) - 1\n   constants = [None] * len(names)\n   for i, each in enumerate(names):\n      val = EnumValue(i)\n      setattr(EnumClass, each, val)\n      constants[i] = val\n   constants = tuple(constants)\n   EnumType = EnumClass()\n   return EnumType\n\n\nif __name__ == '__main__':\n   print( '\\n*** Enum Demo ***')\n   print( '--- Days of week ---')\n   Days = Enum('Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su')\n   print( Days)\n   print( Days.Mo)\n   print( Days.Fr)\n   print( Days.Mo &lt; Days.Fr)\n   print( list(Days))\n   for each in Days:\n      print( 'Day:', each)\n   print( '--- Yes/No ---')\n   Confirmation = Enum('No', 'Yes')\n   answer = Confirmation.No\n   print( 'Your answer is not', ~answer)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have had occasion to need of an Enum class, for the purpose of decoding a binary file format. The features I happened to want is concise enum definition, the ability to freely create instances of the enum by either integer value or string, and a useful <code>repr</code>esentation.  Here's what I ended up with:</p>\n\n<pre><code>&gt;&gt;&gt; class Enum(int):\n...     def __new__(cls, value):\n...         if isinstance(value, str):\n...             return getattr(cls, value)\n...         elif isinstance(value, int):\n...             return cls.__index[value]\n...     def __str__(self): return self.__name\n...     def __repr__(self): return \"%s.%s\" % (type(self).__name__, self.__name)\n...     class __metaclass__(type):\n...         def __new__(mcls, name, bases, attrs):\n...             attrs['__slots__'] = ['_Enum__name']\n...             cls = type.__new__(mcls, name, bases, attrs)\n...             cls._Enum__index = _index = {}\n...             for base in reversed(bases):\n...                 if hasattr(base, '_Enum__index'):\n...                     _index.update(base._Enum__index)\n...             # create all of the instances of the new class\n...             for attr in attrs.keys():\n...                 value = attrs[attr]\n...                 if isinstance(value, int):\n...                     evalue = int.__new__(cls, value)\n...                     evalue._Enum__name = attr\n...                     _index[value] = evalue\n...                     setattr(cls, attr, evalue)\n...             return cls\n... \n</code></pre>\n\n<p>A whimsical example of using it:</p>\n\n<pre><code>&gt;&gt;&gt; class Citrus(Enum):\n...     Lemon = 1\n...     Lime = 2\n... \n&gt;&gt;&gt; Citrus.Lemon\nCitrus.Lemon\n&gt;&gt;&gt; \n&gt;&gt;&gt; Citrus(1)\nCitrus.Lemon\n&gt;&gt;&gt; Citrus(5)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 6, in __new__\nKeyError: 5\n&gt;&gt;&gt; class Fruit(Citrus):\n...     Apple = 3\n...     Banana = 4\n... \n&gt;&gt;&gt; Fruit.Apple\nFruit.Apple\n&gt;&gt;&gt; Fruit.Lemon\nCitrus.Lemon\n&gt;&gt;&gt; Fruit(1)\nCitrus.Lemon\n&gt;&gt;&gt; Fruit(3)\nFruit.Apple\n&gt;&gt;&gt; \"%d %s %r\" % ((Fruit.Apple,)*3)\n'3 Apple Fruit.Apple'\n&gt;&gt;&gt; Fruit(1) is Citrus.Lemon\nTrue\n</code></pre>\n\n<p>Key features:</p>\n\n<ul>\n<li><code>str()</code>, <code>int()</code> and <code>repr()</code> all produce the most useful output possible, respectively the name of the enumartion, its integer value, and a Python expression that evaluates back to the enumeration.</li>\n<li>Enumerated values returned by the constructor are limited strictly to the predefined values, no accidental enum values.</li>\n<li>Enumerated values are singletons; they can be strictly compared with <code>is</code></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I really like Alec Thomas' solution (http://stackoverflow.com/a/1695250):</p>\n\n<pre><code>def enum(**enums):\n    '''simple constant \"enums\"'''\n    return type('Enum', (object,), enums)\n</code></pre>\n\n<p>It's elegant and clean looking, but it's just a function that creates a class with the specified attributes.</p>\n\n<p>With a little modification to the function, we can get it to act a little more 'enumy':</p>\n\n<blockquote>\n  <p>NOTE: I created the following examples by trying to reproduce the\n  behavior of pygtk's new style 'enums' (like Gtk.MessageType.WARNING)</p>\n</blockquote>\n\n<pre><code>def enum_base(t, **enums):\n    '''enums with a base class'''\n    T = type('Enum', (t,), {})\n    for key,val in enums.items():\n        setattr(T, key, T(val))\n\n    return T\n</code></pre>\n\n<p>This creates an enum based off a specified type. In addition to giving attribute access like the previous function, it behaves as you would expect an Enum to with respect to types.  It also inherits the base class.</p>\n\n<p>For example, integer enums:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum_base(int, ONE=1, TWO=2, THREE=3)\n&gt;&gt;&gt; Numbers.ONE\n1\n&gt;&gt;&gt; x = Numbers.TWO\n&gt;&gt;&gt; 10 + x\n12\n&gt;&gt;&gt; type(Numbers)\n&lt;type 'type'&gt;\n&gt;&gt;&gt; type(Numbers.ONE)\n&lt;class 'Enum'&gt;\n&gt;&gt;&gt; isinstance(x, Numbers)\nTrue\n</code></pre>\n\n<p>Another interesting thing that can be done with this method is customize specific behavior by overriding built-in methods:</p>\n\n<pre><code>def enum_repr(t, **enums):\n    '''enums with a base class and repr() output'''\n    class Enum(t):\n        def __repr__(self):\n            return '&lt;enum {0} of type Enum({1})&gt;'.format(self._name, t.__name__)\n\n    for key,val in enums.items():\n        i = Enum(val)\n        i._name = key\n        setattr(Enum, key, i)\n\n    return Enum\n\n\n\n&gt;&gt;&gt; Numbers = enum_repr(int, ONE=1, TWO=2, THREE=3)\n&gt;&gt;&gt; repr(Numbers.ONE)\n'&lt;enum ONE of type Enum(int)&gt;'\n&gt;&gt;&gt; str(Numbers.ONE)\n'1'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The new standard in Python is <a href=\"http://www.python.org/dev/peps/pep-0435/\" rel=\"nofollow\">PEP 435</a>, so an Enum class will be available in future versions of Python:</p>\n\n<pre><code>&gt;&gt;&gt; from enum import Enum\n</code></pre>\n\n<p>However to begin using it now you can install the <a href=\"http://bazaar.launchpad.net/~barry/flufl.enum/trunk/view/head:/flufl/enum/README.rst\" rel=\"nofollow\">original library</a> that motivated the PEP:</p>\n\n<pre><code>#sudo pip install flufl.enum   //or #sudo easy_install flufl.enum\n</code></pre>\n\n<p>Then you <a href=\"http://pythonhosted.org/flufl.enum/docs/using.html\" rel=\"nofollow\">can use it as per its online guide</a>:</p>\n\n<pre><code>&gt;&gt;&gt; from flufl.enum import Enum\n&gt;&gt;&gt; class Colors(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n&gt;&gt;&gt; for color in Colors: print color\nColors.red\nColors.green\nColors.blue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alexandru's suggestion of using class constants for enums works quite well. </p>\n\n<p>I also like to add a dictionary for each set of constants to lookup a human-readable string representation. </p>\n\n<p>This serves two purposes: a) it provides a simple way to pretty-print your enum and b) the dictionary logically groups the constants so that you can test for membership.</p>\n\n<pre><code>class Animal:    \n  TYPE_DOG = 1\n  TYPE_CAT = 2\n\n  type2str = {\n    TYPE_DOG: \"dog\",\n    TYPE_CAT: \"cat\"\n  }\n\n  def __init__(self, type_):\n    assert type_ in self.type2str.keys()\n    self._type = type_\n\n  def __repr__(self):\n    return \"&lt;%s type=%s&gt;\" % (\n        self.__class__.__name__, self.type2str[self._type].upper())\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The enum package from <a href=\"http://en.wikipedia.org/wiki/Python_Package_Index\" rel=\"nofollow\">PyPI</a> provides a robust implementation of enums. An earlier answer mentioned PEP 354; this was rejected but the proposal was implemented \n<a href=\"http://pypi.python.org/pypi/enum\" rel=\"nofollow\">http://pypi.python.org/pypi/enum</a>.</p>\n\n<p>Usage is easy and elegant:</p>\n\n<pre><code>&gt;&gt;&gt; from enum import Enum\n&gt;&gt;&gt; Colors = Enum('red', 'blue', 'green')\n&gt;&gt;&gt; shirt_color = Colors.green\n&gt;&gt;&gt; shirt_color = Colors[2]\n&gt;&gt;&gt; shirt_color &gt; Colors.red\nTrue\n&gt;&gt;&gt; shirt_color.index\n2\n&gt;&gt;&gt; str(shirt_color)\n'green'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From python 3.4 there will be official support for enums. You can find documentation and examples <a href=\"http://docs.python.org/3.4/library/enum.html\" rel=\"nofollow\">here on python 3.4 docs page</a>.</p>\n\n<blockquote>\n  <p>Enumerations are created using the class syntax, which makes them easy\n  to read and write. An alternative creation method is described in\n  Functional API. To define an enumeration, subclass Enum as follows:</p>\n</blockquote>\n\n<pre><code>from enum import Enum\nclass Color(Enum):\n     red = 1\n     green = 2\n     blue = 3\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, [object() for _ in range(len(sequential))]), **named)\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>If you name it, is your problem, but if not creating objects instead of values allows you to do this:</p>\n\n<pre><code>&gt;&gt;&gt; DOG = enum('BARK', 'WALK', 'SIT')\n&gt;&gt;&gt; CAT = enum('MEOW', 'WALK', 'SIT')\n&gt;&gt;&gt; DOG.WALK == CAT.WALK\nFalse\n</code></pre>\n\n<p>When using other implementations sited here (also when using named instances in my example) you must be sure you never try to compare objects from different enums. For here's a possible pitfall:</p>\n\n<pre><code>&gt;&gt;&gt; DOG = enum('BARK'=1, 'WALK'=2, 'SIT'=3)\n&gt;&gt;&gt; CAT = enum('WALK'=1, 'SIT'=2)\n&gt;&gt;&gt; pet1_state = DOG.BARK\n&gt;&gt;&gt; pet2_state = CAT.WALK\n&gt;&gt;&gt; pet1_state == pet2_state\nTrue\n</code></pre>\n\n<p>Yikes!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This solution is a simple way of getting a class for the enumeration defined as a list (no more annoying integer assignments):</p>\n\n<p>enumeration.py:</p>\n\n<pre><code>import new\n\ndef create(class_name, names):\n    return new.classobj(\n        class_name, (object,), dict((y, x) for x, y in enumerate(names))\n    )\n</code></pre>\n\n<p>example.py:</p>\n\n<pre><code>import enumeration\n\nColors = enumeration.create('Colors', (\n    'red',\n    'orange',\n    'yellow',\n    'green',\n    'blue',\n    'violet',\n))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While the original enum proposal, <a href=\"http://www.python.org/dev/peps/pep-0354/\" rel=\"nofollow\">PEP 354</a>, was rejected years ago, it keeps coming back up. Some kind of enum was intended to be added to 3.2, but it got pushed back to 3.3 and then forgotten. And now there's a <a href=\"http://www.python.org/dev/peps/pep-0435/\" rel=\"nofollow\">PEP 435</a> intended for inclusion in Python 3.4. The reference implementation of PEP 435 is <a href=\"http://pythonhosted.org/flufl.enum/docs/using.html\" rel=\"nofollow\"><code>flufl.enum</code></a>.</p>\n\n<p>As of April 2013, there seems to be a general consensus that <em>something</em> should be added to the standard library in 3.4\u2014as long as people can agree on what that \"something\" should be. That's the hard part. See the threads starting <a href=\"http://mail.python.org/pipermail/python-ideas/2013-January/019003.html\" rel=\"nofollow\">here</a> and <a href=\"http://mail.python.org/pipermail/python-ideas/2013-February/019332.html\" rel=\"nofollow\">here</a>, and a half dozen other threads in the early months of 2013.</p>\n\n<p>Meanwhile, every time this comes up, a slew of new designs and implementations appear on PyPI, ActiveState, etc., so if you don't like the FLUFL design, try a <a href=\"https://pypi.python.org/pypi?%3aaction=search&amp;term=enum&amp;submit=search\" rel=\"nofollow\">PyPI search</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Keep it simple:</p>\n\n<pre><code>class Enum(object): \n    def __init__(self, tupleList):\n            self.tupleList = tupleList\n\n    def __getattr__(self, name):\n            return self.tupleList.index(name)\n</code></pre>\n\n<p>Than:</p>\n\n<pre><code>DIRECTION = Enum(('UP', 'DOWN', 'LEFT', 'RIGHT'))\nDIRECTION.DOWN\n1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had need of some symbolic constants in pyparsing to represent left and right associativity of binary operators.  I used class constants like this:</p>\n\n<pre><code># an internal class, not intended to be seen by client code\nclass _Constants(object):\n    pass\n\n\n# an enumeration of constants for operator associativity\nopAssoc = _Constants()\nopAssoc.LEFT = object()\nopAssoc.RIGHT = object()\n</code></pre>\n\n<p>Now when client code wants to use these constants, they can import the entire enum using:</p>\n\n<pre><code>import opAssoc from pyparsing\n</code></pre>\n\n<p>The enumerations are unique, they can be tested with 'is' instead of '==', they don't take up a big footprint in my code for a minor concept, and they are easily imported into the client code.  They don't support any fancy str() behavior, but so far that is in the <a href=\"http://c2.com/xp/YouArentGonnaNeedIt.html\" rel=\"nofollow\">YAGNI</a> category.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a variant on <a href=\"http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python/1695250#1695250\">Alec Thomas's solution</a>:</p>\n\n<pre><code>def enum(*args, **kwargs):\n    return type('Enum', (), dict((y, x) for x, y in enumerate(args), **kwargs)) \n\nx = enum('POOH', 'TIGGER', 'EEYORE', 'ROO', 'PIGLET', 'RABBIT', 'OWL')\nassert x.POOH == 0\nassert x.TIGGER == 1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The solution that I usually use is this simple function to get an instance of a dynamically created class.</p>\n\n<pre><code>def enum(names):\n    \"Create a simple enumeration having similarities to C.\"\n    return type('enum', (), dict(map(reversed, enumerate(\n        names.replace(',', ' ').split())), __slots__=()))()\n</code></pre>\n\n<p>Using it is as simple as calling the function with a string having the names that you want to reference.</p>\n\n<pre><code>grade = enum('A B C D F')\nstate = enum('awake, sleeping, dead')\n</code></pre>\n\n<p>The values are just integers, so you can take advantage of that if desired (just like in the C language).</p>\n\n<pre><code>&gt;&gt;&gt; grade.A\n0\n&gt;&gt;&gt; grade.B\n1\n&gt;&gt;&gt; grade.F == 4\nTrue\n&gt;&gt;&gt; state.dead == 2\nTrue\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python doesn't have variable declarations, so it has to figure out the <a href=\"http://docs.python.org/3.3/tutorial/classes.html#python-scopes-and-namespaces\">scope</a> of variables itself.  It does so by a simple rule:  If there is an assignment to a variable inside a function, that variable is considered local.<sup><a href=\"http://docs.python.org/3.3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\">[1]</a></sup>  Thus, the line</p>\n\n<pre><code>counter += 1\n</code></pre>\n\n<p>implicitly makes <code>counter</code> local to <code>increment()</code>.  Trying to execute this line, though, will try to read the value of the local variable <code>counter</code> before it is assigned, resulting in an <a href=\"http://docs.python.org/3.3/library/exceptions.html#UnboundLocalError\"><code>UnboundLocalError</code></a>.<sup><a href=\"http://docs.python.org/3.3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value\">[2]</a></sup></p>\n\n<p>If <code>counter</code> is a global variable, the <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement\"><code>global</code></a> keyword will help.  If <code>increment()</code> is a local function and <code>counter</code> a local variable, you can use <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-nonlocal-statement\"><code>nonlocal</code></a> in Python 3.x.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to use the <a href=\"http://docs.python.org/py3k/reference/simple_stmts.html#the-global-statement\">global statement</a> so that you are modifying the global variable counter, instead of a local variable:</p>\n\n<pre><code>counter = 0\n\ndef increment():\n  global counter\n  counter += 1\n\nincrement()\n</code></pre>\n\n<p>If the enclosing scope that <code>counter</code> is defined in is not the global scope, on Python 3.x you could use the <a href=\"http://docs.python.org/py3k/reference/simple_stmts.html#the-nonlocal-statement\">nonlocal statement</a>.  In the same situation on Python 2.x you would have no way to reassign to the nonlocal name <code>counter</code>, so you would need to make <code>counter</code> mutable and modify it:</p>\n\n<pre><code>counter = [0]\n\ndef increment():\n  counter[0] += 1\n\nincrement()\nprint counter[0]  # prints '1'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To answer the question in your subject line,* yes, there are closures in Python, except they only apply inside a function, and also (in Python 2.x) they are read-only; you can't re-bind the name to a different object (though if the object is mutable, you can modify its contents). In Python 3.x, you can use the <code>nonlocal</code> keyword to modify a closure variable.</p>\n\n<pre><code>def incrementer():\n    counter = 0\n    def increment():\n        nonlocal counter\n        counter += 1\n        return counter\n    return increment\n\nincrement = incrementer()\n\nincrement()   # 1\nincrement()   # 2\n</code></pre>\n\n<p>* The original question's title asked about closures in Python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To modify a global variable inside a function, you must use the global keyword.</p>\n\n<p>When you try to do this without the line</p>\n\n<pre><code>global counter\n</code></pre>\n\n<p>inside of the definition of increment, a local variable named counter is created so as to keep you from mucking up the counter variable that the whole program may depend on.</p>\n\n<p>Note that you only need to use global when you are modifying the variable; you could read counter from within increment without the need for the global statement.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>try this</p>\n\n<pre><code>counter = 0\n\ndef increment():\n  global counter\n  counter += 1\n\nincrement()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The reason of why your code throws an <code>UnboundLocalError</code> is already well explained in other answers.</p>\n\n<p>But it seems to me that you're trying to build something that works like <a href=\"http://docs.python.org/library/itertools.html#itertools.count\" rel=\"nofollow\"><code>itertools.count()</code></a>. </p>\n\n<p>So why don't you try it out, and see if it suits your case:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import count\n&gt;&gt;&gt; counter = count(0)\n&gt;&gt;&gt; counter\ncount(0)\n&gt;&gt;&gt; next(counter)\n0\n&gt;&gt;&gt; counter\ncount(1)\n&gt;&gt;&gt; next(counter)\n1\n&gt;&gt;&gt; counter\ncount(2)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python has lexical scoping by default, which means that although an enclosed scope can access values in its enclosing scope, it cannot modify them (unless they're declared global with the <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement\" rel=\"nofollow\"><code>global</code></a> keyword).</p>\n\n<p>A closure binds values in the <em>enclosing</em> environment to names in the <em>local</em> environment. The local environment can then use the bound value, and even reassign that name to something else, but it can't modify the binding in the enclosing environment.</p>\n\n<p>In your case you are trying to treat <code>counter</code> as a local variable rather than a bound value. Note that this code, which binds the value of <code>x</code> assigned in the enclosing environment, works fine:</p>\n\n<pre><code>&gt;&gt;&gt; x = 1\n\n&gt;&gt;&gt; def f():\n&gt;&gt;&gt;  return x\n\n&gt;&gt;&gt; f()\n1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python is not purely lexically scoped.</p>\n\n<p>See this: <a href=\"http://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them\">Using global variables in a function other than the one that created them</a></p>\n\n<p>and this: <a href=\"http://www.saltycrane.com/blog/2008/01/python-variable-scope-notes/\" rel=\"nofollow\">http://www.saltycrane.com/blog/2008/01/python-variable-scope-notes/</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=236275\">fun stuff</a> can happen. See the <a href=\"https://docs.python.org/2/library/functions.html#super\">standard docs on super</a> if you haven't already.</p>\n\n<p>Note that the syntax changed in Python 3.0: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's been noted that in Python 3.0+ you can use</p>\n\n<p><code>super().__init__()</code> </p>\n\n<p>to make your call, which is concise and does not require you to reference the parent OR class names explicitly, which can be handy. I just want to add that for Python 2.7 or under, you can achieve the same name-insensitive approach by writing <code>self.__class__</code> instead of the class name, i.e.</p>\n\n<p><code>super(self.__class__, self).__init__()</code></p>\n\n<p>This unfortunately does not necessarily work if you want to inherit the constructor from the superclass. For example:</p>\n\n<pre><code>class Polygon(object):\n    def __init__(self, id):\n        self.id = id\n\nclass Rectangle(Polygon):\n    def __init__(self, id, width, height):\n        super(self.__class__, self).__init__(id)\n        self.shape = (width, height)\n\nclass Square(Rectangle):\n    pass\n</code></pre>\n\n<p>Here I have a class <code>Square</code>, which is a sub-class of <code>Rectangle</code>. Say I don't want to write a separate constructor for <code>Square</code> because the constructor for <code>Rectangle</code> is good enough, but for whatever reason I want to implement a Square so I can reimplement some other method.</p>\n\n<p>When I create a <code>Square</code> using <code>mSquare = Square('a', 10,10)</code>, Python calls the constructor for <code>Rectangle</code> because I haven't given <code>Square</code> its own constructor. However, in the constructor for <code>Rectangle</code>, the call <code>super(self.__class__,self)</code> is going to return the superclass of <code>mSquare</code>, so it calls the constructor for <code>Rectangle</code> again. This is how the infinite loop happens, as was mentioned by @S_C. In this case, when I run <code>super(...).__init__()</code> I am calling the constructor for <code>Rectangle</code> but since I give it no arguments, I will get an error.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Super has no side effects</p>\n\n<pre><code>Base = ChildB\n\nBase()\n</code></pre>\n\n<p>works as expected</p>\n\n<pre><code>Base = ChildA\n\nBase()\n</code></pre>\n\n<p>gets into infinite recursion.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just a heads up... with Python 2.7, and I believe ever since <code>super()</code> was introduced in version 2.2, you can only call <a href=\"http://docs.python.org/library/functions.html#super\"><code>super()</code></a> if one of the parents inherit from a class that eventually inherits <code>object</code> (<a href=\"http://docs.python.org/glossary.html#term-new-style-class\">new-style classes</a>).</p>\n\n<p>Personally, as for python 2.7 code, I'm going to continue using <code>BaseClassName.__init__(self, args)</code> until I actually get the advantage of using <code>super()</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There isn't, really. <code>super()</code> looks at the next class in the MRO (method resolution order, accessed with <code>cls.__mro__</code>) to call the methods. Just calling the base <code>__init__</code> calls the base <code>__init__</code>. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with <code>super()</code> (particularly if you get into multiple inheritance later).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>\"<strong>What difference is there actually in this code?:</strong>\"</p>\n</blockquote>\n\n<pre><code>class ChildA(Base):\n    def __init__(self):\n        Base.__init__(self)\n\nclass ChildB(Base):\n    def __init__(self):\n        super(ChildB, self).__init__()\n</code></pre>\n\n<p>The primary difference in this code is that you get a layer of indirection in the <code>__init__</code> with <code>super</code>, which references the parent class.</p>\n\n<p>In <code>ChildA</code>, which doesn't use <code>super</code>, if you want to swap <code>Base</code> for another base, you'll need to change the reference to <code>Base</code> in the <code>__init__</code> as well as any other methods that have this usage. Whereas in <code>ChildB</code> you only need to swap the parent class once e.g.:</p>\n\n<pre><code>class ChildB(DifferentBase):\n    def __init__(self):\n        super(ChildB, self).__init__()\n</code></pre>\n\n<p>This means that the use of <code>super</code> can make your code more maintainable when you have child classes referencing methods of their parents directly, most likely because they have overridden those methods themselves.</p>\n\n<p>Another mostly hidden difference is that <code>super</code> is returning a proxy object to handle the delegated call to <code>__init__</code>, and is passing <code>self</code> as an implied first argument to the <code>__init__</code> call (you may have wondered why it appears to be missing).</p>\n\n<p>This proxy object actually means that users of your code will be able to insert other classes in the method resolution order. </p>\n\n<p>I illustrate this difference in an answer at the <a href=\"http://stackoverflow.com/a/33469090/541136\">canonical question, How to use 'super' in Python?</a>: </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The main difference is that <code>ChildA.__init__</code> will unconditionally call <code>Base.__init__</code> whereas <code>ChildB.__init__</code> will call <code>__init__</code> is <strong>whatever class happens to be <code>ChildB</code> ancestor in <code>self</code>'s line of ancestors</strong>\n(which may differ from what you expect). </p>\n\n<p>If you add a <code>ClassC</code> that uses multiple inheritance: </p>\n\n<pre><code>class Mixin(Base):\n  def __init__(self):\n    print \"Mixin stuff\"\n    super(Mixin, self).__init__()\n\nclass ChildC(ChildB, Mixin):  # Mixin is now between ChildB and Base\n  pass\n\nChildC()\nhelp(ChildC) # shows that the the Method Resolution Order is ChildC-&gt;ChildB-&gt;Mixin-&gt;Base\n</code></pre>\n\n<p>then <strong><code>Base</code> is no longer the parent of <code>ChildB</code></strong> for <code>ChildC</code> instances. Now <code>super(ChildB, self)</code> will point to <code>Mixin</code> if <code>self</code> is a <code>ChildC</code> instance.</p>\n\n<p>You have inserted <code>Mixin</code> in between <code>ChildB</code> and <code>Base</code>. And you can take advantage of it with <code>super()</code></p>\n\n<p>So if you are designed your classes so that they can be used in a Cooperative Multiple Inheritance scenario, you use <code>super</code> because you don't really know who is going to be the ancestor at runtime. </p>\n\n<p>The <a href=\"https://rhettinger.wordpress.com/2011/05/26/super-considered-super/\" rel=\"nofollow\">super considered super post</a> and <a href=\"https://youtu.be/EiOglTERPEo\" rel=\"nofollow\">pycon 2015 accompanying video</a> explain this pretty well.  </p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The nested function looks up variables from the parent scope when executed, not when defined.</p>\n\n<p>The function body is compiled, and the 'free' variables (not defined in the function itself by assignment), are verified, then bound as closure cells to the function, with the code using an index to reference each cell. <code>pet_function</code> thus has <em>one</em> free variable (<code>cage</code>) which is then referenced via a closure cell, index 0. The closure itself points to the local variable <code>cage</code> in the <code>get_petters</code> function.</p>\n\n<p>When you actually call the function, that closure is then used to look at the value of <code>cage</code> in the surrounding scope <em>at the time you call the function</em>. Here lies the problem. By the time you call your functions, the <code>get_petters</code> function is already done computing it's results. The <code>cage</code> local variable at some point during that execution was assigned each of the <code>'cow'</code>, <code>'dog'</code>, and <code>'cat'</code> strings, but at the end of the function, <code>cage</code> contains that last value <code>'cat'</code>. Thus, when you call each of the dynamically returned functions, you get the value <code>'cat'</code> printed.</p>\n\n<p>The work-around is to not rely on closures. You can use a <em>partial function</em> instead, create a <em>new function scope</em>, or bind the variable as a <em>default value for a keyword parameter</em>.</p>\n\n<ul>\n<li><p>Partial function example, using <a href=\"http://docs.python.org/library/functools.html#functools.partial\"><code>functools.partial()</code></a>:</p>\n\n<pre><code>from functools import partial\n\ndef pet_function(cage=None):\n    print \"Mary pets the \" + cage.animal + \".\"\n\nyield (animal, partial(gotimes, partial(pet_function, cage=cage)))\n</code></pre></li>\n<li><p>Creating a new scope example:</p>\n\n<pre><code>def scoped_cage(cage=None):\n    def pet_function():\n        print \"Mary pets the \" + cage.animal + \".\"\n    return pet_function\n\nyield (animal, partial(gotimes, scoped_cage(cage)))\n</code></pre></li>\n<li><p>Binding the variable as a default value for a keyword parameter:</p>\n\n<pre><code>def pet_function(cage=cage):\n    print \"Mary pets the \" + cage.animal + \".\"\n\nyield (animal, partial(gotimes, pet_function))\n</code></pre></li>\n</ul>\n\n<p>There is no need to define the <code>pet_function</code> or <code>scoped_cage</code> function in the loop, compilation only takes place once, not on each iteration of the loop.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My understanding is that cage is looked for in the parent function namespace when the yielded  pet_function is actually called, not before.</p>\n\n<p>So when you do </p>\n\n<pre><code>funs = list(get_petters())\n</code></pre>\n\n<p>You generate 3 functions which will find the lastly created cage.</p>\n\n<p>If you replace your last loop with :</p>\n\n<pre><code>for name, f in get_petters():\n    print name + \":\", \n    f()\n</code></pre>\n\n<p>You will actually get :</p>\n\n<pre><code>cow: Mary pets the cow.\ndog: Mary pets the dog.\ncat: Mary pets the cat.\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This stems from the following</p>\n\n<pre><code>for i in range(2): pass\nprint i is 1\n</code></pre>\n\n<p>after iterating the value of <code>i</code> is lazily stored as its final value.</p>\n\n<p>As a generator the function would work (i.e. printing each value in turn), but <strong>when transforming to a list it runs over the generator</strong>, hence all calls to <code>cage</code> (<code>cage.animal</code>) return cats.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>is</code> is identity testing, <code>==</code> is equality testing. what happens in your code would be emulated in the interpreter like this:</p>\n\n<pre><code>&gt;&gt;&gt; a = 'pub'\n&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>\n\n<p>so, no wonder they're not the same, right?</p>\n\n<p>In other words: <code>is</code> is the <code>id(a) == id(b)</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>SilentGhost and others are correct here.  <code>is</code> is used for <em>identity</em> comparison, while <code>==</code> is used for <em>equality</em> comparison.</p>\n\n<p>The reason this works interactively is that (most) string literals are <a href=\"http://en.wikipedia.org/wiki/String%5Finterning\">interned</a> by default.  From Wikipedia:</p>\n\n<blockquote>\n  <p>Interned strings speed up string\n  comparisons, which are sometimes a\n  performance bottleneck in applications\n  (such as compilers and dynamic\n  programming language runtimes) that\n  rely heavily on hash tables with\n  string keys. Without interning,\n  checking that two different strings\n  are equal involves examining every\n  character of both strings. This is\n  slow for several reasons: it is\n  inherently O(n) in the length of the\n  strings; it typically requires reads\n  from several regions of memory, which\n  take time; and the reads fills up the\n  processor cache, meaning there is less\n  cache available for other needs. With\n  interned strings, a simple object\n  identity test suffices after the\n  original intern operation; this is\n  typically implemented as a pointer\n  equality test, normally just a single\n  machine instruction with no memory\n  reference at all.</p>\n</blockquote>\n\n<p>So, when you have two string literals (words that are literally typed into your program source code, surrounded by quotation marks) in your program that have the same value, the Python compiler will automatically intern the strings, making them both stored at the same memory location.  (Note that this doesn't <em>always</em> happen, and the rules for when this happens are quite convoluted, so please don't rely on this behavior in production code!)</p>\n\n<p>Since in your interactive session both strings are actually stored in the same memory location, they have the same <em>identity</em>, so the <code>is</code> operator works as expected.  But if you construct a string by some other method (even if that string contains <em>exactly</em> the same characters), then the string may be <em>equal</em>, but it is not <em>the same string</em> -- that is, it has a different <em>identity</em>, because it is stored in a different place in memory.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>is</code> keyword is a test for object identity while <code>==</code> is a value comparison.</p>\n\n<p>If you use <code>is</code>, the result will be true if and only if the object is the same object. However, <code>==</code> will be true any time the values of the object are the same.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One last thing to note, you may use the intern function to ensure that you're getting a reference to the same string:</p>\n\n<pre><code>&gt;&gt;&gt; a = intern('a')\n&gt;&gt;&gt; a2 = intern('a')\n&gt;&gt;&gt; a is a2\nTrue\n</code></pre>\n\n<p>As pointed out above, you should probably not be doing is to determine equality on strings.  But this may be helpful to know if you have some kind of weird requirement to use <code>is</code>.</p>\n\n<p>Note that the intern function got moved from being a built in function to being in the module <code>sys</code> for Python 3.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is a side note, but in idiomatic python, you will often see things like:</p>\n\n<pre><code>if x is None: \n    # some clauses\n</code></pre>\n\n<p>This is safe, because <a href=\"http://docs.python.org/library/stdtypes.html#the-null-object\">there is guaranteed to be one instance of the Null Object (i.e., None)</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're not sure what you're doing, use the '=='.\nIf you have a little more knowledge about it you can use 'is' for known objects like 'None'.</p>\n\n<p>Otherwise you'll end up wondering why things doesn't work and why this happens:</p>\n\n<pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; b = 1\n&gt;&gt;&gt; b is a\nTrue\n&gt;&gt;&gt; a = 6000\n&gt;&gt;&gt; b = 6000\n&gt;&gt;&gt; b is a\nFalse\n</code></pre>\n\n<p>I'm not even sure if some things are guaranteed to stay the same between different python versions/implementations.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>is</code> is identity testing, <code>==</code> is equality testing. What this means is that <code>is</code> is a way to check whether two things are the <em>same</em> things, or just equivalent. </p>\n\n<p>Say you've got a simple <code>person</code> object. If it is named 'Jack' and is '23' years old, it's equivalent to another 23yr old Jack, but its not the same person.</p>\n\n<pre><code>class Person(object):\n   def __init__(self, name, age):\n       self.name = name\n       self.age = age\n\njack1 = Person('Jack', 23)\njack2 = Person('Jack', 23)\n\njack1 == jack2 #True\njack1 is jack2 #False\n</code></pre>\n\n<p>They're the same age, but they're not the same instance of person. A string might be equivalent to another, but it's not the same object.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From my limited experience with python, <code>is</code> is used to compare two objects to see if they are the same object as opposed to two different objects with the same value.  <code>==</code> is used to determine if the values are identical. </p>\n\n<p>Here is a good example:</p>\n\n<pre><code>&gt;&gt;&gt; s1 = u'public'\n&gt;&gt;&gt; s2 = 'public'\n&gt;&gt;&gt; s1 is s2\nFalse\n&gt;&gt;&gt; s1 == s2\nTrue\n</code></pre>\n\n<p><code>s1</code> is a unicode string, and <code>s2</code> is a normal string.  They are not the same type, but are the same value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think it has to do with the fact that, when the 'is' comparison evaluates to false, two distinct objects are used. If it evaluates to true, that means internally it's using the same exact object and not creating a new one, possibly because you created them within a fraction of 2 or so seconds and because there isn't a large time gap in between it's optimized and uses the same object.</p>\n\n<p>This is why you should be using the equality operator <code>==</code>, not <code>is</code>, to compare the value of a string object.</p>\n\n<pre><code>&gt;&gt;&gt; s = 'one'\n&gt;&gt;&gt; s2 = 'two'\n&gt;&gt;&gt; s is s2\nFalse\n&gt;&gt;&gt; s2 = s2.replace('two', 'one')\n&gt;&gt;&gt; s2\n'one'\n&gt;&gt;&gt; s2 is s\nFalse\n&gt;&gt;&gt;\n</code></pre>\n\n<p>In this example, I made s2, which was a different string object previously equal to 'one' but it is not the same object as <code>s</code>, because the interpreter did not use the same object as I did not initially assign it to 'one', if I had it would have made them the same object.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I believe that this is known as \"interned\" strings. Python does this, so does Java, and so do C and C++ when compiling in optimized modes.</p>\n\n<p>If you use two identical strings, instead of wasting memory by creating two string objects, all interned strings with the same contents point to the same memory.</p>\n\n<p>This results in the Python \"is\" operator returning True because two strings with the same contents are pointing at the same string object. This will also happen in Java and in C.</p>\n\n<p>This is only useful for memory savings though. You cannot rely on it to test for string equality, because the various interpreters and compilers and JIT engines cannot always do it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am answering the question even though the question is to old because no answers above quotes the language reference</p>\n\n<p>Actually the is operator checks for identity and == operator checks for equality,</p>\n\n<p><strong><em>From Language Reference:</em></strong></p>\n\n<p>Types affect almost all aspects of object behavior. Even the importance of object identity is affected in some sense: for immutable types, operations <strong>that compute new values may actually return a reference to any existing object with the same type and value, while for mutable objects this is not allowed</strong>. E.g., after a = 1; b = 1, a and b may or may not refer to the same object with the value one, depending on the implementation, but after c = []; d = [], c and d are guaranteed to refer to two different, unique, newly created empty lists. (Note that c = d = [] assigns the same object to both c and d.)</p>\n\n<p>so from above statement we can infer that the strings which is an immutable type may fail when checked with \"is\" and may checked succeed when checked with \"is\"</p>\n\n<p>The same applies for int,tuple which are also immutable types</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>\n\n<blockquote>\n  <p>Up to Python 2.1, old-style classes were the only flavour available to the user. The concept of (old-style) class is unrelated to the concept of type: if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code> designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type 'instance'&gt;</code>. This reflects the fact that all old-style instances, independently of their class, are implemented with a single built-in type, called instance. </p>\n  \n  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. A new-style class is simply a user-defined type, no more, no less. If x is an instance of a new-style class, then <code>type(x)</code> is typically the same as <code>x.__class__</code> (although this is not guaranteed \u2013 a new-style class instance is permitted to override the value returned for <code>x.__class__</code>).</p>\n  \n  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. It also has a number of immediate benefits, like the ability to subclass most built-in types, or the introduction of \"descriptors\", which enable computed properties. </p>\n  \n  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. New-style classes are created by specifying another new-style class (i.e. a type) as a parent class, or the \"top-level type\" object if no other parent is needed. The behaviour of new-style classes differs from that of old-style classes in a number of important details in addition to what type returns. Some of these changes are fundamental to the new object model, like the way special methods are invoked. Others are \"fixes\" that could not be implemented before for compatibility concerns, like the method resolution order in case of multiple inheritance. </p>\n  \n  <p><strong>Python 3 only has new-style classes</strong>. No matter if you subclass from <code>object</code> or not, classes are new-style in Python 3. It is however recommended that you still subclass from <code>object</code>.</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Declaration-wise:</strong></p>\n\n<p>New-style classes inherit from object, or from another new-style class.</p>\n\n<pre><code>class NewStyleClass(object):\n    pass\n\nclass AnotherNewStyleClass(NewStyleClass):\n    pass\n</code></pre>\n\n<p>Old-style classes don't.</p>\n\n<pre><code>class OldStyleClass():\n    pass\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Important <strong>behavior changes</strong> between old and new style classes:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/576169/understanding-python-super-and-init-methods\">super</a> added</li>\n<li>MRO changed (explained below)</li>\n<li><a href=\"http://docs.python.org/2/howto/descriptor.html\">descriptors</a> added</li>\n<li>new style class objects cannot be raised unless derived from <code>Exception</code> (example below)</li>\n<li><a href=\"http://docs.python.org/2/reference/datamodel.html#slots\"><code>__slots__</code></a> added</li>\n</ul>\n\n<h2>MRO (Method Resolution Order) changed</h2>\n\n<p>It was mentioned in other answers, but here goes a concrete example of the difference between classic MRO and C3 MRO (used in new style classes).</p>\n\n<p>The question is the order in which attributes (which include methods and member variables) are searched for in multiple inheritance.</p>\n\n<p><strong>Classic classes</strong> do a depth first search from left to right. Stop on first match. They do not have the <code>__mro__</code> attribute.</p>\n\n<pre><code>class C: i = 0\nclass C1(C): pass\nclass C2(C): i = 2\nclass C12(C1, C2): pass\nclass C21(C2, C1): pass\n\nassert C12().i == 0\nassert C21().i == 2\n\ntry:\n    C12.__mro__\nexcept AttributeError:\n    pass\nelse:\n    assert False\n</code></pre>\n\n<p><strong>New-style classes</strong> MRO is more complicated to synthesize in a single English sentence. It is explained in detail <a href=\"http://www.python.org/download/releases/2.3/mro/\">here</a>. One of its properties is that a Base class is only searched for once all its Derived classes have been. They have the <code>__mro__</code> attribute which shows the search order. </p>\n\n<pre><code>class C(object): i = 0\nclass C1(C): pass\nclass C2(C): i = 2\nclass C12(C1, C2): pass\nclass C21(C2, C1): pass\n\nassert C12().i == 2\nassert C21().i == 2\n\nassert C12.__mro__ == (C12, C1, C2, C, object)\nassert C21.__mro__ == (C21, C2, C1, C, object)\n</code></pre>\n\n<h2>New style class objects cannot be raised unless derived from <code>Exception</code></h2>\n\n<p>Around Python 2.5 many classes could be raised, around Python 2.6 this was removed. On Python 2.7.3:</p>\n\n<pre><code># OK, old:\nclass Old: pass\ntry:\n    raise Old()\nexcept Old:\n    pass\nelse:\n    assert False\n\n# TypeError, new not derived from `Exception`.\nclass New(object): pass\ntry:\n    raise New()\nexcept TypeError:\n    pass\nelse:\n    assert False\n\n# OK, derived from `Exception`.\nclass New(Exception): pass\ntry:\n    raise New()\nexcept New:\n    pass\nelse:\n    assert False\n\n# `'str'` is a new style object, so you can't raise it:\ntry:\n    raise 'str'\nexcept TypeError:\n    pass\nelse:\n    assert False\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Old style classes are still marginally faster for attribute lookup. This is not usually important, but may be useful in performance-sensitive Python 2.x code:</p>\n\n<pre>\nIn [3]: class A:\n   ...:     def __init__(self):\n   ...:         self.a = 'hi there'\n   ...: \n\nIn [4]: class B(object):\n   ...:     def __init__(self):\n   ...:         self.a = 'hi there'\n   ...: \n\nIn [6]: aobj = A()\nIn [7]: bobj = B()\n\nIn [8]: %timeit aobj.a\n10000000 loops, best of 3: 78.7 ns per loop\n\nIn [10]: %timeit bobj.a\n10000000 loops, best of 3: 86.9 ns per loop\n</pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Guido has written <a href=\"http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html\">The Inside Story on New-Style Classes</a>, a really great article about new-style and old-style class in Python.</p>\n\n<p>Python 3 has only new-style class, even if you write an 'old-style class', it is implicitly derived from <code>object</code>.</p>\n\n<p>New-style classes have some advanced features lacking in old-style classes, such as <code>super</code> and the new <a href=\"http://en.wikipedia.org/wiki/C3_linearization\">C3 mro</a>, some magical methods, etc.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Or rather, you should always use new-style classes, <em>unless</em> you have code that needs to work with versions of Python older than 2.2.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a very practical, True/False difference. The only difference between the two versions of the following code is that in the second version Person inherits from object. Other than that the two versions are identical, but with different results :</p>\n\n<p>1) old-style classes</p>\n\n<pre><code>class Person():\n    _names_cache = {}\n    def __init__(self,name):\n        self.name = name\n    def __new__(cls,name):\n        return cls._names_cache.setdefault(name,object.__new__(cls,name))\n\nahmed1 = Person(\"Ahmed\")\nahmed2 = Person(\"Ahmed\")\nprint ahmed1 is ahmed2\nprint ahmed1\nprint ahmed2\n\n\n&gt;&gt;&gt; False\n&lt;__main__.Person instance at 0xb74acf8c&gt;\n&lt;__main__.Person instance at 0xb74ac6cc&gt;\n&gt;&gt;&gt;\n</code></pre>\n\n<p>2) new-style classes </p>\n\n<pre><code>class Person(object):\n    _names_cache = {}\n    def __init__(self,name):\n        self.name = name\n    def __new__(cls,name):\n        return cls._names_cache.setdefault(name,object.__new__(cls,name))\n\nahmed1 = Person(\"Ahmed\")\nahmed2 = Person(\"Ahmed\")\nprint ahmed2 is ahmed1\nprint ahmed1\nprint ahmed2\n\n&gt;&gt;&gt; True\n&lt;__main__.Person object at 0xb74ac66c&gt;\n&lt;__main__.Person object at 0xb74ac66c&gt;\n&gt;&gt;&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>New-style classes inherit from <code>object</code> and must be written as such in Python 2.2 onwards (i.e. <code>class Classname(object):</code> instead of <code>class Classname:</code>). The core change is to unify types and classes, and the nice side-effect of this is that it allows you to inherit from built-in types.</p>\n\n<p>Read <a href=\"http://www.python.org/download/releases/2.2.3/descrintro/\" rel=\"nofollow\">descrintro</a> for more details.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>New style classes may use <code>super(Foo, self)</code> where <code>Foo</code> is a class and <code>self</code> is the instance.</p>\n\n<blockquote>\n  <p><code>super(type[, object-or-type])</code></p>\n  \n  <p>Return a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The search order is same as that used by getattr() except that the type itself is skipped.</p>\n</blockquote>\n\n<p>And in Python 3.x you can simply use <code>super()</code> inside a class with no parameters.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is a third party library for this on PyPI called <a href=\"https://pypi.python.org/pypi/natsort\">natsort</a> (full disclosure, I am the package's author).  For your case, you can do the following:</p>\n\n<pre><code>&gt;&gt;&gt; import natsort\n&gt;&gt;&gt; x = ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']\n&gt;&gt;&gt; natsort.natsorted(x, key=lambda y: y.lower())\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n\n<p>You should note that <code>natsort</code> uses a general algorithm so it should work for just about any input that you throw at it.</p>\n\n<hr>\n\n<p>If you are on <code>natsort</code> version &gt;= 3.5.0 you can do the following.</p>\n\n<pre><code>&gt;&gt;&gt; from natsort import natsorted, ns\n&gt;&gt;&gt; x = ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']\n&gt;&gt;&gt; natsorted(x, alg=ns.IGNORECASE)  # or alg=ns.IC\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try this:</p>\n\n<pre><code>import re\n\ndef natural_sort(l): \n    convert = lambda text: int(text) if text.isdigit() else text.lower() \n    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] \n    return sorted(l, key = alphanum_key)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n\n<p>See it working online: <a href=\"http://ideone.com/W0HUe\">ideone</a>.</p>\n\n<p>Code adapted from here: <a href=\"http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html\">Sorting for Humans : Natural Sort Order</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a much more pythonic version of Mark Byer's answer:</p>\n\n<pre><code>import re\n\ndef natural_sort_key(s, _nsre=re.compile('([0-9]+)')):\n    return [int(text) if text.isdigit() else text.lower()\n            for text in re.split(_nsre, s)]    \n</code></pre>\n\n<p>Now this function can be used as a key in any function that uses it, like <code>list.sort</code>, <code>sorted</code>, <code>max</code>, etc.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I wrote a function based on <a href=\"http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html\">http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html</a> which adds the ability to still pass in your own 'key' parameter. I need this in order to perform a natural sort of lists that contain more complex objects (not just strings).</p>\n\n<pre><code>import re\n\ndef natural_sort(list, key=lambda s:s):\n    \"\"\"\n    Sort the list into natural alphanumeric order.\n    \"\"\"\n    def get_alphanum_key_func(key):\n        convert = lambda text: int(text) if text.isdigit() else text \n        return lambda s: [convert(c) for c in re.split('([0-9]+)', key(s))]\n    sort_key = get_alphanum_key_func(key)\n    list.sort(key=sort_key)\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>my_list = [{'name':'b'}, {'name':'10'}, {'name':'a'}, {'name':'1'}, {'name':'9'}]\nnatural_sort(my_list, key=lambda x: x['name'])\nprint my_list\n[{'name': '1'}, {'name': '9'}, {'name': '10'}, {'name': 'a'}, {'name': 'b'}]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One option is to turn the string into a tuple and replace digits using expanded form <a href=\"http://wiki.answers.com/Q/What_does_expanded_form_mean\" rel=\"nofollow\">http://wiki.answers.com/Q/What_does_expanded_form_mean</a></p>\n\n<p>that way a90 would become (\"a\",10,0) and a1 would become (\"a\",1)</p>\n\n<p>below is some sample code (which isn't very efficient due to the way It removes leading 0's from numbers)</p>\n\n<pre><code>alist=[\"something1\",\n    \"something12\",\n    \"something17\",\n    \"something2\",\n    \"something25and_then_33\",\n    \"something25and_then_34\",\n    \"something29\",\n    \"beta1.1\",\n    \"beta2.3.0\",\n    \"beta2.33.1\",\n    \"a001\",\n    \"a2\",\n    \"z002\",\n    \"z1\"]\n\ndef key(k):\n    nums=set(list(\"0123456789\"))\n        chars=set(list(k))\n    chars=chars-nums\n    for i in range(len(k)):\n        for c in chars:\n            k=k.replace(c+\"0\",c)\n    l=list(k)\n    base=10\n    j=0\n    for i in range(len(l)-1,-1,-1):\n        try:\n            l[i]=int(l[i])*base**j\n            j+=1\n        except:\n            j=0\n    l=tuple(l)\n    print l\n    return l\n\nprint sorted(alist,key=key)\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 1)\n('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 10, 2)\n('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 10, 7)\n('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 2)\n('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 20, 5, 'a', 'n', 'd', '_', 't', 'h', 'e', 'n', '_', 30, 3)\n('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 20, 5, 'a', 'n', 'd', '_', 't', 'h', 'e', 'n', '_', 30, 4)\n('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 20, 9)\n('b', 'e', 't', 'a', 1, '.', 1)\n('b', 'e', 't', 'a', 2, '.', 3, '.')\n('b', 'e', 't', 'a', 2, '.', 30, 3, '.', 1)\n('a', 1)\n('a', 2)\n('z', 2)\n('z', 1)\n['a001', 'a2', 'beta1.1', 'beta2.3.0', 'beta2.33.1', 'something1', 'something2', 'something12', 'something17', 'something25and_then_33', 'something25and_then_34', 'something29', 'z1', 'z002']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The above answers are good for the <strong>specific example</strong> that was shown, but miss several useful cases for the more general question of natural sort. I just got bit by one of those cases, so created a more thorough solution:</p>\n\n<pre><code>def natural_sort_key(string_or_number):\n    \"\"\"\n    by Scott S. Lawton &lt;scott@ProductArchitect.com&gt; 2014-12-11; public domain and/or CC0 license\n\n    handles cases where simple 'int' approach fails, e.g.\n        ['0.501', '0.55'] floating point with different number of significant digits\n        [0.01, 0.1, 1]    already numeric so regex and other string functions won't work (and aren't required)\n        ['elm1', 'Elm2']  ASCII vs. letters (not case sensitive)\n    \"\"\"\n\n    def try_float(astring):\n        try:\n            return float(astring)\n        except:\n            return astring\n\n    if isinstance(string_or_number, basestring):\n        string_or_number = string_or_number.lower()\n\n        if len(re.findall('[.]\\d', string_or_number)) &lt;= 1:\n            # assume a floating point value, e.g. to correctly sort ['0.501', '0.55']\n            # '.' for decimal is locale-specific, e.g. correct for the Anglosphere and Asia but not continental Europe\n            return [try_float(s) for s in re.split(r'([\\d.]+)', string_or_number)]\n        else:\n            # assume distinct fields, e.g. IP address, phone number with '.', etc.\n            # caveat: might want to first split by whitespace\n            # TBD: for unicode, replace isdigit with isdecimal\n            return [int(s) if s.isdigit() else s for s in re.split(r'(\\d+)', string_or_number)]\n    else:\n        # consider: add code to recurse for lists/tuples and perhaps other iterables\n        return string_or_number\n</code></pre>\n\n<p>Test code and several links (on and off of StackOverflow) are here:\n<a href=\"http://productarchitect.com/code/better-natural-sort.py\" rel=\"nofollow\">http://productarchitect.com/code/better-natural-sort.py</a></p>\n\n<p>Feedback welcome. That's not meant to be a definitive solution; just a step forward.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; sorted(lst, key=lambda x: int(re.findall(r'\\d+$', x)[0]))\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>data = ['elm13', 'elm9', 'elm0', 'elm1', 'Elm11', 'Elm2', 'elm10']\n</code></pre>\n\n<p>Let's analyse the data. The digit capacity of all elements is 2. And there are 3 letters in common literal part <code>'elm'</code>. </p>\n\n<p>So, the maximal length of element is 5. We can increase this value to make sure (for example, to 8).</p>\n\n<p><strong>Bearing that in mind, we've got a one-string solution:</strong></p>\n\n<pre><code>data.sort(key=lambda x: '{0:0&gt;8}'.format(x).lower())\n</code></pre>\n\n<p><strong>without regular expressions and external libraries!</strong></p>\n\n<pre><code>print(data)\n\n&gt;&gt;&gt; ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'elm13']\n</code></pre>\n\n<p>Explanation:</p>\n\n<pre><code>for elm in data:\n    print('{0:0&gt;8}'.format(elm).lower())\n\n&gt;&gt;&gt;\n0000elm0\n0000elm1\n0000elm2\n0000elm9\n000elm10\n000elm11\n000elm13\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Python 2.x</strong></p>\n\n<p>There were two functions to get user input, called <a href=\"https://docs.python.org/2/library/functions.html#input\"><code>input</code></a> and <a href=\"https://docs.python.org/2/library/functions.html#raw_input\"><code>raw_input</code></a>. The difference between them is, <code>raw_input</code> doesn't evaluate the data and returns as it is, in string form. But, <code>input</code> will evaluate whatever you entered and the result of evaluation will be returned. For example,</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n(22, &lt;type 'int'&gt;)\n</code></pre>\n\n<p>The data <code>5 + 17</code> is evaluated and the result is <code>22</code>. When it evaluates the expression <code>5 + 17</code>, it detects that you are adding two numbers and so the result will also be of the same <code>int</code> type. So, the type conversion is done for free and <code>22</code> is returned as the result of <code>input</code> and stored in <code>data</code> variable. You can think of <code>input</code> as the <code>raw_input</code> composed with an <a href=\"https://docs.python.org/2/library/functions.html#eval\"><code>eval</code></a> call.</p>\n\n<pre><code>&gt;&gt;&gt; data = eval(raw_input(\"Enter a number: \"))\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n(22, &lt;type 'int'&gt;)\n</code></pre>\n\n<p><strong>Note:</strong> you should be careful when you are using <code>input</code> in Python 2.x. I explained why one should be careful when using it, in <a href=\"http://stackoverflow.com/a/21122817/1903116\">this answer</a>.</p>\n\n<p>But, <code>raw_input</code> doesn't evaluate the input and returns as it is, as a string.</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = raw_input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n('5 + 17', &lt;type 'str'&gt;)\n</code></pre>\n\n<p><strong>Python 3.x</strong></p>\n\n<p>Python 3.x's <a href=\"https://docs.python.org/3/library/functions.html#input\"><code>input</code></a> and Python 2.x's <code>raw_input</code> are similar and <code>raw_input</code> is not available in Python 3.x. </p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'3.4.0 (default, Apr 11 2014, 13:05:11) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n('5 + 17', &lt;class 'str'&gt;)\n</code></pre>\n\n<hr>\n\n<p><strong>Solution</strong></p>\n\n<p>To answer your question, since Python 3.x doesn't evaluate and convert the data type, you have to explicitly convert to <code>int</code>s, with <a href=\"https://docs.python.org/3/library/functions.html#int\"><code>int</code></a>, like this</p>\n\n<pre><code>x = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n</code></pre>\n\n<p>You can accept numbers of any base and convert them directly to base-10 with the <code>int</code> function, like this</p>\n\n<pre><code>&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 8)\nEnter a number: 777\n&gt;&gt;&gt; data\n511\n&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 16)\nEnter a number: FFFF\n&gt;&gt;&gt; data\n65535\n&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 2)\nEnter a number: 10101010101\n&gt;&gt;&gt; data\n1365\n</code></pre>\n\n<p>The second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a <code>ValueError</code>.</p>\n\n<pre><code>&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 2)\nEnter a number: 1234\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 2: '1234'\n</code></pre>\n\n<hr>\n\n<p>Apart from that, your program can be changed a little bit, like this</p>\n\n<pre><code>while True:\n    ...\n    ...\n    if input(\"Play again? \") == \"no\":\n        break\n</code></pre>\n\n<p>You can get rid of the <code>play</code> variable by using <code>break</code> and <code>while True</code>. </p>\n\n<p><strong>PS</strong>: Python doesn't expect <code>;</code> at the end of the line :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 3.x, <code>raw_input</code> was renamed to <code>input</code> and the Python 2.x <code>input</code> was removed.  </p>\n\n<p>This means that, just like <code>raw_input</code>, <a href=\"http://docs.python.org/3.2/library/functions.html#input\" rel=\"nofollow\"><code>input</code></a> in Python 3.x always returns a string object.</p>\n\n<p>To fix the problem, you need to explicitly make those inputs into integers by putting them in <a href=\"http://docs.python.org/3.2/library/functions.html#int\" rel=\"nofollow\"><code>int</code></a>:</p>\n\n<pre><code>x = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n</code></pre>\n\n<p>Also, Python does not need/use semicolons to end lines.  So, having them doesn't do anything positive.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>input()</code> (Python 3) and <code>raw_input()</code> (Python 2) <em>always</em> return strings. Convert the result to integer explicitly with <code>int()</code>.</p>\n\n<pre><code>x = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n</code></pre>\n\n<p>Pro tip: semi-colons are not needed in Python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Multiple questions require input for several integers on single line.  The best way is to input the whole string of numbers one one line and then split them to integers.</p>\n\n<pre><code> p=raw_input()\n    p=p.split()      \n    for i in p:\n        a.append(int(i))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I encountered a problem of taking integer input while solving a problem on <a href=\"http://www.codechef.com/problems/TLG\" rel=\"nofollow\">CodeChef</a>, where two integers - separated by space - should be read from one line.</p>\n\n<p>While <code>int(input())</code> is sufficient for a single integer, I did not find a direct way to input two integers.  I tried this:</p>\n\n<pre><code>num = input()\nnum1 = 0\nnum2 = 0\n\nfor i in range(len(num)):\n    if num[i] == ' ':\n        break\n\nnum1 = int(num[:i])\nnum2 = int(num[i+1:])\n</code></pre>\n\n<p>Now I use num1 and  num2 as integers.  Hope this helps.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For multiple integer in a single line, <strong>map</strong> might be better.</p>\n\n<pre><code>arr = map(int, raw_input().split())\n</code></pre>\n\n<p>If the number is already known, (like 2 integers), you can use</p>\n\n<pre><code>num1, num2 = map(int, raw_input().split())\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, in python 3.x, <code>raw_input</code> is replaced with <code>input</code>. In order to revert to old behavior of <code>input</code> use: </p>\n\n<p><code>eval(input(\"Enter a number: \"))</code></p>\n\n<p>This will let python know that entered input is integer</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def dbz():\n    try:\n        r = raw_input(\"Enter number:\")\n        if r.isdigit():\n            i = int(raw_input(\"Enter divident:\"))\n            d = int(r)/i\n            print \"O/p is -:\",d\n        else:\n            print \"Not a number\"\n    except Exception ,e:\n        print \"Program halted incorrect data entered\",type(e)\ndbz()\n\nOr \n\nnum = input(\"Enter Number:\")#\"input\" will accept only numbers\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The order is not arbitrary, but depends on the insertion and deletion history of the dictionary or set, as well as on the specific Python implementation. For the remainder of this answer, for 'dictionary', you can also read 'set'; sets are implemented as dictionaries with just keys and no values.</p>\n\n<p>Keys are hashed, and hash values are assigned to slots in a dynamic table (it can grow or shrink based on needs). And that mapping process can lead to collisions, meaning that a key will have to be slotted in a <em>next</em> slot based on what is already there.</p>\n\n<p>Listing the contents loops over the slots, and so keys are listed in the order they <em>currently</em> reside in the table.</p>\n\n<p>Take the keys <code>'foo'</code> and <code>'bar'</code>, for example, and lets assume the table size is 8 slots. In Python 2.7, <code>hash('foo')</code> is <code>-4177197833195190597</code>, <code>hash('bar')</code> is <code>327024216814240868</code>. Modulo 8, that means these two keys are slotted in slots 3 and 4 then:</p>\n\n<pre><code>&gt;&gt;&gt; hash('foo')\n-4177197833195190597\n&gt;&gt;&gt; hash('foo') % 8\n3\n&gt;&gt;&gt; hash('bar')\n327024216814240868\n&gt;&gt;&gt; hash('bar') % 8\n4\n</code></pre>\n\n<p>This informs their listing order:</p>\n\n<pre><code>&gt;&gt;&gt; {'bar': None, 'foo': None}\n{'foo': None, 'bar': None}\n</code></pre>\n\n<p>All slots except 3 and 4 are empty, looping over the table first lists slot 3, then slot 4, so <code>'foo'</code> is listed before <code>'bar'</code>.</p>\n\n<p><code>bar</code> and <code>baz</code>, however, have hash values that are exactly 8 apart and thus map to the exact same slot, <code>4</code>:</p>\n\n<pre><code>&gt;&gt;&gt; hash('bar')\n327024216814240868\n&gt;&gt;&gt; hash('baz')\n327024216814240876\n&gt;&gt;&gt; hash('bar') % 8\n4\n&gt;&gt;&gt; hash('baz') % 8\n4\n</code></pre>\n\n<p>Their order now depends on which key was slotted first; the second key will have to be moved to a next slot:</p>\n\n<pre><code>&gt;&gt;&gt; {'baz': None, 'bar': None}\n{'bar': None, 'baz': None}\n&gt;&gt;&gt; {'bar': None, 'baz': None}\n{'baz': None, 'bar': None}\n</code></pre>\n\n<p>The table order differs here, because one or the other key was slotted first.</p>\n\n<p>The technical name for the underlying structure used by CPython (the most commonly used Python implemenation) is a <a href=\"http://en.wikipedia.org/wiki/hash_table\">hash table</a>, one that uses open addressing. If you are curious, and understand C well enough, take a look at the <a href=\"http://hg.python.org/cpython/file/tip/Objects/dictobject.c\">C implementation</a> for all the (well documented) details. You could also watch this <a href=\"http://pyvideo.org/video/276/the-mighty-dictionary-55\">Pycon 2010 presentation by Brandon Rhodes</a> about how CPython <code>dict</code> works, or pick up a copy of <a href=\"http://shop.oreilly.com/product/9780596510046.do\">Beautiful Code</a>, which includes a chapter on the implementation written by Andrew Kuchling.</p>\n\n<p>Note that as of Python 3.3, a random hash seed is used as well, making hash collisions unpredictable to prevent certain types of denial of service (where an attacker renders a Python server unresponsive by causing mass hash collisions). This means that the order of a given dictionary is then <em>also</em> dependent on the random hash seed for the current Python invocation.</p>\n\n<p>Other implementations are free to use a different structure for dictionaries, as long as they satisfy the documented Python interface for them, but I believe that all implementations so far use a variation of the hash table.</p>\n\n<p>Python 2.7 and newer also provides an <a href=\"https://docs.python.org/2/library/collections.html#collections.OrderedDict\"><code>OrderedDict</code> class</a>, a subclass of <code>dict</code> that adds an additional data structure to record key order. At the price of some speed and extra memory, this class remembers in what order you inserted keys; listing keys, values or items will then do so in that order. It uses a doubly-linked list stored in an additional dictionary to keep the order up-to-date efficiently.</p>\n\n<p>If you wanted an ordered set, you can install the <a href=\"https://pypi.python.org/pypi/oset\"><code>oset</code> package</a>; it works on Python 2.5 and up.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is more a response to <a href=\"http://stackoverflow.com/questions/26098775/python-3-41-a-set\">Python 3.41 A set</a> before it was closed as a duplicate.</p>\n\n<hr>\n\n\n\n<p>The others are right: don't rely on the order. Don't even pretend there is one.</p>\n\n<p>That said, there is <em>one</em> thing you can rely on:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>list(myset) == list(myset)\n</code></pre>\n\n<p>That is, the order is <em>stable</em>.</p>\n\n<hr>\n\n<p>Understanding why there is a <em>perceived</em> order requires understanding a few things:</p>\n\n<ul>\n<li><p>That Python uses <em>hash sets</em>,</p></li>\n<li><p>How CPython's hash set is stored in memory and</p></li>\n<li><p>How numbers get hashed</p></li>\n</ul>\n\n<p>From the top:</p>\n\n<p>A <em>hash set</em> is a method of storing random data with really fast lookup times.</p>\n\n<p>It has a backing array:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code># A C array; items may be NULL,\n# a pointer to an object, or a\n# special dummy object\n_ _ 4 _ _ 2 _ _ 6\n</code></pre>\n\n<p>We shall ignore the special dummy object, which exists only to make removes easier to deal with, because we won't be removing from these sets.</p>\n\n<p>In order to have really fast lookup, you do some magic to calculate a hash from an object. The only rule is that two objects which are equal have the same hash. (But if two objects have the same hash they can be unequal.)</p>\n\n<p>You then make in index by taking the modulus by the array length:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>hash(4) % len(storage) = index 2\n</code></pre>\n\n<p>This makes it really fast to access elements.</p>\n\n<p>Hashes are only most of the story, as <code>hash(n) % len(storage)</code> and <code>hash(m) % len(storage)</code> can result in the same number. In that case, several different strategies can try and resolve the conflict. CPython uses \"linear probing\" 9 times before doing complicated things, so it will look <em>to the left of the slot</em> for up to 9 places before looking elsewhere.</p>\n\n<p>CPython's hash sets are stored like this:</p>\n\n<ul>\n<li><p>A hash set can be <strong>no more than 2/3 full</strong>. If there are 20 elements and the backing array is 30 elements long, the backing store will resize to be larger. This is because you get collisions more often with small backing stores, and collisions slow everything down.</p></li>\n<li><p>The backing store resizes in powers of 4, starting at 8, except for large sets (50k elements) which resize in powers of two: (8, 32, 128, ...).</p></li>\n</ul>\n\n<p>So when you create an array the backing store is length 8. When it is 5 full and you add an element, it will briefly contain 6 elements. <code>6 &gt; \u00b2\u2044\u2083\u00b78</code> so this triggers a resize, and the backing store quadruples to size 32.</p>\n\n<p>Finally, <code>hash(n)</code> just returns <code>n</code> for numbers (except <code>-1</code> which is special).</p>\n\n<hr>\n\n<p>So, let's look at the first one:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>v_set = {88,11,1,33,21,3,7,55,37,8}\n</code></pre>\n\n<p><code>len(v_set)</code> is 10, so the backing store is at least 15(+1) <strong>after all items have been added</strong>. The relevant power of 2 is 32. So the backing store is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>__ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __\n</code></pre>\n\n<p>We have</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>hash(88) % 32 = 24\nhash(11) % 32 = 11\nhash(1)  % 32 = 1\nhash(33) % 32 = 1\nhash(21) % 32 = 21\nhash(3)  % 32 = 3\nhash(7)  % 32 = 7\nhash(55) % 32 = 23\nhash(37) % 32 = 5\nhash(8)  % 32 = 8\n</code></pre>\n\n<p>so these insert as:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>__  1 __  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __\n   33 \u2190 Can't also be where 1 is;\n        either 1 or 33 has to move\n</code></pre>\n\n<p>So we would expect an order like</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>{[1 or 33], 3, 37, 7, 8, 11, 21, 55, 88}\n</code></pre>\n\n<p>with the 1 or 33 that isn't at the start somewhere else. This will use linear probing, so we will either have:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>       \u2193\n__  1 33  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>       \u2193\n__ 33  1  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __\n</code></pre>\n\n<p>You might expect the 33 to be the one that's displaced because the 1 was already there, but due to the resizing that happens as the set is being built, this isn't actually the case. Every time the set gets rebuilt, the items already added are effectively reordered.</p>\n\n<p>Now you can see why</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>{7,5,11,1,4,13,55,12,2,3,6,20,9,10}\n</code></pre>\n\n<p>might be in order. There are 14 elements, so the backing store is at least 21+1, which means 32:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>__ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __\n</code></pre>\n\n<p>1 to 13 hash in the first 13 slots. 20 goes in slot 20.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ __ __ 20 __ __ __ __ __ __ __ __ __ __ __\n</code></pre>\n\n<p>55 goes in slot <code>hash(55) % 32</code> which is 23:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ __ __ 20 __ __ 55 __ __ __ __ __ __ __ __\n</code></pre>\n\n<p>If we chose 50 instead, we'd expect</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ 50 __ 20 __ __ __ __ __ __ __ __ __ __ __\n</code></pre>\n\n<p>And lo and behold:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>{1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 20, 50}\n#&gt;&gt;&gt; {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 50, 20}\n</code></pre>\n\n<hr>\n\n<p><code>pop</code> is implemented quite simply by the looks of things: it traverses the list and pops the first one.</p>\n\n<hr>\n\n<h3>This is all implementation detail.</h3>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>\"Arbitrary\" isn't the same thing as \"non-determined\".</p>\n\n<p>What they're saying is that there are no useful properties of dictionary iteration order that are \"in the public interface\". There almost certainly are many properties of the iteration order that are fully determined by the code that currently implements dictionary iteration, but the authors aren't promising them to you as something you can use. This gives them more freedom to change these properties between Python versions (or even just in different operating conditions, or completely at random at runtime) without worrying that your program will break.</p>\n\n<p>Thus if you write a program that depends on <em>any property at all</em> of dictionary order, then you are \"breaking the contract\" of using the dictionary type, and the Python developers are not promising that this will always work, even if it appears to work for now when you test it. It's basically the equivalent of relying on \"undefined behaviour\" in C.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The other answers to this question are excellent and well written.  The OP asks \"how\" which I interpret as \"how do they get away with\" or \"why\".</p>\n\n<p>The Python documentation says <a href=\"https://docs.python.org/2/tutorial/datastructures.html#dictionaries\" rel=\"nofollow\">dictionaries</a> are not ordered because the Python dictionary implements the <a href=\"http://en.wikipedia.org/wiki/Abstract_data_type\" rel=\"nofollow\">abstract data type</a> <a href=\"http://en.wikipedia.org/wiki/Associative_array\" rel=\"nofollow\">associative array</a>.  As they say </p>\n\n<blockquote>\n  <p>the order in which the bindings are returned may be arbitrary</p>\n</blockquote>\n\n<p>In other words, a computer science student cannot assume that an associative array is ordered.  The same is true for sets in <a href=\"http://en.wikipedia.org/wiki/Set_(mathematics)\" rel=\"nofollow\">math</a> </p>\n\n<blockquote>\n  <p>the order in which the elements of a set are listed is irrelevant</p>\n</blockquote>\n\n<p>and <a href=\"http://en.wikipedia.org/wiki/Set_(computer_science)\" rel=\"nofollow\">computer science</a> </p>\n\n<blockquote>\n  <p>a set is an abstract data type that can store certain values, without any particular order</p>\n</blockquote>\n\n<p>Implementing a dictionary using a hash table is an <a href=\"https://hg.python.org/cpython/file/tip/Objects/dictobject.c\" rel=\"nofollow\">implementation detail</a> that is interesting in that it has the same properties as associative arrays as far as order is concerned.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python use <a href=\"http://en.wikipedia.org/wiki/Hash_table\" rel=\"nofollow\"><strong>hash table</strong></a> for storing the dictionaries so there is no ordered in dictionaries or other objects that use hash function.</p>\n\n<p>But about the indices of items in a hash object, python calculate the indices based on following code <a href=\"https://hg.python.org/cpython/file/661cdbd617b8/Modules/hashtable.c#l317\" rel=\"nofollow\">within <code>hashtable.c</code></a>:</p>\n\n<pre><code>key_hash = ht-&gt;hash_func(key);\nindex = key_hash &amp; (ht-&gt;num_buckets - 1);\n</code></pre>\n\n<p>So as the hash value of integers is the integer itself the index  is based on the number (<code>ht-&gt;num_buckets - 1</code> is a constant) so the index calculated by Bitwise-and between <code>(ht-&gt;num_buckets - 1)</code> and the number.</p>\n\n<p>consider the following example with <code>set</code> that use hash-table :</p>\n\n<pre><code>&gt;&gt;&gt; set([0,1919,2000,3,45,33,333,5])\nset([0, 33, 3, 5, 45, 333, 2000, 1919])\n</code></pre>\n\n<p>For number <code>33</code> we have : </p>\n\n<pre><code>33 &amp; (ht-&gt;num_buckets - 1) = 1\n</code></pre>\n\n<p>That actually it's :</p>\n\n<pre><code>'0b100001' &amp; '0b111'= '0b1' # 1 the index of 33\n</code></pre>\n\n<p><em>Note</em> in this case <code>(ht-&gt;num_buckets - 1)</code> is <code>8-1=7</code> or <code>0b111</code>. </p>\n\n<p>And for <code>1919</code> :</p>\n\n<pre><code>'0b11101111111' &amp; '0b111' = '0b111' # 7 the index of 1919\n</code></pre>\n\n<p>And for <code>333</code> :</p>\n\n<pre><code>'0b101001101' &amp; '0b111' = '0b101' # 5 the index of 333\n</code></pre>\n\n<p>For more details about python hash function its good to read the following quotes from <a href=\"https://hg.python.org/cpython/file/661cdbd617b8/Objects/dictobject.c#l106\" rel=\"nofollow\">python source code</a> :</p>\n\n<blockquote>\n  <p>Major subtleties ahead:  Most hash schemes depend on having a \"good\" hash\n  function, in the sense of simulating randomness.  Python doesn't:  its most\n  important hash functions (for strings and ints) are very regular in common\n  cases:</p>\n\n<pre><code>&gt;&gt;&gt; map(hash, (0, 1, 2, 3))\n  [0, 1, 2, 3]\n&gt;&gt;&gt; map(hash, (\"namea\", \"nameb\", \"namec\", \"named\"))\n  [-1658398457, -1658398460, -1658398459, -1658398462]\n</code></pre>\n  \n  <p>This isn't necessarily bad!  To the contrary, in a table of size 2**i, taking\n  the low-order i bits as the initial table index is extremely fast, and there\n  are no collisions at all for dicts indexed by a contiguous range of ints.\n  The same is approximately true when keys are \"consecutive\" strings.  So this\n  gives better-than-random behavior in common cases, and that's very desirable.</p>\n  \n  <p>OTOH, when collisions occur, the tendency to fill contiguous slices of the\n  hash table makes a good collision resolution strategy crucial.  Taking only\n  the last i bits of the hash code is also vulnerable:  for example, consider\n  the list <code>[i &lt;&lt; 16 for i in range(20000)]</code> as a set of keys.  <strong>Since ints are their own hash codes, and this fits in a dict of size 2**15, the last 15 bits of every hash code are all 0:  they <em>all</em> map to the same table index.</strong></p>\n  \n  <p>But catering to unusual cases should not slow the usual ones, so we just take\n  the last i bits anyway.  It's up to collision resolution to do the rest.  If\n  we <em>usually</em> find the key we're looking for on the first try (and, it turns\n  out, we usually do -- the table load factor is kept under 2/3, so the odds\n  are solidly in our favor), then it makes best sense to keep the initial index\n  computation dirt cheap.</p>\n</blockquote>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alex summarized well but, surprisingly, was too succinct.</p>\n\n<p>First, let me reiterate the main points in Alex\u2019s post:</p>\n\n<ul>\n<li>The default implementation is useless (it\u2019s hard to think of one which wouldn\u2019t be, but yeah)</li>\n<li><code>__repr__</code> goal is to be unambiguous</li>\n<li><code>__str__</code> goal is to be readable</li>\n<li>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></li>\n</ul>\n\n<p><strong>Default implementation is useless</strong></p>\n\n<p>This is mostly a surprise because Python\u2019s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>\n\n<pre><code>return \"%s(%r)\" % (self.__class__, self.__dict__)\n</code></pre>\n\n<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>\n\n<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> that\u2019s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a \u201cpretty print\u201d functionality (for example, used by a report generator).</p>\n\n<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>\n\n<p>Let me come right out and say it \u2014 I do not believe in debuggers. I don\u2019t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature \u2014 most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>\n\n<pre><code>log(INFO, \"I am in the weird function and a is\", a, \"and b is\", b, \"but I got a null C \u2014 using default\", default_c)\n</code></pre>\n\n<p>But you have to do the last step \u2014 make sure every object you implement has a useful repr, so code like that can just work. This is why the \u201ceval\u201d thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If that\u2019s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>\"MyClass(this=%r,that=%r)\" % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments \u2014 but it is a useful form to express \u201cthis is everything you need to know about this instance\u201d.</p>\n\n<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or you\u2019re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(\"3\")</code>.</p>\n\n<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>\n\n<p>Specifically, it is not intended to be unambiguous \u2014 notice that <code>str(3)==str(\"3\")</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be \"2010/4/12 15:35:22\", etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class \u2014 as long is it supports readability, it is an improvement.</p>\n\n<p><strong>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></strong></p>\n\n<p>This seems surprising, doesn\u2019t it? It is a little, but how readable would</p>\n\n<pre><code>[moshe is, 3, hello\nworld, this is a list, oh I don't know, containing just 4 elements]\n</code></pre>\n\n<p>be? Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you\u2019re printing a list, just</p>\n\n<pre><code>print \"[\"+\", \".join(l)+\"]\"\n</code></pre>\n\n<p>(you can probably also figure out what to do about dictionaries.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of more readability in favor of more ambiguity.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Unless you specifically act to ensure otherwise, most classes don't have helpful results for either:</p>\n\n<pre><code>&gt;&gt;&gt; class Sic(object): pass\n... \n&gt;&gt;&gt; print str(Sic())\n&lt;__main__.Sic object at 0x8b7d0&gt;\n&gt;&gt;&gt; print repr(Sic())\n&lt;__main__.Sic object at 0x8b7d0&gt;\n&gt;&gt;&gt;\n</code></pre>\n\n<p>As you see -- no difference, and no info beyond the class and object's <code>id</code>.  If you only override one of the two...:</p>\n\n<pre><code>&gt;&gt;&gt; class Sic(object): \n...   def __repr__(object): return 'foo'\n... \n&gt;&gt;&gt; print str(Sic())\nfoo\n&gt;&gt;&gt; print repr(Sic())\nfoo\n&gt;&gt;&gt; class Sic(object):\n...   def __str__(object): return 'foo'\n... \n&gt;&gt;&gt; print str(Sic())\nfoo\n&gt;&gt;&gt; print repr(Sic())\n&lt;__main__.Sic object at 0x2617f0&gt;\n&gt;&gt;&gt;\n</code></pre>\n\n<p>as you see, if you override <code>__repr__</code>, that's ALSO used for <code>__str__</code>, but not vice versa.</p>\n\n<p>Other crucial tidbits to know: <code>__str__</code> on a built-on container uses the <code>__repr__</code>, NOT the <code>__str__</code>, for the items it contains. And, despite the words on the subject found in typical docs, hardly anybody bothers making the <code>__repr__</code> of objects be a string that <code>eval</code> may use to build an equal object (it's just too hard, AND not knowing how the relevant module was actually imported makes it actually flat out impossible).</p>\n\n<p>So, my advice: focus on making <code>__str__</code> reasonably human-readable, and <code>__repr__</code> as unambiguous as you possibly can, even if that interferes with the fuzzy unattainable goal of making <code>__repr__</code>'s returned value acceptable as input to <code>__eval__</code>!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My rule of thumb:  <code>__repr__</code> is for developers, <code>__str__</code> is for customers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><code>__repr__</code></strong>: representation of python object usually eval will convert it back to that object</p>\n\n<p><strong><code>__str__</code></strong>: is whatever you think is that object in text form</p>\n\n<p>e.g.</p>\n\n<pre><code>&gt;&gt;&gt; s=\"\"\"w'o\"w\"\"\"\n&gt;&gt;&gt; repr(s)\n'\\'w\\\\\\'o\"w\\''\n&gt;&gt;&gt; str(s)\n'w\\'o\"w'\n&gt;&gt;&gt; eval(str(s))==s\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    w'o\"w\n       ^\nSyntaxError: EOL while scanning single-quoted string\n&gt;&gt;&gt; eval(repr(s))==s\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>In short, the goal of <code>__repr__</code> is to be unambiguous and <code>__str__</code> is to be\n  readable.</p>\n</blockquote>\n\n<p>Here is a good example:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; today = datetime.datetime.now()\n&gt;&gt;&gt; str(today)\n'2012-03-14 09:21:58.130922'\n&gt;&gt;&gt; repr(today)\n'datetime.datetime(2012, 3, 14, 9, 21, 58, 130922)'\n</code></pre>\n\n<p>Read this documentation for repr:</p>\n\n<blockquote>\n  <p><code>repr(object)</code></p>\n  \n  <p>Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse\n  quotes). It is sometimes useful to be able to access this operation as\n  an ordinary function. For many types, this function makes an attempt\n  to return a string that would yield an object with the same value when\n  passed to <code>eval()</code>, otherwise the representation is a string enclosed in\n  angle brackets that contains the name of the type of the object\n  together with additional information often including the name and\n  address of the object. A class can control what this function returns\n  for its instances by defining a <code>__repr__()</code> method.</p>\n</blockquote>\n\n<p>Here is the documentation for str:</p>\n\n<blockquote>\n  <p><code>str(object='')</code></p>\n  \n  <p>Return a string containing a nicely printable\n  representation of an object. For strings, this returns the string\n  itself. The difference with <code>repr(object)</code> is that <code>str(object)</code> does not\n  always attempt to return a string that is acceptable to <code>eval()</code>; its\n  goal is to return a printable string. If no argument is given, returns\n  the empty string, <code>''</code>.</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am aiming for a readable and canonical answer for this question:</p>\n\n<blockquote>\n  <p><strong>What is the difference between __str__ and __repr__ in Python?</strong></p>\n</blockquote>\n\n<p>If you print an object, or pass it to format or str.format, or coerce it to a string, <code>__str__</code> will be used if it is defined, otherwise, <code>__repr__</code> will be used. </p>\n\n<p><code>__repr__</code> is called by <code>repr</code> and is what is echoed on your python shell when it evaluates an expression that returns an object. Here's the builtin help on <code>repr</code>:</p>\n\n<pre><code>repr(...)\n    repr(object) -&gt; string\n\n    Return the canonical string representation of the object.\n    For most object types, eval(repr(object)) == object.\n</code></pre>\n\n<p>That is, for most objects, if you type in what is printed by <code>repr</code>, you should be able to create an equivalent object. But this is not the default implementation.</p>\n\n<h3>Default Implementation of <code>__repr__</code></h3>\n\n<p>The default object <code>__repr__</code> is (<a href=\"https://hg.python.org/cpython/file/2.7/Objects/object.c#l377\" rel=\"nofollow\">C Python source</a>) something like:</p>\n\n<pre><code>def __repr__(self):\n    return '&lt;{0}.{1} object at {2}&gt;'.format(\n      self.__module__, type(self).__name__, hex(id(self)))\n</code></pre>\n\n<p>That means by default you'll print the module the object is from, the class name, and the hexadecimal representation of its location in memory - for example:</p>\n\n<pre><code>&lt;__main__.Foo object at 0x7f80665abdd0&gt;\n</code></pre>\n\n<h3>How can <code>__repr__</code> be useful?</h3>\n\n<p>Let's look at how useful it can be, using the Python shell and <code>datetime</code> objects. First we need to import the <code>datetime</code> module:</p>\n\n<pre><code>import datetime\n</code></pre>\n\n<p>If we call <code>datetime.now</code> in the shell, we'll see everything we need to recreate an equivalent datetime object. This is created by the datetime <code>__repr__</code>:</p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime.now()\ndatetime.datetime(2015, 1, 24, 20, 5, 36, 491180)\n</code></pre>\n\n<p>If we print a datetime object, we see a nice human readable (in fact, ISO) format. This is implemented by datetime's <code>__str__</code>:</p>\n\n<pre><code>&gt;&gt;&gt; print(datetime.datetime.now())\n2015-01-24 20:05:44.977951\n</code></pre>\n\n<p>It is a simple matter to recreate the object we lost because we didn't assign it to a variable by copying and pasting from the <code>__repr__</code> output, and then printing it, and we get it in the same human readable output as the other object:</p>\n\n<pre><code>&gt;&gt;&gt; the_past = datetime.datetime(2015, 1, 24, 20, 5, 36, 491180)\n&gt;&gt;&gt; print(the_past)\n2015-01-24 20:05:36.491180\n</code></pre>\n\n<h3>How do I implement them?</h3>\n\n<p>As you're developing, you'll want to be able to reproduce objects in the same state, if possible. This, for example, is how the datetime object defines <code>__repr__</code> (<a href=\"https://hg.python.org/cpython/file/3.4/Lib/datetime.py#l1570\" rel=\"nofollow\">Python source</a>). It is fairly complex, because of all of the attributes needed to reproduce such an object:</p>\n\n<pre><code>def __repr__(self):\n    \"\"\"Convert to formal string, for repr().\"\"\"\n    L = [self._year, self._month, self._day, # These are never zero\n         self._hour, self._minute, self._second, self._microsecond]\n    if L[-1] == 0:\n        del L[-1]\n    if L[-1] == 0:\n        del L[-1]\n    s = \", \".join(map(str, L))\n    s = \"%s(%s)\" % ('datetime.' + self.__class__.__name__, s)\n    if self._tzinfo is not None:\n        assert s[-1:] == \")\"\n        s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n    return s\n</code></pre>\n\n<p>If you want your object to have a more human readable representation, you can implement <code>__str__</code> next. Here's how the datetime object (<a href=\"https://hg.python.org/cpython/file/3.4/Lib/datetime.py#l1585\" rel=\"nofollow\">Python source</a>) implements <code>__str__</code>, which it easily does because it already has a function to display it in ISO format:</p>\n\n<pre><code>def __str__(self):\n    \"Convert to string, for str().\"\n    return self.isoformat(sep=' ')\n</code></pre>\n\n<h3>Summary</h3>\n\n<p>Define <code>__repr__</code> for objects you write so you and other developers have a reproducible example when using it as you develop. Define <code>__str__</code> when you need a human readable string representation of it. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In all honesty, <code>eval(repr(obj))</code> is never used. If you find yourself using it, you should stop, because <code>eval</code> is dangerous, and strings are a very inefficient way to serialize your objects (use <code>pickle</code> instead). </p>\n\n<p>Therefore, I would recommend setting <code>__repr__ = __str__</code>. The reason is that <code>str(list)</code> calls <code>repr</code> on the elements (I consider this to be one of the biggest design flaws of Python that was not addressed by Python 3). An actual <code>repr</code> will probably not be very helpful as the output of <code>print [your, objects]</code>. </p>\n\n<p>To qualify this, in my experience, the most useful use case of the <code>repr</code> function is to put a string inside another string (using string formatting). This way, you don't have to worry about escaping quotes or anything. But note that there is no <code>eval</code> happening here. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://pyref.infogami.com/%5F%5Fstr%5F%5F\" rel=\"nofollow\">http://pyref.infogami.com/%5F%5Fstr%5F%5F</a> by effbot:</p>\n\n<p><code>__str__</code> \"computes the \"informal\" string representation of an object. This differs from <code>__repr__</code> in that it does not have to be a valid Python expression: a more convenient or concise representation may be used instead.\"</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; print(decimal.Decimal(23) / decimal.Decimal(\"1.05\"))\n21.90476190476190476190476190\n&gt;&gt;&gt; decimal.Decimal(23) / decimal.Decimal(\"1.05\")\nDecimal('21.90476190476190476190476190')\n</code></pre>\n\n<p>When print() is called on the result of decimal.Decimal(23) / deci- mal.Decimal(\"1.05\") the raw number is printed; this output is in <strong>string form</strong> which can be achieved with __str __(). If we simply enter the expression we get a decimal.Decimal output\u2014this output is in <strong>representational form</strong> which can be achieved with __repr __(). All Python objects have two output forms. String form is designed to be human-readable. Representational form is designed to produce output that if fed to a Python interpreter would (when possible) re- produce the represented object</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Excellent answers are already cover the difference between <code>__str__</code> and <code>__repr__</code>, which for me boils down to the latter bing readable even by an end user, and the former being as useful as possible to developers. Given that, I find that the default implementation of <code>__repr__</code> often fails to achieve this goal because it <em>omits</em> information useful to developers.</p>\n\n<p>For this reason, if I have a simple enough <code>__str__</code>, I generally just try to get the best of both worlds with something like:</p>\n\n<pre><code>def __repr__(self):\n    return '{0} ({1})'.format(object.__repr__(self), str(self))\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, it was <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\">added</a> in version 2.5.\nThe syntax is:</p>\n\n<pre><code>a if test else b\n</code></pre>\n\n<p>First <code>test</code> is evaluated, then either <code>a</code> or <code>b</code> is returned based on the <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\">Boolean</a> value of <code>test</code>;<br>\nif <code>test</code> evaluates to <em>True</em> <code>a</code> is returned, else <code>b</code> is returned. </p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; 'true' if True else 'false'\n'true'\n&gt;&gt;&gt; 'true' if False else 'false'\n'false'\n</code></pre>\n\n<p>Keep in mind that it's frowned upon by some Pythonistas for:</p>\n\n<ul>\n<li>The order of the arguments is different from many other languages (such as C, Ruby, Java, etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour (they may reverse the order).</li>\n<li>Some find it \"unwieldy\", since it goes against the flow of thought; you think of the condition first and then the effects.</li>\n<li>Stylistic reasons.</li>\n</ul>\n\n<p>If you're having trouble remembering the order (as many seem to do), then remember that if you read it out loud, you (almost) say what you mean <code>x = 4 if b &gt; 8 else 9</code> is read out loud as  <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n\n<p>Official documentation:</p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\">Conditional expressions</a></li>\n<li><a href=\"https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\">Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can index into a tuple:</p>\n\n<pre><code>(falseValue, trueValue)[test]\n</code></pre>\n\n<p><code>test</code> needs to return <em>True</em> or <em>False</em>.<br>\nIt might be safer to always implement it as:</p>\n\n<pre><code>(falseValue, trueValue)[test == True]\n</code></pre>\n\n<p>or you can use the built-in <a href=\"https://docs.python.org/3.3/library/functions.html#bool\"><code>bool()</code></a> to assure a <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\">Boolean</a> value:</p>\n\n<pre><code>(falseValue, trueValue)[bool(&lt;expression&gt;)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For versions prior to 2.5, there's the trick:</p>\n\n<pre><code>[expression] and [on_true] or [on_false]\n</code></pre>\n\n<p>It can give wrong results when <code>on_true</code> \n has a false boolean value.<sup>1</sup><br>\nAlthough it does have the benefit of evaluating expressions left to right, which is clearer in my opinion.</p>\n\n<p><sub>1. <a href=\"http://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\">Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?</a></sub></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"nofollow\" title=\"Conditional expressions\">the documentation</a>:</p>\n\n<blockquote>\n  <p>Conditional expressions (sometimes called a \u201cternary operator\u201d) have the lowest priority of all Python operations.</p>\n  \n  <p>The expression <code>x if C else y</code> first evaluates the condition, <em>C</em> (<em>not x</em>); if <em>C</em> is true, <em>x</em> is evaluated and its value is returned; otherwise, <em>y</em> is evaluated and its value is returned.</p>\n  \n  <p>See <a href=\"https://www.python.org/dev/peps/pep-0308/\" rel=\"nofollow\" title=\"PEP 308 -- Conditional Expressions\">PEP 308</a> for more details about conditional expressions.</p>\n</blockquote>\n\n<p>New since version 2.5.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>expression1</em> if <em>condition</em> else <em>expression2</em></p>\n\n<pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; b = 2\n&gt;&gt;&gt; 1 if a &gt; b else -1 \n-1\n&gt;&gt;&gt; 1 if a &gt; b else -1 if a &lt; b else 0\n-1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>@up:</p>\n\n<p>Unfortunately, the</p>\n\n<pre><code>(falseValue, trueValue)[test]\n</code></pre>\n\n<p>solution doesn't have short-circuit behaviour; thus both falseValue and trueValue are evaluated regardless of the condition. This could be suboptimal or even buggy (i.e. both trueValue and falseValue could be methods and have side-effects).</p>\n\n<p>One solution to this would be</p>\n\n<pre><code>(falseValue, trueValue)[test]()\n</code></pre>\n\n<p>(execution delayed until the winner is known ;)), but it introduces inconsistency between callable and non-callable objects. In addition, it doesn't solve the case when using properties.</p>\n\n<p>And so the story goes - choosing between 3 mentioned solutions is a trade-off between having the short-circuit feature, using at least python 2.5 (IMHO not a problem anymore) and not being prone to \"trueValue-evaluates-to-false\" errors.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For Python 2.5 and newer there is a specific syntax:</p>\n\n<pre><code>[on_true] if [cond] else [on_false]\n</code></pre>\n\n<p>In older Pythons a ternary operator is not implemented but it's possible to simulate it.</p>\n\n<pre><code>cond and on_true or on_false\n</code></pre>\n\n<p>Though, there is a potential problem, which if <code>cond</code> evaluates to <code>True</code> and <code>on_true</code> evaluates to <code>False</code> then <code>on_false</code> is returned instead of <code>on_true</code>. If you want this behavior the method is OK, otherwise use this:</p>\n\n<pre><code>{True: on_true, False: on_false}[cond is True] # is True, not == True\n</code></pre>\n\n<p>which can be wrapped by:</p>\n\n<pre><code>def q(cond, on_true, on_false)\n    return {True: on_true, False: on_false}[cond is True]\n</code></pre>\n\n<p>and used this way:</p>\n\n<pre><code>q(cond, on_true, on_false)\n</code></pre>\n\n<p>It is compatible with all Python versions.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An operator for a conditional expression in Python was added in 2006 as part of <a href=\"https://www.python.org/dev/peps/pep-0308/\">Python Enhancement Proposal 308</a>. Its form differ from common <code>?:</code> operator and it's:</p>\n\n<pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;\n</code></pre>\n\n<p>which is equivalent to:</p>\n\n<pre><code>if &lt;condition&gt;: &lt;expression1&gt; else: &lt;expression2&gt;\n</code></pre>\n\n<p>Here is example:</p>\n\n<pre><code>result = x if a &gt; b else y\n</code></pre>\n\n<p>Another syntax which can be used (compatible with versions before 2.5):</p>\n\n<pre><code>result = (lambda:y, lambda:x)[a &gt; b]()\n</code></pre>\n\n<p>where operands are <a href=\"https://en.wikipedia.org/wiki/Lazy_evaluation\">lazily evaluated</a>.</p>\n\n<p>Another way is by indexing a tuple (which isn't consistent with the conditional operator of most other languages):</p>\n\n<pre><code>result = (y, x)[a &gt; b]\n</code></pre>\n\n<p>or explicitly constructed dictionary:</p>\n\n<pre><code>result = {True: x, False: y}[a &gt; b]\n</code></pre>\n\n<p>Another (less reliable), but simpler method is to use <code>and</code> and <code>or</code> operators:</p>\n\n<pre><code>result = (a &gt; b) and x or y\n</code></pre>\n\n<p>however this won't work if <code>x</code> would be <code>False</code>.</p>\n\n<p>As possible workaround is to make <code>x</code> and <code>y</code> lists or tuples as in the following:</p>\n\n<pre><code>result = ((a &gt; b) and [x] or [y])[0]\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>result = ((a &gt; b) and (x,) or (y,))[0]\n</code></pre>\n\n<p>If you're working with dictionaries, instead of using a ternary conditional, you can take advantage of <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.get\"><code>get(key, default)</code></a>, for example:</p>\n\n<pre><code>shell = os.environ.get('SHELL', \"/bin/sh\")\n</code></pre>\n\n<p><sup>Source: <a href=\"https://en.wikipedia.org/wiki/%3F:#Python\">?: in Python at Wikipedia</a></sup></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You might often find</p>\n\n<pre><code>cond and on_true or on_false\n</code></pre>\n\n<p>but this lead to problem when on_true == 0</p>\n\n<pre><code>&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; print x == 0 and 0 or 1 \n1\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print x == 0 and 0 or 1 \n1\n</code></pre>\n\n<p>where you would expect for a  normal ternary operator this result</p>\n\n<pre><code>&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; print 0 if x == 0 else 1 \n0\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; print 0 if x == 0 else 1 \n1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Simulating the python ternary operator.</p>\n\n<p>For example</p>\n\n<pre><code>a, b, x, y = 1, 2, 'a greather than b', 'b greater than a'\nresult = (lambda:y, lambda:x)[a &gt; b]()\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>'b greater than a'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Absolutely, and it is incredibly easy to understand. </p>\n\n<pre><code>general syntax : first_expression if bool_expression== true else second_expression\n\nExample: x= 3 if 3 &gt; 2 else 4 \n# assigns 3 to x if the boolean expression evaluates to true or 4 if it is false\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>In [1]: a = 1 if False else 0\n\nIn [2]: a\nOut[2]: 0\n\nIn [3]: b = 1 if True else 0\n\nIn [4]: b\nOut[4]: 1\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>\n\n<ul>\n<li>the thread is holding a critical resource that must be closed properly</li>\n<li>the thread has created several other threads that must be killed as well.</li>\n</ul>\n\n<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for him to exit.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>import threading\n\nclass StoppableThread(threading.Thread):\n    \"\"\"Thread class with a stop() method. The thread itself has to check\n    regularly for the stopped() condition.\"\"\"\n\n    def __init__(self):\n        super(StoppableThread, self).__init__()\n        self._stop = threading.Event()\n\n    def stop(self):\n        self._stop.set()\n\n    def stopped(self):\n        return self._stop.isSet()\n</code></pre>\n\n<p>In this code, you should call stop() on the thread when you want it to exit, and wait for the thread to exit properly using join(). The thread should check the stop flag at regular intervals.</p>\n\n<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>\n\n<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>\n\n<pre><code>def _async_raise(tid, exctype):\n    '''Raises an exception in the threads with id tid'''\n    if not inspect.isclass(exctype):\n        raise TypeError(\"Only types can be raised (not instances)\")\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,\n                                                  ctypes.py_object(exctype))\n    if res == 0:\n        raise ValueError(\"invalid thread id\")\n    elif res != 1:\n        # \"if it returns a number greater than one, you're in trouble,\n        # and you should call it again with exc=NULL to revert the effect\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\nclass ThreadWithExc(threading.Thread):\n    '''A thread class that supports raising exception in the thread from\n       another thread.\n    '''\n    def _get_my_tid(self):\n        \"\"\"determines this (self's) thread id\n\n        CAREFUL : this function is executed in the context of the caller\n        thread, to get the identity of the thread represented by this\n        instance.\n        \"\"\"\n        if not self.isAlive():\n            raise threading.ThreadError(\"the thread is not active\")\n\n        # do we have it cached?\n        if hasattr(self, \"_thread_id\"):\n            return self._thread_id\n\n        # no, look for it in the _active dict\n        for tid, tobj in threading._active.items():\n            if tobj is self:\n                self._thread_id = tid\n                return tid\n\n        # TODO: in python 2.6, there's a simpler way to do : self.ident\n\n        raise AssertionError(\"could not determine the thread's id\")\n\n    def raiseExc(self, exctype):\n        \"\"\"Raises the given exception type in the context of this thread.\n\n        If the thread is busy in a system call (time.sleep(),\n        socket.accept(), ...), the exception is simply ignored.\n\n        If you are sure that your exception should terminate the thread,\n        one way to ensure that it works is:\n\n            t = ThreadWithExc( ... )\n            ...\n            t.raiseExc( SomeException )\n            while t.isAlive():\n                time.sleep( 0.1 )\n                t.raiseExc( SomeException )\n\n        If the exception is to be caught by the thread, you need a way to\n        check that your thread has caught it.\n\n        CAREFUL : this function is executed in the context of the\n        caller thread, to raise an excpetion in the context of the\n        thread represented by this instance.\n        \"\"\"\n        _async_raise( self._get_my_tid(), exctype )\n</code></pre>\n\n<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>\n\n<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is no official API to do that, no.</p>\n\n<p>You need to use platform API to kill the thread, e.g. pthread_kill, or TerminateThread. You can access such API e.g. through pythonwin, or through ctypes.</p>\n\n<p>Notice that this is inherently unsafe. It will likely lead to uncollectable garbage (from local variables of the stack frames that become garbage), and may lead to deadlocks, if the thread being killed has the GIL at the point when it is killed.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are trying to terminate the whole program you can set the thread as a \"daemon\". see\n<a href=\"http://docs.python.org/library/threading.html#threading.Thread.daemon\">Thread.daemon</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A <code>multiprocessing.Process</code> can <code>p.terminate()</code></p>\n\n<p>In the cases where I want to kill a thread, but do not want to use flags/locks/signals/semaphores/events/whatever, I promote the threads to full blown processes. For code that makes use of just a few threads the overhead is not that bad.</p>\n\n<p>E.g. this comes in handy to easily terminate helper \"threads\" which execute blocking I/O</p>\n\n<p>The conversion is trivial: In related code replace all <code>threading.Thread</code> with <code>multiprocessing.Process</code> and all <code>queue.Queue</code> with <code>multiprocessing.Queue</code> and add the required calls of <code>p.terminate()</code> to your parent process which wants to kill its child <code>p</code></p>\n\n<p><a href=\"http://docs.python.org/release/3.1.3/library/multiprocessing.html\">Python doc</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should never forcibly kill a thread without cooperating with it.</p>\n\n<p>Killing a thread removes any guarantees that try/finally blocks set up so you might leave locks locked, files open, etc.</p>\n\n<p>The only time you can argue that forcibly killing threads is a good idea is to kill a program fast, but never single threads.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is based on <a href=\"http://code.activestate.com/recipes/496960-thread2-killable-threads/\">http://code.activestate.com/recipes/496960-thread2-killable-threads/</a></p>\n\n<p>You need to call PyThreadState_SetasyncExc(), which is only available through ctypes.</p>\n\n<p>This has only been tested on Python 2.7.3, but it is likely to work with other recent 2.x releases.</p>\n\n<pre><code>import ctypes\n\ndef terminate_thread(thread):\n    \"\"\"Terminates a python thread from another thread.\n\n    :param thread: a threading.Thread instance\n    \"\"\"\n    if not thread.isAlive():\n        return\n\n    exc = ctypes.py_object(SystemExit)\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(\n        ctypes.c_long(thread.ident), exc)\n    if res == 0:\n        raise ValueError(\"nonexistent thread id\")\n    elif res &gt; 1:\n        # \"\"\"if it returns a number greater than one, you're in trouble,\n        # and you should call it again with exc=NULL to revert the effect\"\"\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(thread.ident, None)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is better if you don't kill a thread.\nA way could be to introduce a \"try\" block into the thread's cycle and to throw an exception when you want to stop the thread (for example a break/return/... that stops your for/while/...). \nI've used this on my app and it works...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can kill a thread by installing trace into the thread that will exit the thread.   See attached link for one possible implementation.</p>\n\n<p><a href=\"https://web.archive.org/web/20130503082442/http://mail.python.org/pipermail/python-list/2004-May/281943.html\" rel=\"nofollow\">Kill a thread in Python</a> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>This is a bad answer, see the comments</strong></p>\n</blockquote>\n\n<p>Here's how to do it:</p>\n\n<pre><code>from threading import *\n\n...\n\nfor thread in enumerate():\n    if thread.isAlive():\n        try:\n            thread._Thread__stop()\n        except:\n            print(str(thread.getName()) + ' could not be terminated'))\n</code></pre>\n\n<p>Give it a few seconds then your thread should be stopped. Check also the <code>thread._Thread__delete()</code> method.</p>\n\n<p>I'd recommend a <code>thread.quit()</code> method for convenience. For example if you have a socket in your thread, I'd recommend creating a <code>quit()</code> method in your socket-handle class, terminate the socket, then run a <code>thread._Thread__stop()</code> inside of your <code>quit()</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python, you simply cannot kill a Thread directly.</p>\n\n<p>If you do NOT really need to have a Thread (!), what you can do, instead of using the <em>threading</em> package (<a href=\"http://docs.python.org/2/library/threading.html\">http://docs.python.org/2/library/threading.html</a>), is to use the <em>multiprocessing</em> package (<a href=\"http://docs.python.org/2/library/multiprocessing.html\">http://docs.python.org/2/library/multiprocessing.html</a>). Here, to kill a process, you can simply call the method:</p>\n\n<pre><code>yourProcess.terminate()  # kill the process!\n</code></pre>\n\n<p>Python will kill your process (on Unix through the SIGTERM signal, while on Windows through the TerminateProcess() call). Pay attention to use it while using a Queue or a Pipe! (it may corrupt the data in the Queue/Pipe)</p>\n\n<p>Note that the <em>multiprocessing.Event</em> and the <em>multiprocessing.Semaphore</em> work exactly in the same way of the <em>threading.Event</em> and the <em>threading.Semaphore</em> respectively. In fact, the first ones are clones of the latters.</p>\n\n<p>If you REALLY need to use a Thread, there is no way to kill it directly. What you can do, however, is to use a <em>\"daemon thread\"</em>. In fact, in Python, a Thread can be flagged as <em>daemon</em>:</p>\n\n<pre><code>yourThread.daemon = True  # set the Thread as a \"daemon thread\"\n</code></pre>\n\n<p>The main program will exit when no alive non-daemon threads are left. In other words, when your main thread (which is, of course, a non-daemon thread) will finish its operations, the program will exit even if there are still some daemon threads working.</p>\n\n<p>Note that it is necessary to set a Thread as <em>daemon</em> before the <em>start()</em> method is called!</p>\n\n<p>Of course you can, and should, use <em>daemon</em> even with <em>multiprocessing</em>. Here, when the main process exits, it attempts to terminate all of its daemonic child processes.</p>\n\n<p>Finally, please, note that <em>sys.exit()</em> and <em>os.kill()</em> are not choices.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>      from ctypes import *\n      pthread = cdll.LoadLibrary(\"libpthread-2.15.so\")\n      pthread.pthread_cancel(c_ulong(t.ident))\n</code></pre>\n\n<p><strong>t</strong> is your <code>Thread</code> object.</p>\n\n<p>Read the python source (<code>Modules/threadmodule.c</code> and <code>Python/thread_pthread.h</code>) you can see the <code>Thread.ident</code> is an <code>pthread_t</code> type, so you can do anything <code>pthread</code> can do in python use <code>libpthread</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is definitely possible to implement a <code>Thread.stop</code> method as shown in the following example code:</p>\n\n<pre><code>import sys\nimport threading\nimport time\n\n\nclass StopThread(StopIteration):\n    pass\n\nthreading.SystemExit = SystemExit, StopThread\n\n\nclass Thread2(threading.Thread):\n\n    def stop(self):\n        self.__stop = True\n\n    def _bootstrap(self):\n        if threading._trace_hook is not None:\n            raise ValueError('Cannot run thread with tracing!')\n        self.__stop = False\n        sys.settrace(self.__trace)\n        super()._bootstrap()\n\n    def __trace(self, frame, event, arg):\n        if self.__stop:\n            raise StopThread()\n        return self.__trace\n\n\nclass Thread3(threading.Thread):\n\n    def _bootstrap(self, stop_thread=False):\n        def stop():\n            nonlocal stop_thread\n            stop_thread = True\n        self.stop = stop\n\n        def tracer(*_):\n            if stop_thread:\n                raise StopThread()\n            return tracer\n        sys.settrace(tracer)\n        super()._bootstrap()\n\n###############################################################################\n\n\ndef main():\n    test1 = Thread2(target=printer)\n    test1.start()\n    time.sleep(1)\n    test1.stop()\n    test1.join()\n    test2 = Thread2(target=speed_test)\n    test2.start()\n    time.sleep(1)\n    test2.stop()\n    test2.join()\n    test3 = Thread3(target=speed_test)\n    test3.start()\n    time.sleep(1)\n    test3.stop()\n    test3.join()\n\n\ndef printer():\n    while True:\n        print(time.time() % 1)\n        time.sleep(0.1)\n\n\ndef speed_test(count=0):\n    try:\n        while True:\n            count += 1\n    except StopThread:\n        print('Count =', count)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>The <code>Thread3</code> class appears to run code approximately 33% faster than the <code>Thread2</code> class.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One thing I want to add is that if you read official documentation in <a href=\"https://docs.python.org/2/library/threading.html\" rel=\"nofollow\">threading lib Python</a>, it's recommended to avoid use of \"demonic\" threads, when you don't want threads end abruptly, with the flag that Paolo Rovelli <a href=\"http://stackoverflow.com/a/15185771\">mentioned</a>.</p>\n\n<p>From official documentation:</p>\n\n<blockquote>\n  <p>Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signaling mechanism such as an Event.</p>\n</blockquote>\n\n<p>I think that creating daemonic threads depends of your application, but in general (and in my opinion) it's better to avoid killing them or making them daemonic. In multiprocessing you can use <code>is_alive()</code> to check process status  and \"terminate\" for finish them (Also you avoid GIL problems). But you can find more problems, sometimes, when you execute your code in Windows.</p>\n\n<p>And always remember that if you have \"live threads\", the Python interpreter will be running for wait them. (Because of this daemonic can help you if don't matter abruptly ends).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As others have mentioned, the norm is to set a stop flag. For something lightweight (no subclassing of Thread, no global variable), a lambda callback is an option. (Note the parentheses in <code>if stop()</code>.)</p>\n\n<pre><code>import threading\nimport time\n\ndef do_work(id, stop):\n    print(\"I am thread\", id)\n    while True:\n        print(\"I am thread {} doing something\".format(id))\n        if stop():\n            print(\"  Exiting loop.\")\n            break\n    print(\"Thread {}, signing off\".format(id))\n\n\ndef main():\n    stop_threads = False\n    workers = []\n    for id in range(0,3):\n        tmp = threading.Thread(target=do_work, args=(id, lambda: stop_threads))\n        workers.append(tmp)\n        tmp.start()\n    time.sleep(3)\n    print('main: done sleeping; time to stop the threads.')\n    stop_threads = True\n    for worker in workers:\n        worker.join()\n    print('Finis.')\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>Replacing <code>print()</code> with a <code>pr()</code> function that always flushes (<code>sys.stdout.flush()</code>) may improve the precision of the shell output.</p>\n\n<p>(Only tested on Windows/Eclipse/Python3.3)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think this is a pretty neat solution: <a href=\"http://code.activestate.com/recipes/496960-thread2-killable-threads/\" rel=\"nofollow\">http://code.activestate.com/recipes/496960-thread2-killable-threads/</a></p>\n\n<p>It allows a \"thread to raise exceptions in the context of another thread\". In this way, the terminated thread can handle the termination without regularly checking an abbort flag.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you really need the ability to kill a thread, use an alternate threading implementation. <code>multiprocessing</code> and <code>gevent</code> support killing a thread.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This seems to work with pywin32 on windows 7</p>\n\n<pre><code>my_thread = threading.Thread()\nmy_thread.start()\nmy_thread._Thread__stop()\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're modifying the list you're iterating over, which is bound to result in some unintuitive behavior. Instead, make a copy of the list so you don't remove elements from what you're iterating through.</p>\n\n<pre><code>for char in textlist[:]: #shallow copy of the list\n    # etc\n</code></pre>\n\n<hr>\n\n<p>To clarify the behavior you're seeing, check this out. Put <code>print char, textlist</code> at the beginning of your (original) loop. You'd expect, perhaps, that this would print out your string vertically, alongside the list, but what you'll actually get is this:</p>\n\n<pre><code>H ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\ne ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n  ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # !\nl ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\no ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nk ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # Problem!!\n  ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nW ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\no ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] \nd ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\ns ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n! ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nHy lk Words!\n</code></pre>\n\n<p>So what's going on? The nice <code>for x in y</code> loop in Python is really just syntactic sugar: it still accesses list elements by index. So when you remove elements from the list while iterating over it, you start skipping values (as you can see above). As a result, you never see the second <code>o</code> in <code>\"look\"</code>; you skip over it because the index has advanced \"past\" it when you deleted the previous element. Then, when you get to the <code>o</code> in <code>\"Words\"</code>, you go to remove the first occurrence of <code>'o'</code>, which is the one you skipped before.</p>\n\n<hr>\n\n<p>As others have mentioned, list comprehensions are probably an even better (cleaner, clearer) way to do this. Make use of the fact that Python strings are iterable:</p>\n\n<pre><code>def remove_vowels(text): # function names should start with verbs! :)\n    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Other answers tell you why <code>for</code> skips items as you alter the list. This answer tells you how you should remove characters in a string without an explicit loop, instead.</p>\n\n<p>Use <a href=\"http://docs.python.org/2/library/stdtypes.html#str.translate\" rel=\"nofollow\"><code>str.translate()</code></a>:</p>\n\n<pre><code>vowels = 'aeiou'\nvowels += vowels.upper()\ntext.translate(None, vowels)\n</code></pre>\n\n<p>This deletes all characters listed in the second argument.</p>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; text = \"Hey look Words!\"\n&gt;&gt;&gt; vowels = 'aeiou'\n&gt;&gt;&gt; vowels += vowels.upper()\n&gt;&gt;&gt; text.translate(None, vowels)\n'Hy lk Wrds!'\n&gt;&gt;&gt; text = 'The Quick Brown Fox Jumps Over The Lazy Fox'\n&gt;&gt;&gt; text.translate(None, vowels)\n'Th Qck Brwn Fx Jmps vr Th Lzy Fx'\n</code></pre>\n\n<p>In Python 3, the <code>str.translate()</code> method (Python 2: <code>unicode.translate()</code>) differs in that it doesn't take a <em>deletechars</em> parameter; the first argument is a dictionary mapping Unicode ordinals (integer values) to new values instead. Use <code>None</code> for any character that needs to be deleted:</p>\n\n<pre><code># Python 3 code\nvowels = 'aeiou'\nvowels += vowels.upper()\nvowels_table = dict.fromkeys(map(ord, vowels))\ntext.translate(vowels_table)\n</code></pre>\n\n<p>You can also use the <a href=\"https://docs.python.org/3/library/stdtypes.html#str.maketrans\" rel=\"nofollow\"><code>str.maketrans()</code> static method</a> to produce that mapping:</p>\n\n<pre><code>vowels = 'aeiou'\nvowels += vowels.upper()\ntext.translate(text.maketrans('', '', vowels))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Iterate over a shallow copy of the list using <code>[:]</code>. You're modifying a list while iterating over it, this will result in some letters being missed.</p>\n\n<p>The <code>for</code> loop keeps track of index, so when you remove an item at index <code>i</code>, the next item at <code>i+1</code>th position shifts to the current index(<code>i</code>) and hence in the next iteration you'll actually pick the <code>i+2</code>th item.</p>\n\n<p>Lets take an easy example:</p>\n\n<pre><code>&gt;&gt;&gt; text = \"whoops\"\n&gt;&gt;&gt; textlist = list(text)\n&gt;&gt;&gt; textlist\n['w', 'h', 'o', 'o', 'p', 's']\nfor char in textlist:\n    if char.lower() in 'aeiou':\n        textlist.remove(char)\n</code></pre>\n\n<p><strong>Iteration 1 : Index = 0.</strong></p>\n\n<p><code>char = 'W'</code> as it is at index 0. As it doesn't satisfies that condition you'll do noting.</p>\n\n<p><strong>Iteration 2 : Index = 1.</strong></p>\n\n<p><code>char = 'h'</code> as it is at index 1. Nothing more to do here.</p>\n\n<p><strong>Iteration 3 : Index = 2.</strong></p>\n\n<p><code>char = 'o'</code> as it is at index 2. As this item satisfies the condition so it'll be removed from the list and all the items to it's right will shift one place to the left to fill the gap.</p>\n\n<p>now <code>textlist</code> becomes :</p>\n\n<pre><code>   0    1    2    3    4\n`['w', 'h', 'o', 'p', 's']`\n</code></pre>\n\n<p>As you can see the other <code>'o'</code> moved to index 2, i.e the current index so it'll be skipped in the next iteration. So, this is the reason some items are bring skipped in your iteration. Whenever you remove an item the next item is skipped from the iteration.</p>\n\n<p><strong>Iteration 4 : Index = 3.</strong></p>\n\n<p><code>char = 'p'</code> as it is at index 3.</p>\n\n<p>....</p>\n\n<hr>\n\n<h1>Fix:</h1>\n\n<p>Iterate over a <strong>shallow copy</strong> of the list to fix this issue:</p>\n\n<pre><code>for char in textlist[:]:        #note the [:]\n    if char.lower() in 'aeiou':\n        textlist.remove(char)\n</code></pre>\n\n<hr>\n\n<h1>Other alternatives:</h1>\n\n<p><strong>List comprehension:</strong></p>\n\n<p>A one-liner using <code>str.join</code> and a <code>list comprehension</code>:</p>\n\n<pre><code>vowels = 'aeiou'\ntext = \"Hey look Words!\"\nreturn \"\".join([char for char in text if char.lower() not in vowels])\n</code></pre>\n\n<p><strong>regex:</strong></p>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; text = \"Hey look Words!\"\n&gt;&gt;&gt; re.sub('[aeiou]', '', text, flags=re.I)\n'Hy lk Wrds!'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're modifying the data you're iterating over. Don't do that.</p>\n\n<pre><code>''.join(x for x in textlist in x not in VOWELS)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>text = \"Hey look Words!\"\n\nprint filter(lambda x: x not in \"AaEeIiOoUu\", text)\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hy lk Wrds!\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're iterating over a list and deleting elements from it at the same time.</p>\n\n<p>First, I need to make sure you clearly understand the role of <code>char</code> in <code>for char in textlist: ...</code>.  Take the situation where we have reached the letter 'l'.  The situation is <strong>not</strong> like this:</p>\n\n<pre><code>['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                      ^\n                    char\n</code></pre>\n\n<p>There is no link between <code>char</code> and the position of the letter 'l' in the list.  If you modify <code>char</code>, the list will not be modified.  The situation is more like this:</p>\n\n<pre><code>['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                      ^\nchar = 'l'\n</code></pre>\n\n<p>Notice that I've kept the <code>^</code> symbol.  This is the hidden pointer that the code managing the <code>for char in textlist: ...</code> loop uses to keep track of its position in the loop. Every time you enter the body of the loop, the pointer is advanced, and the letter referenced by the pointer is copied into <code>char</code>.</p>\n\n<p>Your problem occurs when you have two vowels in succession.  I'll show you what happens from the point where you reach 'l'. Notice that I've also changed the word \"look\" to \"leap\", to make it clearer what's going on:</p>\n\n<p><em>advance pointer to next character ('l') and copy to <code>char</code></em></p>\n\n<pre><code>['H', 'e', 'y', ' ', 'l', 'e', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                   -&gt; ^\nchar = 'l'\n</code></pre>\n\n<p><em><code>char</code> ('l') is not a vowel, so do nothing</em></p>\n\n<p><em>advance pointer to next character ('e') and copy to <code>char</code></em></p>\n\n<pre><code>['H', 'e', 'y', ' ', 'l', 'e', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                        -&gt; ^\nchar = 'e'\n</code></pre>\n\n<p><em><code>char</code> ('e') is a vowel, so delete the first occurrence of <code>char</code> ('e')</em></p>\n\n<pre><code>['H', 'e', 'y', ' ', 'l', 'e', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                           ^\n\n['H', 'e', 'y', ' ', 'l',      'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                           ^\n\n['H', 'e', 'y', ' ', 'l',   &lt;- 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                           ^\n\n['H', 'e', 'y', ' ', 'l', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                           ^\n</code></pre>\n\n<p><em>advance pointer to next character ('p') and copy to <code>char</code></em></p>\n\n<pre><code>['H', 'e', 'y', ' ', 'l', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']\n                             -&gt; ^\nchar = 'p'\n</code></pre>\n\n<p>When you removed the 'e' all the characters after the 'e' moved one place to the left, so it was as if <code>remove</code> had advanced the pointer. The result is that you skipped past the 'a'.</p>\n\n<p>In general, you should avoid modifying lists while iterating over them.  It's better to construct a new list from scratch, and Python's list comprehensions are the perfect tool for doing this.  E.g.</p>\n\n<pre><code>print ''.join([char for char in \"Hey look Words\" if char.lower() not in \"aeiou\"])\n</code></pre>\n\n<p>But if you haven't learnt about comprehensions yet, the best way is probably:</p>\n\n<pre><code>text = \"Hey look Words!\"\n\ndef anti_vowel(text):\n\n  textlist = list(text)\n  new_textlist = []\n\n  for char in textlist:\n    if char.lower() not in 'aeiou':\n      new_textlist.append(char)\n\n    return \"\".join(new_textlist)\n\nprint anti_vowel(text)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.python.org/dev/peps/pep-0202/\" rel=\"nofollow\">List Comprehensions</a>:</p>\n\n<pre><code>vowels = 'aeiou'\ntext = 'Hey look Words!'\nresult = [char for char in text if char not in vowels]\nprint ''.join(result)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Others have already explained the issue with your code.  For your task, a generator expression is easier and less error prone.</p>\n\n<pre><code>&gt;&gt;&gt; text = \"Hey look Words!\"\n&gt;&gt;&gt; ''.join(c for c in text if c.lower() not in 'aeiou')\n'Hy lk Wrds!'\n</code></pre>\n\n<p>or </p>\n\n<pre><code>&gt;&gt;&gt; ''.join(c for c in text if c not in 'AaEeIiOoUu')\n'Hy lk Wrds!'\n</code></pre>\n\n<p>however, <code>str.translate</code> is the best way to go.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You shouldn't delete items from list you iterating through:\nBut you can make new list from the old one with list comprehension syntax. List comprehension is very useful in this situation. You can read about list comprehension <a href=\"https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow\">here</a></p>\n\n<p>So you solution will look like this:</p>\n\n<pre><code>text = \"Hey look Words!\"\n\ndef anti_vowel(text):\n    return \"\".join([char for char in list(text) if char.lower() not in 'aeiou'])\n\nprint anti_vowel(text)\n</code></pre>\n\n<p>It's pretty, isn't it :P</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try to not use the list() function on a string. It will make things a lot more complicated. </p>\n\n<p>Unlike Java, in Python, strings are considered as arrays. Then, try to use an index for loop and del keyword. </p>\n\n<pre><code>for x in range(len(string)):\n    if string[x].lower() in \"aeiou\":\n        del string[x]\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Modified from the <a href=\"http://docs.python.org/library/itertools.html#recipes\">recipes</a> section of Python's <a href=\"http://docs.python.org/library/itertools.html\">itertools</a> docs:</p>\n\n<pre><code>def grouper(iterable, n, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(*args, fillvalue=fillvalue)\n</code></pre>\n\n<p><strong>Example</strong><br>\nIn pseudocode to keep the example terse.</p>\n\n<pre><code>grouper('ABCDEFG', 3, 'x') --&gt; 'ABC' 'DEF' 'Gxx'\n</code></pre>\n\n<p><strong>Note:</strong> <code>izip_longest</code> is new to Python 2.6</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def chunker(seq, size):\n    return (seq[pos:pos + size] for pos in xrange(0, len(seq), size))\n</code></pre>\n\n<p>Simple. Easy. Fast. Works with any sequence:</p>\n\n<pre><code>text = \"I am a very, very helpful text\"\n\nfor group in chunker(text, 7):\n   print repr(group),\n# 'I am a ' 'very, v' 'ery hel' 'pful te' 'xt'\n\nprint '|'.join(chunker(text, 10))\n# I am a ver|y, very he|lpful text\n\nanimals = ['cat', 'dog', 'rabbit', 'duck', 'bird', 'cow', 'gnu', 'fish']\n\nfor group in chunker(animals, 3):\n    print group\n# ['cat', 'dog', 'rabbit']\n# ['duck', 'bird', 'cow']\n# ['gnu', 'fish']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm a fan of </p>\n\n<pre><code>chunkSize= 4\nfor i in xrange(0, len(ints), chunkSize):\n    chunk = ints[i:i+chunkSize]\n    # process chunk of size &lt;= chunkSize\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import itertools\ndef chunks(iterable,size):\n    it = iter(iterable)\n    chunk = tuple(itertools.islice(it,size))\n    while chunk:\n        yield chunk\n        chunk = tuple(itertools.islice(it,size))\n\n# though this will throw ValueError if the length of ints\n# isn't a multiple of four:\nfor x1,x2,x3,x4 in chunks(ints,4):\n    foo += x1 + x2 + x3 + x4\n\nfor chunk in chunks(ints,4):\n    foo += sum(chunk)\n</code></pre>\n\n<p>Another way:</p>\n\n<pre><code>import itertools\ndef chunks2(iterable,size,filler=None):\n    it = itertools.chain(iterable,itertools.repeat(filler,size-1))\n    chunk = tuple(itertools.islice(it,size))\n    while len(chunk) == size:\n        yield chunk\n        chunk = tuple(itertools.islice(it,size))\n\n# x2, x3 and x4 could get the value 0 if the length is not\n# a multiple of 4.\nfor x1,x2,x3,x4 in chunks2(ints,4,0):\n    foo += x1 + x2 + x3 + x4\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>from itertools import izip_longest\n\ndef chunker(iterable, chunksize, filler):\n    return izip_longest(*[iter(iterable)]*chunksize, fillvalue=filler)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Posting this as an answer since I cannot comment...</p>\n\n<p>Using map() instead of zip() fixes the padding issue in J.F. Sebastian's answer:</p>\n\n<pre><code>&gt;&gt;&gt; def chunker(iterable, chunksize):\n...   return map(None,*[iter(iterable)]*chunksize)\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; s = '1234567890'\n&gt;&gt;&gt; chunker(s, 3)\n[('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9'), ('0', None, None)]\n&gt;&gt;&gt; chunker(s, 4)\n[('1', '2', '3', '4'), ('5', '6', '7', '8'), ('9', '0', None, None)]\n&gt;&gt;&gt; chunker(s, 5)\n[('1', '2', '3', '4', '5'), ('6', '7', '8', '9', '0')]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Similar to other proposals, but not exactly identical, I like doing it this way, because it's simple and easy to read:</p>\n\n<pre><code>it = iter([1, 2, 3, 4, 5, 6, 7, 8, 9])\nfor chunk in zip(it, it, it, it):\n    print chunk\n\n&gt;&gt;&gt; (1, 2, 3, 4)\n&gt;&gt;&gt; (5, 6, 7, 8)\n</code></pre>\n\n<p>This way you won't get the last partial chunk. If you want to get <code>(9, None, None, None)</code> as last chunk, just use <code>izip_longest</code> from <code>itertools</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I needed a solution that would also work with sets and generators. I couldn't come up with anything very short and pretty, but it's quite readable at least.</p>\n\n<pre><code>def chunker(seq, size):\n    res = []\n    for el in seq:\n        res.append(el)\n        if len(res) == size:\n            yield res\n            res = []\n    if res:\n        yield res\n</code></pre>\n\n<p>List:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunker([i for i in range(10)], 3))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n</code></pre>\n\n<p>Set:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunker(set([i for i in range(10)]), 3))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n</code></pre>\n\n<p>Generator:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunker((i for i in range(10)), 3))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since nobody's mentioned it yet here's a <code>zip()</code> solution:</p>\n\n<pre><code>&gt;&gt;&gt; def chunker(iterable, chunksize):\n...     return zip(*[iter(iterable)]*chunksize)\n</code></pre>\n\n<p>It works only if your sequence's length is always divisible by the chunk size or you don't care about a trailing chunk if it isn't.</p>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; s = '1234567890'\n&gt;&gt;&gt; chunker(s, 3)\n[('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9')]\n&gt;&gt;&gt; chunker(s, 4)\n[('1', '2', '3', '4'), ('5', '6', '7', '8')]\n&gt;&gt;&gt; chunker(s, 5)\n[('1', '2', '3', '4', '5'), ('6', '7', '8', '9', '0')]\n</code></pre>\n\n<p>Or using <a href=\"http://docs.python.org/library/itertools.html\" rel=\"nofollow\">itertools.izip</a> to return an iterator instead of a list:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import izip\n&gt;&gt;&gt; def chunker(iterable, chunksize):\n...     return izip(*[iter(iterable)]*chunksize)\n</code></pre>\n\n<p>Padding can be fixed using <a href=\"http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python#312644\">@\u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5's answer</a>:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import chain, izip, repeat\n&gt;&gt;&gt; def chunker(iterable, chunksize, fillvalue=None):\n...     it   = chain(iterable, repeat(fillvalue, chunksize-1))\n...     args = [it] * chunksize\n...     return izip(*args)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using little functions and things really doesn't appeal to me; I prefer to just use slices:</p>\n\n<pre><code>data = [...]\nchunk_size = 10000 # or whatever\nchunks = [data[i:i+chunk_size] for i in xrange(0,len(data),chunk_size)]\nfor chunk in chunks:\n    ...\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If the list is large, the highest-performing way to do this will be to use a generator:</p>\n\n<pre><code>def get_chunk(iterable, chunk_size):\n    result = []\n    for item in iterable:\n        result.append(item)\n        if len(result) == chunk_size:\n            yield tuple(result)\n            result = []\n    if len(result) &gt; 0:\n        yield tuple(result)\n\nfor x in get_chunk([1,2,3,4,5,6,7,8,9,10], 3):\n    print x\n\n(1, 2, 3)\n(4, 5, 6)\n(7, 8, 9)\n(10,)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In your second method, I would advance to the next group of 4 by doing this:</p>\n\n<pre><code>ints = ints[4:]\n</code></pre>\n\n<p>However, I haven't done any performance measurement so I don't know which one might be more efficient.</p>\n\n<p>Having said that, I would usually choose the first method. It's not pretty, but that's often a consequence of interfacing with the outside world.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yet another answer, the advantages of which are:</p>\n\n<p>1) Easily understandable<br>\n2) Works on any iterable, not just sequences (some of the above answers will choke on filehandles)<br>\n3) Does not load the chunk into memory all at once<br>\n4) Does not make a chunk-long list of references to the same iterator in memory<br>\n5) No padding of fill values at the end of the list</p>\n\n<p>That being said, I haven't timed it so it might be slower than some of the more clever methods, and some of the advantages may be irrelevant given the use case.</p>\n\n<pre><code>def chunkiter(iterable, size):\n  def inneriter(first, iterator, size):\n    yield first\n    for _ in xrange(size - 1): \n      yield iterator.next()\n  it = iter(iterable)\n  while True:\n    yield inneriter(it.next(), it, size)\n\nIn [2]: i = chunkiter('abcdefgh', 3)\nIn [3]: for ii in i:                                                \n          for c in ii:\n            print c,\n          print ''\n        ...:     \n        a b c \n        d e f \n        g h \n</code></pre>\n\n<p><strong>Update:</strong><br>\nA couple of drawbacks due to the fact the inner and outer loops are pulling values from the same iterator:<br>\n1) continue doesn't work as expected in the outer loop - it just continues on to the next item rather than skipping a chunk. However, this doesn't seem like a problem as there's nothing to test in the outer loop.<br>\n2) break doesn't work as expected in the inner loop - control will wind up in the inner loop again with the next item in the iterator. To skip whole chunks, either wrap the inner iterator (ii above) in a tuple, e.g. <code>for c in tuple(ii)</code>, or set a flag and exhaust the iterator.<br></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def group_by(iterable, size):\n    \"\"\"Group an iterable into lists that don't exceed the size given.\n\n    &gt;&gt;&gt; group_by([1,2,3,4,5], 2)\n    [[1, 2], [3, 4], [5]]\n\n    \"\"\"\n    sublist = []\n\n    for index, item in enumerate(iterable):\n        if index &gt; 0 and index % size == 0:\n            yield sublist\n            sublist = []\n\n        sublist.append(item)\n\n    if sublist:\n        yield sublist\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another approach would be to use the two-argument form of <code>iter</code>: </p>\n\n<pre><code>from itertools import islice\n\ndef group(it, size):\n    it = iter(it)\n    return iter(lambda: tuple(islice(it, size)), ())\n</code></pre>\n\n<p>This can be adapted easily to use padding (this is similar to <a href=\"http://stackoverflow.com/a/434314/577088\">Markus Jarderot</a>\u2019s answer):</p>\n\n<pre><code>from itertools import islice, chain, repeat\n\ndef group_pad(it, size, pad=None):\n    it = chain(iter(it), repeat(pad))\n    return iter(lambda: tuple(islice(it, size)), (pad,) * size)\n</code></pre>\n\n<p>These can even be combined for optional padding:</p>\n\n<pre><code>_no_pad = object()\ndef group(it, size, pad=_no_pad):\n    if pad == _no_pad:\n        it = iter(it)\n        sentinel = ()\n    else:\n        it = chain(iter(it), repeat(pad))\n        sentinel = (pad,) * size\n    return iter(lambda: tuple(islice(it, size)), sentinel)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To avoid all conversions to a list <code>import itertools</code> and:</p>\n\n<pre><code>&gt;&gt;&gt; for k, g in itertools.groupby(xrange(35), lambda x: x/10):\n...     list(g)\n</code></pre>\n\n<p>Produces:</p>\n\n<pre><code>... \n0 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n1 [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n2 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n3 [30, 31, 32, 33, 34]\n&gt;&gt;&gt; \n</code></pre>\n\n<p>I checked <code>groupby</code> and it doesn't convert to list or use <code>len</code> so I (think) this will delay resolution of each value until it is actually used.  Sadly none of the available answers (at this time) seemed to offer this variation.</p>\n\n<p>Obviously if you need to handle each item in turn nest a for loop over g:</p>\n\n<pre><code>for k,g in itertools.groupby(xrange(35), lambda x: x/10):\n    for i in g:\n       # do what you need to do with individual items\n    # now do what you need to do with the whole group\n</code></pre>\n\n<p>My specific interest in this was the need to consume a generator to submit changes in batches of up to 1000 to the gmail API:</p>\n\n<pre><code>    messages = a_generator_which_would_not_be_smart_as_a_list\n    for idx, batch in groupby(messages, lambda x: x/1000):\n        batch_request = BatchHttpRequest()\n        for message in batch:\n            batch_request.add(self.service.users().messages().modify(userId='me', id=message['id'], body=msg_labels))\n        http = httplib2.Http()\n        self.credentials.authorize(http)\n        batch_request.execute(http=http)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>About solution gave by <code>J.F. Sebastian</code> <a href=\"http://stackoverflow.com/a/435712/3821804\">here</a>:</p>\n\n<pre><code>def chunker(iterable, chunksize):\n    return zip(*[iter(iterable)]*chunksize)\n</code></pre>\n\n<p>It's clever, but has one disadvantage - always return tuple. How to get string instead?<br>\nOf course you can write <code>''.join(chunker(...))</code>, but the temporary tuple is constructed anyway.</p>\n\n<p>You can get rid of the temporary tuple by writing own <code>zip</code>, like this:</p>\n\n<pre><code>class IteratorExhausted(Exception):\n    pass\n\ndef translate_StopIteration(iterable, to=IteratorExhausted):\n    for i in iterable:\n        yield i\n    raise to # StopIteration would get ignored because this is generator,\n             # but custom exception can leave the generator.\n\ndef custom_zip(*iterables, reductor=tuple):\n    iterators = tuple(map(translate_StopIteration, iterables))\n    while True:\n        try:\n            yield reductor(next(i) for i in iterators)\n        except IteratorExhausted: # when any of iterators get exhausted.\n            break\n</code></pre>\n\n<p>Then</p>\n\n<pre><code>def chunker(data, size, reductor=tuple):\n    return custom_zip(*[iter(data)]*size, reductor=reductor)\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>&gt;&gt;&gt; for i in chunker('12345', 2):\n...     print(repr(i))\n...\n('1', '2')\n('3', '4')\n&gt;&gt;&gt; for i in chunker('12345', 2, ''.join):\n...     print(repr(i))\n...\n'12'\n'34'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a chunker without imports that supports generators:</p>\n\n<pre><code>def chunks(seq, size):\n    it = iter(seq)\n    while True:\n        ret = tuple(it.next() for _ in range(size))\n        if len(ret) == size:\n            yield ret\n        else:\n            raise StopIteration()\n</code></pre>\n\n<p>Example of use:</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n...     i = 0\n...     while True:\n...         i += 1\n...         yield i\n...\n&gt;&gt;&gt; c = chunks(foo(), 3)\n&gt;&gt;&gt; c.next()\n(1, 2, 3)\n&gt;&gt;&gt; c.next()\n(4, 5, 6)\n&gt;&gt;&gt; list(chunks('abcdefg', 2))\n[('a', 'b'), ('c', 'd'), ('e', 'f')]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There doesn't seem to be a pretty way to do this.  <a href=\"http://code.activestate.com/recipes/425397/\" rel=\"nofollow\">Here</a> is a page that has a number of methods, including:</p>\n\n<pre><code>def split_seq(seq, size):\n    newseq = []\n    splitsize = 1.0/size*len(seq)\n    for i in range(size):\n        newseq.append(seq[int(round(i*splitsize)):int(round((i+1)*splitsize))])\n    return newseq\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If the lists are the same size, you can combine them into lists of 4-tuples with <code>zip()</code>. For example:</p>\n\n<pre><code># Four lists of four elements each.\n\nl1 = range(0, 4)\nl2 = range(4, 8)\nl3 = range(8, 12)\nl4 = range(12, 16)\n\nfor i1, i2, i3, i4 in zip(l1, l2, l3, l4):\n    ...\n</code></pre>\n\n<p>Here's what the <code>zip()</code> function produces:</p>\n\n<pre><code>&gt;&gt;&gt; print l1\n[0, 1, 2, 3]\n&gt;&gt;&gt; print l2\n[4, 5, 6, 7]\n&gt;&gt;&gt; print l3\n[8, 9, 10, 11]\n&gt;&gt;&gt; print l4\n[12, 13, 14, 15]\n&gt;&gt;&gt; print zip(l1, l2, l3, l4)\n[(0, 4, 8, 12), (1, 5, 9, 13), (2, 6, 10, 14), (3, 7, 11, 15)]\n</code></pre>\n\n<p>If the lists are large, and you don't want to combine them into a bigger list, use <code>itertools.izip()</code>, which produces an iterator, rather than a list.</p>\n\n<pre><code>from itertools import izip\n\nfor i1, i2, i3, i4 in izip(l1, l2, l3, l4):\n    ...\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The ideal solution for this problem works with iterators (not just sequences). It should also be fast.</p>\n\n<p>This is the solution provided by the documentation for itertools:</p>\n\n<pre><code>def grouper(n, iterable, fillvalue=None):\n    #\"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return itertools.izip_longest(fillvalue=fillvalue, *args)\n</code></pre>\n\n<p>Using ipython's <code>%timeit</code> on my mac book air, I get 47.5 us per loop.</p>\n\n<p>However, this really doesn't work for me since the results are padded to be even sized groups. A solution without the padding is slightly more complicated. The most naive solution might be:</p>\n\n<pre><code>def grouper(size, iterable):\n    i = iter(iterable)\n    while True:\n        out = []\n        try:\n            for _ in range(size):\n                out.append(i.next())\n        except StopIteration:\n            yield out\n            break\n\n        yield out\n</code></pre>\n\n<p>Simple, but pretty slow: 693 us per loop</p>\n\n<p>The best solution I could come up with uses <code>islice</code> for the inner loop:</p>\n\n<pre><code>def grouper(size, iterable):\n    it = iter(iterable)\n    while True:\n        group = tuple(itertools.islice(it, None, size))\n        if not group:\n            break\n        yield group\n</code></pre>\n\n<p>With the same dataset, I get 305 us per loop.</p>\n\n<p>Unable to get a pure solution any faster than that, I provide the following solution with an important caveat: If your input data has instances of <code>filldata</code> in it, you could get wrong answer.</p>\n\n<pre><code>def grouper(n, iterable, fillvalue=None):\n    #\"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    for i in itertools.izip_longest(fillvalue=fillvalue, *args):\n        if tuple(i)[-1] == fillvalue:\n            yield tuple(v for v in i if v != fillvalue)\n        else:\n            yield i\n</code></pre>\n\n<p>I really don't like this answer, but it is significantly faster. 124 us per loop</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <a href=\"http://funcy.readthedocs.org/en/latest/seqs.html#partition\" rel=\"nofollow\">partition</a> or <a href=\"http://funcy.readthedocs.org/en/latest/seqs.html#chunks\" rel=\"nofollow\">chunks</a> function from <a href=\"https://github.com/Suor/funcy\" rel=\"nofollow\">funcy</a> library:</p>\n\n<pre><code>from funcy import partition\n\nfor a, b, c, d in partition(4, ints):\n    foo += a * b * c * d\n</code></pre>\n\n<p>These functions also has iterator versions <code>ipartition</code> and <code>ichunks</code>, which will be more efficient in this case.</p>\n\n<p>You can also peek at <a href=\"https://github.com/Suor/funcy/blob/1.0.0/funcy/seqs.py#L316\" rel=\"nofollow\">their implementation</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One-liner, adhoc solution to iterate over a list <code>x</code> in chunks of size <code>4</code> -</p>\n\n<pre><code>for a, b, c, d in zip(x[0::4], x[1::4], x[2::4], x[3::4]):\n    ... do something with a, b, c and d ...\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With NumPy it's simple:</p>\n\n<pre><code>ints = array([1, 2, 3, 4, 5, 6, 7, 8])\nfor int1, int2 in ints.reshape(-1, 2):\n    print(int1, int2)\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>1 2\n3 4\n5 6\n7 8\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>At first, I designed it to split strings into substrings to parse string containing hex.<br>\nToday I turned it into complex, but still simple generator.</p>\n\n<pre><code>def chunker(iterable, size, reductor, condition):\n    it = iter(iterable)\n    def chunk_generator():\n        return (next(it) for _ in range(size))\n    chunk = reductor(chunk_generator())\n    while condition(chunk):\n        yield chunk\n        chunk = reductor(chunk_generator())\n</code></pre>\n\n<h1>Arguments:</h1>\n\n<h3>Obvious ones</h3>\n\n<ul>\n<li><code>iterable</code> is any iterable / iterator / generator containg / generating / iterating over input data,</li>\n<li><code>size</code> is, of course, size of chunk you want get,</li>\n</ul>\n\n<h3>More interesting</h3>\n\n<ul>\n<li><p><code>reductor</code> is a callable, which receives generator iterating over content of chunk.<br>\nI'd expect it to return sequence or string, but I don't demand that.</p>\n\n<p>You can pass as this argument for example <code>list</code>, <code>tuple</code>, <code>set</code>, <code>frozenset</code>,<br>\nor anything fancier. I'd pass this function, returning string<br>\n(provided that <code>iterable</code> contains / generates / iterates over strings):</p>\n\n<pre><code>def concatenate(iterable):\n    return ''.join(iterable)\n</code></pre>\n\n<p><sup>Note that <code>reductor</code> can cause closing generator by raising exception.</sup></p></li>\n<li><p><code>condition</code> is a callable which receives anything what <code>reductor</code> returned.<br>\nIt decides to approve &amp; yield it (by returning anything evaluating to <code>True</code>),<br>\nor to decline it &amp; finish generator's work (by returning anything other or raising exception).</p>\n\n<p>When number of elements in <code>iterable</code> is not divisible by <code>size</code>, when <code>it</code> gets exhausted, <code>reductor</code> will receive generator generating less elements than <code>size</code>.<br>\nLet's call these elements <em>lasts elements</em>.</p>\n\n<p>I invited two functions to pass as this argument:  </p>\n\n<ul>\n<li><p><code>lambda x:x</code> - the <em>lasts elements</em> will be yielded.</p></li>\n<li><p><code>lambda x: len(x)==&lt;size&gt;</code> - the <em>lasts elements</em> will be rejected.<br>\n<sup>replace <code>&lt;size&gt;</code> using number equal to <code>size</code></sup></p></li>\n</ul></li>\n</ul>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In many cases, Python looks and behaves like natural English, but this is one case where that abstraction fails. People can use context clues to determine that \"Jon\" and \"Inbar\" are objects joined to the verb \"equals\", but the Python interpreter is more literal minded.</p>\n\n<pre><code>if name == \"Kevin\" or \"Jon\" or \"Inbar\":\n</code></pre>\n\n<p>is logically equivalent to:  </p>\n\n<pre><code>if (name == \"Kevin\") or (\"Jon\") or (\"Inbar\"):\n</code></pre>\n\n<p>Which, for user Bob, is equivalent to:</p>\n\n<pre><code>if (False) or (\"Jon\") or (\"Inbar\"):\n</code></pre>\n\n<p>The <code>or</code> operator chooses the first argument with a positive <a href=\"http://docs.python.org/3/library/stdtypes.html#truth-value-testing\">truth value</a>:  </p>\n\n<pre><code>if (\"Jon\"):\n</code></pre>\n\n<p>And since \"Jon\" has a positive truth value, the <code>if</code> block executes. That is what causes \"Access granted\" to be printed regardless of the name given.</p>\n\n<p>All of this reasoning also applies to the expression <code>if \"Kevin\" or \"Jon\" or \"Inbar\" == name</code>. the first value, <code>\"Kevin\"</code>, is true, so the <code>if</code> block executes.</p>\n\n<hr>\n\n<p>There are two common ways to properly construct this conditional.  </p>\n\n<ol>\n<li><p>Use multiple <code>==</code> operators to explicitly check against each value:<br>\n<code>if name == \"Kevin\" or name == \"Jon\" or name == \"Inbar\":</code>  </p></li>\n<li><p>Compose a sequence of valid values, and use the <code>in</code> operator to test for membership:<br>\n<code>if name in (\"Kevin\", \"Jon\", \"Inbar\"):</code></p></li>\n</ol>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Take a look at this:</p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n9987148\n&gt;&gt;&gt; id(b)\n9987148\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n11662816\n&gt;&gt;&gt; id(b)\n11662828\n</code></pre>\n\n<p>EDIT: Here's what I found in the Python documentation, <a href=\"http://docs.python.org/c-api/int.html\">7.2.1, \"Plain Integer Objects\"</a>:</p>\n\n<blockquote>\n  <p>The current implementation keeps an\n  array of integer objects for all\n  integers between -5 and 256, when you\n  create an int in that range you\n  actually just get back a reference to\n  the existing object. So it should be\n  possible to change the value of 1. I\n  suspect the behaviour of Python in\n  this case is undefined. :-)</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It depends on whether you're looking to see if 2 things are equal, or the same object. </p>\n\n<p>\"is\" checks to see if they are the same object, not just equal. The small ints are probably pointing to the same memory location for space efficiency </p>\n\n<pre><code>In [29]: a = 3\nIn [30]: b = 3\nIn [31]: id(a)\nOut[31]: 500729144\nIn [32]: id(b)\nOut[32]: 500729144\n</code></pre>\n\n<p>You should use \"==\" to compare equality of arbitrary objects. You can specify the behavior with the <code>__eq__</code>, and <code>__ne__</code> attributes.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As you can check in <a href=\"http://svn.python.org/projects/python/trunk/Objects/intobject.c\" rel=\"nofollow\">source file <em>intobject.c</em></a>, Python caches small integers for efficiency. Every time you create a reference to a small integer, you are referring the cached small integer, not a new object. 257 is not an small integer, so it is calculated as a different object.</p>\n\n<p>It is better to use \"==\" for that purpose.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>is</code> operator is not another way to type <code>==</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think your hypotheses is correct. Experiment with id (identity of object)..</p>\n\n<pre><code>In [1]: id(255)\nOut[1]: 146349024\n\nIn [2]: id(255)\nOut[2]: 146349024\n\nIn [3]: id(257)\nOut[3]: 146802752\n\nIn [4]: id(257)\nOut[4]: 148993740\n\nIn [5]: a=255\n\nIn [6]: b=255\n\nIn [7]: c=257\n\nIn [8]: d=257\n\nIn [9]: id(a), id(b), id(c), id(d)\nOut[9]: (146349024, 146349024, 146783024, 146804020)\n</code></pre>\n\n<p>It appears that numbers &lt;= 255 are treated as literals and anything above is treated differently!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For immutable value objects, like ints, strings or datetimes, object identity is not especially useful. It's better to think about equality. Identity is essentially an implementation detail for value objects - since they're immutable, there's no effective difference between having multiple refs to the same object or multiple objects.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>Why does the following behave unexpectedly in Python?</strong></p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue           # This is an expected result\n</code></pre>\n</blockquote>\n\n<p>Why is it expected? It only means that the integers valued at <code>256</code> referenced by both <code>a</code> and <code>b</code> are the same instance of integer. Integers are immutable in Python, thus they cannot change. This should have no impact on any code. It should not be expected. It is merely an implementation detail. But perhaps we should be glad that there are not two separate instances in memory every time we state a value equals 256. </p>\n\n<blockquote>\n<pre><code>&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse          # What happened here? Why is this False?\n</code></pre>\n</blockquote>\n\n<p>Looks like we now have two separate instances of integers with the value of <code>257</code> in memory. Since integers are immutable, this wastes memory. Let's hope we're not wasting a lot of it. We're probably not. But this behavior is not guaranteed.</p>\n\n<blockquote>\n<pre><code>&gt;&gt;&gt; 257 is 257\nTrue           # Yet the literal numbers compare properly\n</code></pre>\n</blockquote>\n\n<p>Well, this looks like your particular implementation of Python is trying to be smart and not creating redundantly valued integers in memory unless it has to. You seem to indicate you are using the referent implementation of Python, which is CPython. Good for CPython. </p>\n\n<p>It might be even better if CPython could do this globally, if it could do so cheaply (as there would a cost in the lookup), perhaps another implementation might. </p>\n\n<p>But as for impact on code, you should not care if an integer is a particular instance of an integer. You should only care what the value of that instance is, and you would use the normal comparison operators for that, i.e. <code>==</code>.</p>\n\n<p><strong>What <code>is</code> does</strong></p>\n\n<p><code>is</code> checks that the <code>id</code> of two objects are the same. In CPython, the <code>id</code> is the location in memory, but it could be some other uniquely identifying number in another implementation. To restate this with code:</p>\n\n<pre><code>&gt;&gt;&gt; a is b\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>&gt;&gt;&gt; id(a) == id(b)\n</code></pre>\n\n<p><strong>Why would we want to use <code>is</code> then?</strong></p>\n\n<p>This can be a very fast check relative to say, checking if two very long strings are equal in value. But since it applies to the uniqueness of the object, we thus have limited use-cases for it. In fact, we mostly want to use it to check for <code>None</code>, which is a singleton (a sole instance existing in one place in memory). We might create other singletons if there is potential to conflate them, which we might check with <code>is</code>, but these are relatively rare. Here's an example (will work in Python 2 and 3) e.g.</p>\n\n<pre><code>SENTINEL_SINGLETON = object() # this will only be created one time.\n\ndef foo(keyword_argument=None):\n    if keyword_argument is None:\n        print('no argument given to foo')\n    bar()\n    bar(keyword_argument)\n    bar('baz')\n\ndef bar(keyword_argument=SENTINEL_SINGLETON):\n    # SENTINEL_SINGLETON tells us if we were not passed anything\n    # as None is a legitimate potential argument we could get.\n    if keyword_argument is SENTINEL_SINGLETON:\n        print('no argument given to bar')\n    else:\n        print('argument to bar: {0}'.format(keyword_argument))\n\nfoo()\n</code></pre>\n\n<p>Which prints:</p>\n\n<pre><code>no argument given to foo\nno argument given to bar\nargument to bar: None\nargument to bar: baz\n</code></pre>\n\n<p>And so we see, with <code>is</code> and a sentinel, we are able to differentiate between when <code>bar</code> is called with no arguments and when it is called with <code>None</code>. These are the primary use-cases for <code>is</code> - do <em>not</em> use it to test for equality of integers, strings, tuples, or other things like these.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>is</code> <em>is</em> the identity equality operator (functioning like <code>id(a) == id(b)</code>); it's just that two equal numbers aren't necessarily the same object. For performance reasons some small integers happen to be <a href=\"http://en.wikipedia.org/wiki/Memoization\" rel=\"nofollow\">memoized</a> so they will tend to be the same (this can be done since they are immutable).</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"nofollow\">PHP's</a> <code>===</code> operator, on the other hand, is described as checking equality and type: <code>x == y and type(x) == type(y)</code> as per Paulo Freitas' comment. This will suffice for common numbers, but differ from <code>is</code> for classes that define <code>__eq__</code> in an absurd manner:</p>\n\n<pre><code>class Unequal:\n    def __eq__(self, other):\n        return False\n</code></pre>\n\n<p>PHP apparently allows the same thing for \"built-in\" classes (which I take to mean implemented at C level, not in PHP). A slightly less absurd use might be a timer object, which has a different value every time it's used as a number. Quite why you'd want to emulate Visual Basic's <code>Now</code> instead of showing that it is an evaluation with <code>time.time()</code> I don't know.</p>\n\n<p>Greg Hewgill (OP) made one clarifying comment \"My goal is to compare object identity, rather than equality of value. Except for numbers, where I want to treat object identity the same as equality of value.\"</p>\n\n<p>This would have yet another answer, as we have to categorize things as numbers or not, to select whether we compare with <code>==</code> or <code>is</code>. <a href=\"http://en.wikipedia.org/wiki/CPython\" rel=\"nofollow\">CPython</a> defines the <a href=\"http://docs.python.org/2/c-api/number.html\" rel=\"nofollow\">number protocol</a>, including PyNumber_Check, but this is not accessible from Python itself.</p>\n\n<p>We could try to use <code>isinstance</code> with all the number types we know of, but this would inevitably be incomplete. The types module contains a StringTypes list but no NumberTypes. Since Python 2.6, the built in number classes have a base class <a href=\"https://docs.python.org/2/library/numbers.html#numbers.Number\" rel=\"nofollow\"><code>numbers.Number</code></a>, but it has the same problem:</p>\n\n<pre><code>import numpy, numbers\nassert not issubclass(numpy.int16,numbers.Number)\nassert issubclass(int,numbers.Number)\n</code></pre>\n\n<p>By the way, <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"nofollow\">NumPy</a> will produce separate instances of low numbers.</p>\n\n<p>I don't actually know an answer to this variant of the question. I suppose one could theoretically use ctypes to call <code>PyNumber_Check</code>, but even that function <a href=\"http://mail.python.org/pipermail/python-dev/2002-November/030237.html\" rel=\"nofollow\">has been debated</a>, and it's certainly not portable. We'll just have to be less particular about what we test for now.</p>\n\n<p>In the end, this issue stems from Python not originally having a type tree with predicates like <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\" rel=\"nofollow\">Scheme's</a> <code>number?</code>, or <a href=\"http://en.wikipedia.org/wiki/Haskell_%28programming_language%29\" rel=\"nofollow\">Haskell's</a> <a href=\"https://en.wikipedia.org/wiki/Type_class\" rel=\"nofollow\">type class</a> <a href=\"http://www.haskell.org/ghc/docs/7.4-latest/html/libraries/base-4.5.1.0/Prelude.html#t:Num\" rel=\"nofollow\">Num</a>. <code>is</code> checks object identity, not value equality. PHP has a colorful history as well, where <code>===</code> apparently behaves as <code>is</code> only on objects <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\" rel=\"nofollow\">in PHP5, but not PHP4</a>. Such are the growing pains of moving across languages (including versions of one).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It also happens with strings:</p>\n\n<pre><code>&gt;&gt;&gt; s = b = 'somestr'\n&gt;&gt;&gt; s == b, s is b, id(s), id(b)\n(True, True, 4555519392, 4555519392)\n</code></pre>\n\n<p>Now everything seems fine.</p>\n\n<pre><code>&gt;&gt;&gt; s = 'somestr'\n&gt;&gt;&gt; b = 'somestr'\n&gt;&gt;&gt; s == b, s is b, id(s), id(b)\n(True, True, 4555519392, 4555519392)\n</code></pre>\n\n<p>That's expected too.</p>\n\n<pre><code>&gt;&gt;&gt; s1 = b1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'\n&gt;&gt;&gt; s1 == b1, s1 is b1, id(s1), id(b1)\n(True, True, 4555308080, 4555308080)\n\n&gt;&gt;&gt; s1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'\n&gt;&gt;&gt; b1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'\n&gt;&gt;&gt; s1 == b1, s1 is b1, id(s1), id(b1)\n(True, False, 4555308176, 4555308272)\n</code></pre>\n\n<p>Now that's unexpected.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Other similar situation:</p>\n\n<p>Imagine 2 variables that keep 2 lists</p>\n\n<pre><code>a = [1,2,3]\n\nb = [1,2,3]\n</code></pre>\n\n<p>These 2 objects are kept in memory at different addresses.</p>\n\n<p>There are 2 possible operations of equality:</p>\n\n<ul>\n<li><p>is to compare the addresses of memory of objects a and b and say if they are equal.</p></li>\n<li><p>to compare the objects composing the lists, and to say if the lists look the same</p></li>\n</ul>\n\n<p>These 2 operations have associated different operators.</p>\n\n<p>The operator <code>is</code> cope with the first situation. The id operator is useful, because it returns a hash of the object a, which is a pointer to the object a in memory.</p>\n\n<p>So the <code>id</code> operator is useful to see the result of the <code>is operator</code>.</p>\n\n<p>For the second situation is useful the <code>==</code> operator.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The reason you need to use <code>self.</code> is because Python does not use the <code>@</code> syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>\n\n<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have been confused by this as well for quite a while and I don\u2019t believe that the reason for this has got much to do with the often-pronounced <em>explicit is better than implicit</em> but that it is just following a simple analogy there.</p>\n\n<p>Let\u2019s take a simple vector class:</p>\n\n<pre><code>class Vector(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n</code></pre>\n\n<p>Now, we want to have a method which calculates the length. What would it look like if we wanted to define it inside the class?</p>\n\n<pre><code>    def length(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2)\n</code></pre>\n\n<p>And, what should it look like when we were to define it as a global method/function?</p>\n\n<pre><code>def length_global(vector):\n    return math.sqrt(vector.x ** 2 + vector.y ** 2)\n</code></pre>\n\n<p>So, the whole structure stays the same. Now, how can me make use of this? If we assume for a moment that we hadn\u2019t written a <code>length</code> method for our <code>Vector</code> class, we could do this:</p>\n\n<pre><code>Vector.length_new = length_global\nv = Vector(3, 4)\nprint v.length_new() # 5.0\n</code></pre>\n\n<p>This works, because the first parameter of <code>length_global</code>, can be re-used as the <code>self</code> parameter in <code>length_new</code>. This would not be possible without an explicit <code>self</code>.</p>\n\n<hr>\n\n<p>Another way of understanding the need for the explicit <code>self</code> is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like</p>\n\n<pre><code>v_instance.length()\n</code></pre>\n\n<p>is internally transformed to</p>\n\n<pre><code>Vector.length(v_instance)\n</code></pre>\n\n<p>it is easy to see where the <code>self</code> fits in. You don't actually write instance methods in Python; what you write is class methods which (must) take an instance as a first parameter. And therefore, you\u2019ll have to place the instance parameter somewhere explicitly.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let's say you have a class <code>ClassA</code> which contains a method <code>methodA</code> defined as:</p>\n\n<pre><code>def methodA(self, arg1, arg2):\n    # do something\n</code></pre>\n\n<p>and <code>ObjectA</code> is an instance of this class.</p>\n\n<p>Now when <code>ObjectA.methodA(arg1, arg2)</code> is called, python internally converts it for you as:</p>\n\n<pre><code>ClassA.methodA(ObjectA, arg1, arg2)\n</code></pre>\n\n<p>The <code>self</code> variable refers to the object itself.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I like this example:</p>\n\n<pre><code>class A: \n    foo = []\na, b = A(), A()\na.foo.append(5)\nb.foo\nans: [5]\n\nclass A: \n    def __init__(self): \n        self.foo = []\na, b = A(), A()\na.foo.append(5)\nb.foo\nans: []\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When objects are instantiated, the object itself is passed into the self parameter. </p>\n\n<p><img src=\"http://i.stack.imgur.com/whCZm.png\" alt=\"enter image description here\"></p>\n\n<p>Because of this, the object\u2019s data is bound to the object. Below is an example of how you might like to visualize what each object\u2019s data might look. Notice how \u2018self\u2019 is replaced with the objects name. I'm not saying this example diagram below is wholly accurate but it hopefully with serve a purpose in visualizing the use of self. </p>\n\n<p><img src=\"http://i.stack.imgur.com/5daR6.png\" alt=\"enter image description here\"></p>\n\n<p>The Object is passed into the self parameter so that the object can keep hold of its own data.</p>\n\n<p>Although this may not be wholly accurate, think of the process of instantiating an object like this: When an object is made it uses the class as a template for its own data and methods. Without passing it's own name into the self parameter, the attributes and methods in the class would remain as a general template and would not be referenced to (belong to) the object. So by passing the object's name into the self parameter it means that if 100 objects are instantiated from the one class, they can all keep track of their own data and methods.</p>\n\n<p>See the illustration below:</p>\n\n<p><img src=\"http://i.stack.imgur.com/oZZe5.png\" alt=\"enter image description here\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I will demonstrate with code that <strong>does not use classes</strong>:</p>\n\n<pre><code>def state_init(state):\n    state['field'] = 'init'\n\ndef state_add(state, x):\n    state['field'] += x\n\ndef state_mult(state, x):\n    state['field'] *= x\n\ndef state_getField(state):\n    return state['field']\n\nmyself = {}\nstate_init(myself)\nstate_add(myself, 'added')\nstate_mult(myself, 2)\n\nprint( state_getField(myself) )\n#--&gt; 'initaddedinitadded'\n</code></pre>\n\n<p>Classes are just a way to avoid passing in this \"state\" thing all the time (and other nice things like initializing, class composition, the rarely-needed metaclasses, and supporting custom methods to override operators).</p>\n\n<p>Now let's demonstrate the above code using the built-in python class machinery, to show how it's basically the same thing.</p>\n\n<pre><code>class State(object):\n    def __init__(self):\n        self.field = 'init'\n    def add(self, x):\n        self.field += x\n    def mult(self, x):\n        self.field *= x\n\ns = State()\ns.add('added')    # self is implicitly passed in\ns.mult(2)         # self is implicitly passed in\nprint( s.field )\n</code></pre>\n\n<p>[migrated my answer from duplicate closed question]</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As well as all the other reasons already stated, it allows for easier access to overridden methods; you can call <code>Class.some_method(inst)</code>.</p>\n\n<p>An example of where it\u2019s useful:</p>\n\n<pre><code>class C1(object):\n    def __init__(self):\n         print \"C1 init\"\n\nclass C2(C1):\n    def __init__(self): #overrides C1.__init__\n        print \"C2 init\"\n        C1.__init__(self) #but we still want C1 to init the class too\n</code></pre>\n\n\n\n<pre><code>&gt;&gt;&gt; C2()\n\"C2 init\"\n\"C1 init\"\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The following excerpts are from the <a href=\"http://docs.python.org/tutorial/classes.html\">Python documentation about self</a>:</p>\n\n<blockquote>\n  <p>As in Modula-3, there are no shorthands [in Python] for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.</p>\n  \n  <p>Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.</p>\n</blockquote>\n\n<p>For more information, see the <a href=\"http://docs.python.org/tutorial/classes.html\">Python documentation tutorial on classes</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Its use is nearly the same as that of <code>this</code> keyword in Java, i.e. to give a reference to the current object.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It\u2019s there to follow the Python zen \u201cexplicit is better than implicit\u201d. It\u2019s indeed a reference to your class object. In Java and PHP, for example, it's called <code>this</code>.</p>\n\n<p>If <code>user_type_name</code> is a field on your model you access it by <code>self.user_type_name</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>self</code> is an object reference to the object itself, therefore, they are same.\nPython methods are not called in the context of the object itself.\n<code>self</code> in Python may be used to deal with custom object models or something.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python is not a language built for Object Oriented Programming unlike Java or C++. </p>\n\n<p>When calling a static method in Python, one simply writes a method with regular arguments inside it. </p>\n\n<pre><code>class Animal():\n    def staticMethod():\n        print \"This is a static method\"\n</code></pre>\n\n<p>However, an object method, which requires you to make a variable, which is an Animal, in this case, needs the self argument</p>\n\n<pre><code>class Animal():\n    def objectMethod(self):\n        print \"This is an object method which needs an instance of a class\"\n</code></pre>\n\n<p>The self method is also used to refer to a variable field within the class. </p>\n\n<pre><code>class Animal():\n    animalName = \"\"\n\n    def animalName(self):\n        return self.animalName()\n</code></pre>\n\n<p>In this case, self is referring to the animalName variable of the entire class. REMEMBER: If you have a variable within a method, self will not work. That variable is simply existent only while that method is running. For defining fields (the variables of the entire class), you have to define them OUTSIDE the class methods. </p>\n\n<p>If you don't understand a single word of what I am saying, then Google \"Object Oriented Programming.\" Once you understand this, you won't even need to ask that question :).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Take a look at the following example, which clearly explains the purpose of <code>self</code></p>\n\n<pre><code>class Restaurant(object):  \n    bankrupt = False\n\n    def open_branch(self):\n        if not self.bankrupt:\n           print(\"branch opened\")\n\n#create instance1\n&gt;&gt;&gt; x = Restaurant()\n&gt;&gt;&gt; x.bankrupt\nFalse\n\n#create instance2\n&gt;&gt;&gt; y = Restaurant()\n&gt;&gt;&gt; y.bankrupt = True   \n&gt;&gt;&gt; y.bankrupt\nTrue\n\n&gt;&gt;&gt; x.bankrupt\nFalse  \n</code></pre>\n\n<p><code>self</code> is used/needed to distinguish between instances.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In the <code>__init__</code> method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called.</p>\n\n<p>self, as a name, is <strong><em>just a convention</em></strong>, call it as you want ! but when using it, for example to delete the object, you have to use the same name: <code>__del__(var)</code>, where <code>var</code> was used in the <code>__init__(var,[...])</code></p>\n\n<p>You should take a look at <code>cls</code> too, to have <strong><em>the bigger picture</em></strong>. This <a href=\"http://stackoverflow.com/questions/7554738/python-self-no-self-and-cls\"><strong>post</strong></a> could be helpful.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Is because by the way python is designed the alternatives would hardly work. Python is designed to allow methods or functions to be defined in a context where both implicit <code>this</code> (a-la Java/C++) or explicit <code>@</code> (a-la ruby) wouldn't work. Let's have an example with the explicit approach with python conventions:</p>\n\n<pre><code>def fubar(x):\n    self.x = x\n\nclass C:\n    frob = fubar\n</code></pre>\n\n<p>Now the <code>fubar</code> function wouldn't work since it would assume that <code>self</code> is a global variable (and in <code>frob</code> as well). The alternative would be to execute method's with a replaced global scope (where <code>self</code> is the object).</p>\n\n<p>The implicit approach would be</p>\n\n<pre><code>def fubar(x)\n    myX = x\n\nclass C:\n    frob = fubar\n</code></pre>\n\n<p>This would mean that <code>myX</code> would be interpreted as a local variable in <code>fubar</code> (and in <code>frob</code> as well). The alternative here would be to execute methods with a replaced local scope which is retained between calls, but that would remove the posibility of method local variables.</p>\n\n<p>However the current situation works out well:</p>\n\n<pre><code> def fubar(self, x)\n     self.x = x\n\n class C:\n     frob = fubar\n</code></pre>\n\n<p>here when called as a method <code>frob</code> will receive the object on which it's called via the <code>self</code> parameter, and <code>fubar</code> can still be called with an object as parameter and work the same (it <em>is</em> the same as <code>C.frob</code> I think).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>it's an explicit reference to the class instance object. </p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>Update: Comments below point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition and NOT using the original answer below. Original error message means Visual C++ 2008 is not installed</em></p>\n\n<p>For Windows installations:</p>\n\n<p>While running setup.py for package installations, Python 2.7 searches for an installed Visual Studio 2008. You can trick Python to use a newer Visual Studio by setting the correct path in <code>VS90COMNTOOLS</code> environment variable before calling <code>setup.py</code>.</p>\n\n<p>Execute the following command based on the version of Visual Studio installed:</p>\n\n<ul>\n<li>Visual Studio 2010 (VS10): <code>SET VS90COMNTOOLS=%VS100COMNTOOLS%</code></li>\n<li>Visual Studio 2012 (VS11): <code>SET VS90COMNTOOLS=%VS110COMNTOOLS%</code></li>\n<li>Visual Studio 2013 (VS12): <code>SET VS90COMNTOOLS=%VS120COMNTOOLS%</code></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found the solution. \nI had the exact same problem, and error, installing 'amara'. I had mingw32 installed, but distutils needed to be configured.</p>\n\n<ol>\n<li>I have Python 2.6 that was already installed.</li>\n<li>I installed mingw32 to <code>C:\\programs\\mingw\\</code></li>\n<li>Add mingw32's bin directory to your environment variable: append <code>c:\\programs\\MinGW\\bin;</code> to the <strong>PATH</strong></li>\n<li><p>Edit (create if not existing) <strong>distutils.cfg</strong> file located at <code>C:\\Python26\\Lib\\distutils\\distutils.cfg</code> to be:  </p>\n\n<pre><code>[build]\ncompiler=mingw32\n</code></pre></li>\n<li><p>Now run <code>easy_install.exe amara</code>.</p></li>\n</ol>\n\n<p>Make sure environment is set by opening a new <code>cmd.exe</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can install compiled version from <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>At least I found my solution from drawing feedback from other answers using the Visual \nStudio C++ compilers rather than installing through the mingw32 path.</p>\n\n<h2>Important Note:</h2>\n\n<p>If you are using a Python version <em>more recent</em> than Python 2.7 (especially any Python 3.x), you most likely need a version of Visual Studio C++ <em>other than</em> the 2008 version.  </p>\n\n<p>See bottom for details.</p>\n\n<h2>Steps:</h2>\n\n<ol>\n<li><p>Download and install <em>specifically</em> <a href=\"http://download.microsoft.com/download/A/5/4/A54BADB6-9C3F-478D-8657-93B3FC9FE62D/vcsetup.exe\">Visual Studio C++ 2008 Express Edition</a> (unless are following the note at the top).  </p>\n\n<p><strong>Update for x64 Compilers</strong>: By default this will only give you a 32-bit compiler. I learned (from <a href=\"http://blog.victorjabur.com/2011/06/05/compiling-python-2-7-modules-on-windows-32-and-64-using-msvc-2008-express/\">here</a> and <a href=\"http://smaudet.wordpress.com/2014/01/26/building-pyaudio-on-windows-7-x64-using-the-free-msvc-toolchains/\">here</a>) that you can download <em>specifically</em> the <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=3138\">Windows SDK for Windows 7 and .NET Framework 3.5 SP1</a> which gives you a x64 compiler for VC++ 2008 (VC++ 9.0) if you need it. Just when you are installed it, you can uncheck everything except <code>Developer Tools &gt;&gt; Visual C++ Compilers</code> which will keep you from installing all the extra SDK tools that you may not need.  </p>\n\n<p><strong>tl;dr</strong>: If you want the x64 compilers for VC++ 2008, download <em>specifically</em> the <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=3138\">Windows SDK for Windows 7 and .NET Framework 3.5 SP1</a> and uncheck everything except <code>Developer Tools &gt;&gt; Visual C++ Compilers</code> during install.</p>\n\n<p><strong>Note</strong>: If you have both a 32- and 64-bit Python installation, you may also want to use <a href=\"http://www.virtualenv.org/en/latest/virtualenv.html\">virtualenv</a> to create separate Python environments so you can use one or the other at a time without messing with your path to choose which Python version to use.</p></li>\n<li><p><strong>Note</strong>: Apparently, you may be able to skip all of this by copying a few batch files according to @srodriguex following <a href=\"http://stackoverflow.com/questions/13596407/errors-while-building-installing-c-module-for-python-2-7/21898585#21898585\">this answer</a>. If that works great, otherwise, here is at least what worked for me.</p>\n\n<p>Open up a <code>cmd.exe</code></p></li>\n<li><p><em>Before</em> you try installing something which requires C extensions, run the following batch file to load the VC++ compiler's environment into the session (i.e. environment variables, the path to the compiler, etc).  </p>\n\n<p><strong>Execute:</strong></p>\n\n<ul>\n<li><p>32-bit Compilers:</p>\n\n<p><em>Note</em>: 32-bit Windows installs will only have <code>C:\\Program Files\\</code> as expected</p>\n\n<blockquote>\n  <p><code>\"C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\Common7\\Tools\\vsvars32.bat\"</code></p>\n</blockquote></li>\n<li><p>64-bit Compilers:</p>\n\n<blockquote>\n  <p><code>\"C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\Common7\\Tools\\vsvars64.bat\"</code></p>\n</blockquote>\n\n<p><em>Note</em>: Yes, the native 64-bit compilers are in <code>Program Files (x86)</code>. Don't ask me why.<br>\n  Additionally, if you are wondering what the difference between <code>vcvars64.bat</code> and <code>vcvarsx86_amd64.bat</code> or more importantly the difference between <code>amd64</code> and <code>x86_amd64</code>, the former are for the native 64-bit compiler tools and the latter are the 64-bit cross compilers that can run on a 32-bit Windows installation.</p></li>\n</ul>\n\n<p><strong>Update:</strong><br>\nIf for some reason you are getting <code>error: ... was unexpected at this time.</code> where the <code>...</code> is some series of characters, then you need to check that you path variable does not have any extraneous characters like extra quotations or stray characters. The batch file is not going to be able to update your session path if it can't make sense of it in the first place.</p></li>\n<li><p>If that went well, you should get one of the following messages depending on which command you ran:  </p>\n\n<p>For the 32-bit compiler tools:<br>\n<code>Setting environment for using Microsoft Visual Studio 2008 x86 tools.</code>  </p>\n\n<p>For the 64-bit compiler tools:<br>\n<code>Setting environment for using Microsoft Visual Studio 2008 x64 tools.</code></p></li>\n<li><p><em>Now</em>, run the setup via <code>python setup.py install</code> or <code>pip install pkg-name</code></p></li>\n<li><p>Hope and cross your fingers that the compiler actually works today.</p></li>\n</ol>\n\n<h2>Finding the correct version of VC++ to use</h2>\n\n<p>Newer versions of Python (at least <a href=\"https://www.python.org/downloads/release/python-341/\">3.4.1</a>) are compiled using newer versions of Visual C++, as shown in this screenshot. It is <strong>important</strong> to use the correct version of Visual C++ so that the compiled library will work with your Python version.</p>\n\n<ul>\n<li>Yellow (top) is Python 3.4.1, it uses MSC v.1600 (<a href=\"http://stackoverflow.com/a/2676904/1175496\">Visual Studio C++ 2010</a>)</li>\n<li>Red (bottom) is Python 2.7, it uses MSC v.1500 (<a href=\"http://stackoverflow.com/a/2676904/1175496\">Visual Studio C++ 2008</a>)\n<img src=\"http://i.stack.imgur.com/CBX8Z.png\" alt=\" Python 3.4 uses MSC v.1600 Python 2.7 uses MSC v.1500\"></li>\n</ul>\n\n<p>Since <a href=\"http://svn.python.org/projects/python/branches/release27-maint/Lib/distutils/msvc9compiler.py\">distilutils</a> ' <code>get_build_version</code> prevents mixing (<a href=\"http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat#comment-23311731\">per Piotr's warning</a>), you may need to download the corresponding version of Visual Studio.</p>\n\n<p>In other words, above will work only if on launching Python interpreter, you see <code>MSC v.1500</code>. <a href=\"http://go.microsoft.com/?linkid=9709949\">You might try installing Visual Studio C++ <strong>2010</strong>,</a> which corresponds to Python 3.4.1's <code>MSCv.1600</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I just had this same problem, so I'll tell my story here hoping it helps someone else with the same issues and save them the couple of hours I just spent:</p>\n\n<p>I have mingw (g++ (GCC) 4.6.1) and python 2.7.3 in a windows 7 box and I'm trying to install PyCrypto.</p>\n\n<p>It all started with this error when running setup.py install: </p>\n\n<pre><code>error: Unable to find vcvarsall.bat\n</code></pre>\n\n<p>Easily solved after googling the error by specifying mingw as the compiler of choice: </p>\n\n<pre><code>setup.py install build --compiler=mingw32\n</code></pre>\n\n<p>The problem is that then I got a different error: </p>\n\n<pre><code>configure: error: cannot run C compiled programs.\n</code></pre>\n\n<p>It turns out that my anti-virus was blocking the execution of a freshly compiled .exe. I just disabled the anti-virus \"resident shield\" and went to the next error:</p>\n\n<pre><code>cc1.exe: error: unrecognized command line option '-mno-cygwin' \nerror: command 'gcc' failed with exit status 1\n</code></pre>\n\n<p>This solved it: \"Either install a slightly older version of MinGW, or edit distutils\\cygwinccompiler.py in your Python directory to remove all instances of -mno-cygwin.\" (from <a href=\"http://stackoverflow.com/questions/6034390/compiling-with-cython-and-mingw-produces-gcc-error-unrecognized-command-line-o\">here</a>)</p>\n\n<p>Now, I can finally start working.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What's going on? Python modules can be <a href=\"https://docs.python.org/3/extending/extending.html\">part written in C or C++</a> (typically for speed). If you try to install such a package with Pip (or <code>setup.py</code>), it has to compile that C/C++ from source. Out the box, Pip will brazenly assume you the compiler Microsoft Visual C++ installed. If you don't have it, you'll see this cryptic error message \"Error: Unable to find vcvarsall.bat\".</p>\n\n<p>The prescribed solution is to install a C/C++ compiler, either Microsoft Visual C++, or <a href=\"http://www.mingw.org/wiki/Getting_Started\">MinGW</a> (an open-source project). However, installing and configuring either is prohibitively difficult. (Edit 2014: Microsoft have published a special <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=44266\">C++ compiler</a> for Python 2.7)</p>\n\n<p>The easiest solution is to use Christoph Gohlke's Windows installers (.msi) for popular Python packages. He builds installers for Python 2.x and 3.x, 32 bit and 64 bit. You can download them from <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>\n\n<hr>\n\n<p>If you too think \"Error: Unable to find vcvarsall.bat\" is a ludicrously cryptic and unhelpful message, then please comment on the bug at <a href=\"http://bugs.python.org/issue2943\">http://bugs.python.org/issue2943</a> to replace it with a more helpful and user-friendly message. </p>\n\n<p>For comparison, Ruby ships with a package manager Gem and offers a quasi-official C/C++ compiler, DevKit. If you try to install a package without it, you see this helpful friendly useful message:</p>\n\n<blockquote>\n  <p>Please update your PATH to include build tools or download the DevKit from <a href=\"http://rubyinstaller.org/downloads\">http://rubyinstaller.org/downloads</a> and follow the instructions at <a href=\"http://github.com/oneclick/rubyinstaller/wiki/Development-Kit\">http://github.com/oneclick/rubyinstaller/wiki/Development-Kit</a></p>\n</blockquote>\n\n<p>You can read a longer rant about Python packaging at <a href=\"http://stackoverflow.com/a/13445719/284795\">http://stackoverflow.com/a/13445719/284795</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You'll need to install a Microsoft compiler, compatible with the compiler used to build Python. This means you need Visual C++ 2008 (or newer, with <a href=\"/a/10558328\">some tweaking</a>).</p>\n\n<p>Microsoft now supplies a bundled compiler and headers <em>just</em> to be able to compile Python extensions, at the memorable URL: </p>\n\n<blockquote>\n  <h3>Microsoft Visual C++ Compiler for Python 2.7</h3>\n  \n  <p><a href=\"http://aka.ms/vcpython27\">http://aka.ms/vcpython27</a></p>\n</blockquote>\n\n<p>This is a relatively small package; 85MB to download, installable without admin privileges, no reboot required. The name is a little misleading, the compiler will work for any Python version originally compiled with Visual C++ 2008, not just Python 2.7.</p>\n\n<p>If you start a Python interactive prompt or print <code>sys.version</code>, look for the <code>MSC</code> version string; if it is <code>MSC v.1500</code> you can use this tool.</p>\n\n<p>From the <a href=\"https://mail.python.org/pipermail/distutils-sig/2014-September/024885.html\">original announcement to the distutils list</a>:</p>\n\n<blockquote>\n  <p>Microsoft has released a compiler package for Python 2.7 to make it easier for people to build and distribute their C extension modules on Windows. The Microsoft Visual C++ Compiler for Python 2.7 (a.k.a. VC9) is available from: <a href=\"http://aka.ms/vcpython27\">http://aka.ms/vcpython27</a> </p>\n  \n  <p>This package contains all the tools and headers required to build C extension modules for Python 2.7 32-bit and 64-bit (note that some extension modules require 3rd party dependencies such as OpenSSL or libxml2 that are not included). Other versions of Python built with Visual C++ 2008 are also supported, so \"Python 2.7\" is just advertising - it'll work fine with 2.6 and 3.2.</p>\n</blockquote>\n\n<p>Note that you need to have <a href=\"https://pypi.python.org/pypi/setuptools\"><code>setuptools</code> 6.0 or newer</a> installed (listed in the system requirements on the download page). The project you are installing must use <code>setuptools.setup()</code>, not <code>distutils</code> or the auto-detection won't work.</p>\n\n<p>Microsoft has stated that they want to keep the URL stable, so that automated scripts can reference it easily.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have python 2.73 and windows 7 .The solution that worked for me was:</p>\n\n<ol>\n<li>Added mingw32's bin directory to environment variable: append <strong>PATH</strong> with <code>C:\\programs\\mingw\\bin;</code></li>\n<li><p>Created <strong>distutils.cfg</strong> located at <code>C:\\Python27\\Lib\\distutils\\distutils.cfg</code> containing:  </p>\n\n<pre><code>[build]\ncompiler=mingw32\n</code></pre></li>\n</ol>\n\n<p>To deal with MinGW not recognizing the -mno-cygwin flag anymore, remove the flag in C:\\Python27\\Lib\\distutils\\cygwincompiler.py line 322 to 326, so it looks like this:</p>\n\n<pre><code>  self.set_executables(compiler='gcc -O -Wall',\n                         compiler_so='gcc -mdll -O -Wall',\n                         compiler_cxx='g++ -O -Wall',\n                         linker_exe='gcc',\n                         linker_so='%s %s %s'\n                                    % (self.linker_dll, shared_option,\n                                       entry_point))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Looks like its looking for VC compilers, so you could try to mention compiler type with <code>-c mingw32</code>, since you have msys</p>\n\n<pre><code>python setup.py install -c mingw32\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I tried all the above answers, and found all of them not to work, this was perhaps I was using Windows 8 and had installed Visual Studio 2012. In this case, this is what you do.</p>\n\n<p>The <code>vcvarsall.bat</code> file is located here:\n<code>C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC</code></p>\n\n<p>Simply select the file, and copy it.</p>\n\n<p>Then go to this directory:\n<code>C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools</code></p>\n\n<p>and paste the file. And then, all should be well.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Maybe somebody can be interested, the following worked for me for the py2exe package.\n(I have windows 7 64 bit and portable python 2.7, Visual Studio 2005 Express with Windows SDK for Windows 7 and .NET Framework 4)</p>\n\n<pre><code>set VS90COMNTOOLS=%VS80COMNTOOLS%\n</code></pre>\n\n<p>then:</p>\n\n<pre><code>python.exe setup.py install\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can download the free Visual C++ 2008 Express Edition from <a href=\"http://go.microsoft.com/?linkid=7729279\">http://go.microsoft.com/?linkid=7729279</a>, which will set the VS90COMNTOOLS environment variable during installation and therefore build with a compatible compiler.</p>\n\n<p>As @PiotrDobrogost mentioned in a comment, his answer to this other question goes into details about why Visual C++ 2008 is the right thing to build with, but this can change as the Windows build of Python moves to newer versions of Visual Studio: <a href=\"http://stackoverflow.com/questions/3047542/building-lxml-for-python-2-7-on-windows/5122521#5122521\">Building lxml for Python 2.7 on Windows</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Look in the <code>setup.py</code> file of the package you are trying to install. If it is an older package it may be importing <code>distutils.core.setup()</code> rather than <code>setuptools.setup()</code>.</p>\n\n<p>I ran in to this (in 2015) with a combination of these factors:</p>\n\n<ol>\n<li><p>The Microsoft Visual C++ Compiler for Python 2.7 from <a href=\"http://aka.ms/vcpython27\">http://aka.ms/vcpython27</a></p></li>\n<li><p>An older package that uses <code>distutils.core.setup()</code></p></li>\n<li><p>Trying to do <code>python setup.py build</code> rather than using <code>pip</code>.</p></li>\n</ol>\n\n<p>If you use a recent version of pip, it will force (monkeypatch) the package to use setuptools, even if its <code>setup.py</code> calls for distutils. However, if you are not using pip, and instead are just doing <code>python setup.py build</code>, the build process will use <code>distutils.core.setup()</code>, which does not know about the compiler install location.</p>\n\n<hr>\n\n<h2>Solution</h2>\n\n<p><strong>Step 1:</strong> Open the appropriate Visual C++ 2008 Command Prompt</p>\n\n<p>Open the Start menu or Start screen, and search for \"Visual C++ 2008 32-bit Command Prompt\" (if your python is 32-bit) or \"Visual C++ 2008 64-bit Command Prompt\" (if your python is 64-bit). Run it. The command prompt should say Visual C++ 2008 ... in the title bar.</p>\n\n<p><strong>Step 2:</strong> Set environment variables</p>\n\n<p>Set these environment variables in the command prompt you just opened.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SET DISTUTILS_USE_SDK=1\nSET MSSdk=1\n</code></pre>\n\n<p>Reference <a href=\"http://bugs.python.org/issue23246\">http://bugs.python.org/issue23246</a></p>\n\n<p><strong>Step 3:</strong> Build and install</p>\n\n<p><code>cd</code> to the package you want to build, and run <code>python setup.py build</code>, then <code>python setup.py install</code>. If you want to install in to a virtualenv, activate it before you build. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had this problem using <strong>Python 3.4.1 on Windows 7 x64</strong>, and unfortunately the packages I needed didn't have suitable exe or wheels that I could use. This system requires a few 'workarounds', which are detailed below (and <strong>TLDR at bottom</strong>).</p>\n\n<p>Using the info in <a href=\"http://stackoverflow.com/a/18045219/3800244\">Jaxrtech's answer above</a>, I determined I needed Visual Studio C++ 2010 (sys.version return MSC v.1600), so I installed Visual C++ 2010 Express from the link in his answer, which is <a href=\"http://go.microsoft.com/?linkid=9709949\" rel=\"nofollow\">http://go.microsoft.com/?linkid=9709949</a>. I installed everything with updates, but as you can read below, this was a mistake. Only the original version of Express should be installed at this time (no updated anything).</p>\n\n<p>vcvarsall.bat was now present, but there was a new error when installing the package, <code>query_vcvarsall    raise ValueError(str(list(result.keys())))ValueError: [u'path']</code>. There are other stackoverflow questions with this error, such as <a href=\"http://stackoverflow.com/questions/13596407/errors-while-building-installing-c-module-for-python-2-7\">Errors while building/installing C module for Python 2.7</a></p>\n\n<p>I determined from that answer that 2010 Express only installs 32-bit compilers. To get 64-bit (and other) compilers, you need to install Windows 7.1 SDK. See <a href=\"http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx</a></p>\n\n<p>This would not install for me though, and the installer returned the error <code>installation failed with return code 5100</code>. I found the solution at the following link: <a href=\"http://support.microsoft.com/kb/2717426\" rel=\"nofollow\">http://support.microsoft.com/kb/2717426</a>. In short, if newer versions of x86 and x64 Microsoft Visual C++ 2010 Redistributable's are installed, they conflict with the ones in SDK installer, and need uninstalling first.</p>\n\n<p>The SDK then installed, but I noticed vcvars64.bat still did not exist in <code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin</code>, nor its subfolders. vcvarsall.bat runs the vcvars64 batch file, so without it, the python package still wouldn't install (I forgot the error that was shown at this time).</p>\n\n<p>I then found some instructions here: <a href=\"http://www.cryptohaze.com/wiki/index.php/Windows_7_Build_Setup#Download_VS_2010_and_Windows_SDK_7.1\" rel=\"nofollow\">http://www.cryptohaze.com/wiki/index.php/Windows_7_Build_Setup#Download_VS_2010_and_Windows_SDK_7.1</a>\nFollowing the instructions, I had already installed Express and 7.1 SDK, so installed SDK 7.1 SP1, and did the missing header file fix. I then manually created vcvars64.bat with the content <code>CALL setenv /x64</code>. I will paste all those instructions here, so they don't get lost.</p>\n\n<blockquote>\n  <p>Step 1 is to download Visual Studio Express 2010.</p>\n  \n  <p><a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express\" rel=\"nofollow\">http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express</a>\n  is a good place to start. Download the installer, and run it\n  (vc_web.exe). You don't need the SQL 2008 additional download.</p>\n  \n  <p>You'll also need the Windows SDK (currently 7.1) for the 64-bit\n  compilers - unless you want to do 32-bit only builds, which are not\n  fully supported...</p>\n  \n  <p><a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8279\" rel=\"nofollow\">http://www.microsoft.com/en-us/download/details.aspx?id=8279</a> is a good\n  starting point to download this - you'll want to run winsdk_web.exe\n  when downloaded!</p>\n  \n  <p>The default install here is just fine.</p>\n  \n  <p>Finally, download and install the Windows SDK 7.1 SP1 update:\n  <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=4422\" rel=\"nofollow\">http://www.microsoft.com/en-us/download/details.aspx?id=4422</a></p>\n  \n  <p>And, to fix missing header file, VS2010 SP1.\n  <a href=\"http://www.microsoft.com/downloads/en/confirmation.aspx?FamilyID=75568aa6-8107-475d-948a-ef22627e57a5\" rel=\"nofollow\">http://www.microsoft.com/downloads/en/confirmation.aspx?FamilyID=75568aa6-8107-475d-948a-ef22627e57a5</a></p>\n  \n  <p>And, bloody hell, fix the missing batch file for VS2010 Express. This\n  is getting downright absurd.</p>\n  \n  <p>In C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\amd64,\n  create \"vcvars64.bat\" with the following (you will need to be running\n  as administrator):</p>\n  \n  <p>CALL setenv /x64</p>\n</blockquote>\n\n<p>My python package still did not install (can't recall error). I then found some instructions (copied below) to use the special SDK 7.1 Command Prompt, see: <a href=\"https://mail.python.org/pipermail/distutils-sig/2012-February/018300.html\" rel=\"nofollow\">https://mail.python.org/pipermail/distutils-sig/2012-February/018300.html</a></p>\n\n<blockquote>\n  <p>Never mind this question.  Somebody here noticed this item on the menu:  Start-&gt;All Programs-&gt;Microsoft Windows SDK v7.1 -&gt;Windows SDK 7.1 Command Prompt</p>\n  \n  <p>This runs a batch job that appears to set up a working environment for the compiler.  From that prompt, you can type \"setup.py build\" or \"setup.py install\".</p>\n</blockquote>\n\n<p>I opened the Windows SDK 7.1 Command Prompt as instructed, and used it to run easy_install on the python package. And at last, success!</p>\n\n<hr>\n\n<p><strong>TLDR</strong>;</p>\n\n<ol>\n<li>Install Visual Studio Express 2010 (preferably without updated redistributables or SQL server).</li>\n<li>Install Windows 7.1 SDK</li>\n<li>Instal SDK 7.1 SP1 update, and VS2010 SP1 header file fix (this step may not be required).</li>\n<li>Manually create <code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\amd64\\vcvars64.bat</code> with content <code>CALL setenv /x64</code></li>\n<li>Start-&gt;All Programs-&gt;Microsoft Windows SDK v7.1 -&gt;Windows SDK 7.1 Command Prompt to open special x64 command prompt, which can then be used with python/easy_install/pip/etc (including those in virtual_envs).</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I tried many solutions but only one worked for me, the install of Microsoft Visual Studio <strong>2008</strong> Express C++.</p>\n\n<p>I got this issue with a Python 2.7 module written in C (yEnc, which has other issues with MS VS). Note that Python 2.7 is built with MS VS 2008 version, not 2010!</p>\n\n<p>Despite the fact it's free, it is quite hard to find since MS is promoting VS 2010.\nStill, the MSDN official very direct links are still working: check <a href=\"http://stackoverflow.com/a/15319069/2227298\">http://stackoverflow.com/a/15319069/2227298</a> for download links.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I spent almost 2 days figuring out how to fix this problem in my python 3.4 64 bit version: Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)] on win32</p>\n\n<p><strong>Solution 1, hard:</strong> (before reading this, read first Solution 2 below)\nFinally, this is what helped me:</p>\n\n<ol>\n<li>install <a href=\"http://go.microsoft.com/?linkid=9709949\" rel=\"nofollow\">Visual C++ 2010 Express</a></li>\n<li>install <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8279\" rel=\"nofollow\">Microsoft Windows SDK v7.1 for Windows 7</a></li>\n<li>create manually file <code>vcvars64.bat</code> in <code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\amd64</code> which contains <code>CALL \"C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\Bin\\SetEnv.cmd\" /x64</code> or other path depending on where you have yours installed</li>\n<li>(this seems to be optional) install <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=23691\" rel=\"nofollow\">Microsoft Visual Studio 2010 Service Pack 1</a> together with <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=4422\" rel=\"nofollow\">Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1</a></li>\n<li><p>after that I tried to <code>pip install numpy</code> but received the following error:</p>\n\n<pre><code>File \"numpy\\core\\setup.py\", line 686, in get_mathlib_info\nraise RuntimeError(\"Broken toolchain: cannot link a simple C program\")\nRuntimeError: Broken toolchain: cannot link a simple C program\n</code></pre>\n\n<p>I changed <code>mfinfo</code> to <code>None</code> in <code>C:\\Python34\\Lib\\distutils\\msvc9compiler.py</code> per this <a href=\"http://stackoverflow.com/a/23099820/4383472\">http://stackoverflow.com/a/23099820/4383472</a></p></li>\n<li>finally after <code>pip install numpy</code> command my avast antivirus tried to interfere into the installation process, but i quickly disabled it</li>\n</ol>\n\n<p>It took very long - several minutes for numpy to compile, I even thought that there was an error, but finally everything was ok.</p>\n\n<p><strong>Solution 2, easy:</strong>\n(I know this approach has already been mentioned in a highly voted <a href=\"http://stackoverflow.com/a/5983696/4383472\">answer</a>, but let me repeat since it really is easier)\nAfter going through all of this work I understood that the best way for me is just to use already precompiled binaries from <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"nofollow\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> in future. There is very small chance that I will ever need some package (or a version of a package) which this site doesn't contain. The installation process is also much quicker this way. For example, to install <code>numpy</code>:</p>\n\n<ol>\n<li>donwload <code>numpy\u20111.9.2+mkl\u2011cp34\u2011none\u2011win_amd64.whl</code> (if you have Python 3.4 64-bit) from that site</li>\n<li>in command prompt or powershell install it with pip <code>pip install numpy\u20111.9.2+mkl\u2011cp34\u2011none\u2011win_amd64.whl</code> (or full path to the file depending how command prompt is opened)</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use easy_install instead of pip it works for me.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you have mingw installed</p>\n\n<pre><code>pip install --global-option build_ext --global-option --compiler=mingw32 packagename\n</code></pre>\n\n<p>works, forcing pip to build using the mingw compiler instead of Microsoft's. See here <a href=\"https://github.com/pypa/pip/issues/18\" rel=\"nofollow\">https://github.com/pypa/pip/issues/18</a> for details (last post).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're looking to install pyodbc on a Windows box that <em>doesn't</em> have Visual Studio installed another option is to manually install pyodbc using the binary distribution.</p>\n\n<p>This is particularly useful if you do not have administrator privileges on the machine you're working with and are trying to set up a <a href=\"http://www.virtualenv.org/en/latest/\" rel=\"nofollow\">virtualenv</a>.</p>\n\n<p>Steps:</p>\n\n<ol>\n<li>Download the latest Windows installer from <a href=\"https://code.google.com/p/pyodbc/downloads/list\" rel=\"nofollow\">here</a> (pyodbc-X.X.X.win-Y-py2.7.exe)</li>\n<li>Open the installer executable using 7-Zip (or WinRAR or whatever)</li>\n<li>Extract pyodbc.pyd and pyodbc-X.X.X-py2.7.egg-info and place them in <code>[python installation directory or virtualenv]\\Lib\\site-packages</code></li>\n<li>There is no step 4 :)</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With Python 3.4, the dependency is on Visual Studio 2010. Installing Visual C++ 2010 Express fixed the problem for me. </p>\n\n<p>Tricking it into using the VS 2008 or 2013 installs that I happened to have didn't work.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answer given by @monkey is one of the correct ones, but it is incomplete.</p>\n\n<p>In case you'd like to use <a href=\"http://en.wikipedia.org/wiki/MinGW\" rel=\"nofollow\">MinGW</a>, you should select the C, C++ and also other development tools suggested during the MinGW installation process to also get \"make.exe.\"</p>\n\n<p>You must also have the path set to make.exe in the env.</p>\n\n<p>To complete his answer, here are the steps:</p>\n\n<ol>\n<li>Add mingw32's bin directory to your environment variables</li>\n<li>Append <code>C:\\Programs\\MinGW\\bin;C:\\Programs\\MinGW\\msys\\1.0\\bin;</code> to the PATH </li>\n<li><p>Edit (create if it doesn't exist) the <code>distutils.cfg</code> file located at <code>C:\\Python26\\Lib\\distutils\\distutils.cfg</code> to be:</p>\n\n<pre><code>[build]\ncompiler=mingw32\n</code></pre></li>\n</ol>\n\n<p>Make sure the environment variables is set by opening a new cmd.exe.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>fastest solution</strong>:</p>\n\n<p>If you have <strong>python 3.4.x</strong>, the solution is simply to install \nVC++ 2010 since it is used to compile itself into.</p>\n\n<p><a href=\"https://www.visualstudio.com/en-us/downloads#d-2010-express\" rel=\"nofollow\">https://www.visualstudio.com/en-us/downloads#d-2010-express</a></p>\n\n<p>my python version is\nMSC v.1600 32 bit (intel)] on win32</p>\n\n<p><em>worked fine on Windows8</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Go here: <a href=\"http://docs.continuum.io/anaconda/install.html#windows-install\" rel=\"nofollow\">http://docs.continuum.io/anaconda/install.html#windows-install</a></p>\n\n<p>There are instructions to install anaconda which will provide a GUI and a silent install of a majority of the packages that seem to be causing this issue from <a href=\"http://www.scipy.org/\" rel=\"nofollow\">http://www.scipy.org/</a>.  I am aware of the solution for 2.7 here <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=44266\" rel=\"nofollow\">https://www.microsoft.com/en-us/download/details.aspx?id=44266</a> but I did not see an option for Python 3.4.  After downloading and installing Anaconda you should be able to import a majority of the packages you need from scipy.</p>\n\n<p>Hope this helps some people.  Took me 45 minutes of scouring posts and sites.</p>\n\n<p>EDIT: Just wanted to note there is a Python34 link on the GUI page next to the OS symbols.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Install Visual Studio 2015 Community Edition from <a href=\"https://www.visualstudio.com\" rel=\"nofollow\">https://www.visualstudio.com</a>,\nthen</p>\n\n<p>for Python 3.4</p>\n\n<p><code>set VS100COMNTOOLS=%VS140COMNTOOLS% &amp;&amp; pip install XX</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I don't know if it is too late, but I found <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=44266\" rel=\"nofollow\">Microsoft Visual C++ Compiler for Python 2.7</a> which reads</p>\n\n<blockquote>\n  <p>The typical error message you will receive if you need this compiler package is <strong>Unable to find vcvarsall.bat</strong></p>\n</blockquote>\n\n<p>Hope this helps!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had the same error (which I find silly and not really helpful whatsoever as error messages go) and continued having problems, despite having a C compiler available. </p>\n\n<p>Surprising, what ended up working for me was simply <strong>upgrading pip and setuptools to the most recent version</strong>. Hope this helps someone else out there.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I followed the instructions <a href=\"http://springflex.blogspot.ru/2014/02/how-to-fix-valueerror-when-trying-to.html\" rel=\"nofollow\">http://springflex.blogspot.ru/2014/02/how-to-fix-valueerror-when-trying-to.html</a>. but nothing happened.\nThen I installed 2010 Visual Studio Express (<a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\" rel=\"nofollow\">http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express</a>) following the advice <a href=\"http://blog.python.org/2012/05/recent-windows-changes-in-python-33.html\" rel=\"nofollow\">http://blog.python.org/2012/05/recent-windows-changes-in-python-33.html</a>\nit helped me</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I encountered this issue when I tried to install numpy library on my python 3.5. The solution is to install VS2015. I had VS2008, 2012, 2013, none of which is compatible with python 3.5. Apparently newer version of python has dependency on newer versions of VS.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You want this:</p>\n\n<pre><code>class a:\n    def __init__(self):\n        self.list = []\n</code></pre>\n\n<p>Declaring the variables inside the class declaration makes them \"class\" members and not instance members. Declaring them inside the <code>__init__</code> method makes sure that a new instance of the members is created alongside every new instance of the object, which is the behavior you're looking for.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You declared \"list\" as a \"class level property\" and not \"instance level property\".  In order to have properties scoped at the instance level, you need to initialize them through referencing with the \"self\" parameter in the <code>__init__</code> method (or elsewhere depending on the situation).</p>\n\n<p>You don't strictly have to initialize the instance properties in the <code>__init__</code> method but it makes for easier understanding.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The accepted answer works but a little more explanation does not hurt. </p>\n\n<p>Class attributes do not become instance attributes when an instance is created. They become instance attributes when a value is assigned to them.</p>\n\n<p>In the original code no value is assigned to <code>list</code> attribute after instantiation; so it remains a class attribute. Defining list inside <code>__init__</code> works because <code>__init__</code> is called after instantiation. Alternatively, this code would also produce the desired output:</p>\n\n<pre><code>&gt;&gt;&gt; class a:\n    list = []\n\n&gt;&gt;&gt; y = a()\n&gt;&gt;&gt; x = a()\n&gt;&gt;&gt; x.list = []\n&gt;&gt;&gt; y.list = []\n&gt;&gt;&gt; x.list.append(1)\n&gt;&gt;&gt; y.list.append(2)\n&gt;&gt;&gt; x.list.append(3)\n&gt;&gt;&gt; y.list.append(4)\n&gt;&gt;&gt; print(x.list)\n[1, 3]\n&gt;&gt;&gt; print(y.list)\n[2, 4]\n</code></pre>\n\n<p>However, the confusing scenario in the question will never happen to immutable objects such as numbers and strings, because their value cannot be changed without assignment. For example a code similar to the original with string attribute type works without any problem:</p>\n\n<pre><code>&gt;&gt;&gt; class a:\n    string = ''\n\n\n&gt;&gt;&gt; x = a()\n&gt;&gt;&gt; y = a()\n&gt;&gt;&gt; x.string += 'x'\n&gt;&gt;&gt; y.string += 'y'\n&gt;&gt;&gt; x.string\n'x'\n&gt;&gt;&gt; y.string\n'y'\n</code></pre>\n\n<p>So to summarize: <strong>class attributes become instance attributes if and only if a value is assigned to them after instantiation, being in the <code>__init__</code> method or not</strong>. This is a good thing because this way you can have static attributes if you never assign a value to an attribute after instantiation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes you must declare in the \"constructor\" if you want that the list becomes an object property and not a class property.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>So nearly every response here seems to miss a particular point.  Class variables <strong>never</strong> become instance variables as demonstrated by the code below.  By utilizing a metaclass to intercept variable assignment at the class level, we can see that when a.myattr is reassigned, the field assignment magic method on the class is not called.  This is because the assignment <strong>creates a new instance variable</strong>.  This behavior has <strong>absolutely nothing</strong> to do with the class variable as demonstrated by the second class which has no class variables and yet still allows field assignment.</p>\n\n<pre><code>class mymeta(type):\n    def __init__(cls, name, bases, d):\n        pass\n\n    def __setattr__(cls, attr, value):\n        print(\"setting \" + attr)\n        super(mymeta, cls).__setattr__(attr, value)\n\nclass myclass(object):\n    __metaclass__ = mymeta\n    myattr = []\n\na = myclass()\na.myattr = []           #NOTHING IS PRINTED\nmyclass.myattr = [5]    #change is printed here\nb = myclass()\nprint(b.myattr)         #pass through lookup on the base class\n\nclass expando(object):\n    pass\n\na = expando()\na.random = 5            #no class variable required\nprint(a.random)         #but it still works\n</code></pre>\n\n<p><strong>IN SHORT</strong> Class variables have NOTHING to do with instance variables.</p>\n\n<p><strong>More clearly</strong> They just happen to be in the scope for lookups on instances. Class variables are in fact <em>instance variables</em> on the class object itself.  You can also have <em>metaclass variables</em> if you want as well because metaclasses themselves are objects too.  Everything is an object whether it is used to create other objects or not, so do not get bound up in the semantics of other languages usage of the word class.  In python, a class is really just an object that is used to determine how to create other objects and what their behaviors will be.  Metaclasses are classes that create classes, just to further illustrate this point. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think the answers provided are misleading. A property defined inside a class becomes an instance property when the object is instantiated, <strong>regardless of how you define it</strong>. So copies of <code>a.list</code> are made, and <code>x.list</code> and <code>y.list</code> are different copies. The reason they seem to be the same is that they are both aliases to the same list. But that is a consequence of the way lists work, not of the way classes work. If you were to do the same thing with numbers instead of lists (or just using += instead of append, which would create a new list) you would see that changing <code>x.attr</code> doesn't affect changing <code>y.attr</code>.</p>\n\n<p>Defining <code>self.list</code> inside <code>__init__</code> works, because the function is called twice, once for each time the object is instantiated, and so, two different lists are created.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>A list comprehension is best for this kind of loop.</p>\n\n<pre><code>somelist = [x for x in somelist if determine(x)]\n</code></pre>\n\n<p><strong>EDIT:</strong>\nJobs' comment says that he wants the 'determine' to say what should be deleted. That would then be just.</p>\n\n<pre><code>somelist = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<pre><code>somelist[:] = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>Brandon Corfman is correct, you will lose reference to the original list unless you do it this way ( see <a href=\"http://stackoverflow.com/a/1208792/16587\">Alex Martelli's answer</a> for details).</p>\n\n<p>Also, I liked <a href=\"http://stackoverflow.com/a/1207500/16587\">Cides' suggestion that uses itertools</a>. However there is no non iterator <code>filterfalse</code>, so it will have to be.</p>\n\n<pre><code>from itertools import ifilterfalse\nsomelist[:] = list(ifilterfalse(determine, somelist))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in @Lennart's suggestion -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.</p>\n\n<p>Fortunately, it's extremely easy to get both the speed of list comprehensions AND the required semantics of in-place alteration -- just code:</p>\n\n<pre><code>somelist[:] = [tup for tup in somelist if determine(tup)]\n</code></pre>\n\n<p>Note the subtle difference with other answers: this one is NOT assigning to a barename - it's assigning to a list slice that just happens to be the entire list, thereby replacing the list <em>contents</em> <strong>within the same Python list object</strong>, rather than just reseating one reference (from previous list object to new list object) like the other answers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.</p>\n\n<p>For example (depends on what type of list):</p>\n\n<pre><code>for tup in somelist[:]:\n    etc....\n</code></pre>\n\n<p>An example:</p>\n\n<pre><code>&gt;&gt;&gt; somelist = range(10)\n&gt;&gt;&gt; for x in somelist:\n...     somelist.remove(x)\n&gt;&gt;&gt; somelist\n[1, 3, 5, 7, 9]\n\n&gt;&gt;&gt; somelist = range(10)\n&gt;&gt;&gt; for x in somelist[:]:\n...     somelist.remove(x)\n&gt;&gt;&gt; somelist\n[]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>for i in xrange(len(somelist) - 1, -1, -1):\n    if some_condition(somelist, i):\n        del somelist[i]\n</code></pre>\n\n<p>You need to go backwards otherwise it's a bit like sawing off the tree-branch that you are sitting on :-)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your best approach for such an example would be a <a href=\"http://docs.python.org/tutorial/datastructures.html#list-comprehensions\">list comprehension</a></p>\n\n<pre><code>somelist = [tup for tup in somelist if determine(tup)]\n</code></pre>\n\n<p>In cases where you're doing something more complex than calling a <code>determine</code> function, I prefer constructing a new list and simply appending to it as I go.  For example</p>\n\n<pre><code>newlist = []\nfor tup in somelist:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\nsomelist = newlist\n</code></pre>\n\n<p>Copying the list using <code>remove</code> might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an <code>O(n)</code> <code>remove</code> operation for each element being removed, making this an <code>O(n^2)</code> algorithm.</p>\n\n<pre><code>for tup in somelist[:]:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For those that like functional programming:</p>\n\n<pre><code>&gt;&gt;&gt; somelist[:] = filter(lambda tup: not determine(tup), somelist)\nor:\n&gt;&gt;&gt; from itertools import ifilterfalse\n&gt;&gt;&gt; somelist[:] = list(ifilterfalse(determine, somelist))\n</code></pre>\n\n<p>Updated to correct my answer. Thanks, David Raznick.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The question was about modifying while iterating, not computing a new list and storing it in the extent of the old list.  The only solution which actually answers the question is the one which iterates backwards by index.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You might want to use filter() available as the built-in.</p>\n\n<p><a href=\"http://docs.python.org/library/functions.html#filter\" rel=\"nofollow\">http://docs.python.org/library/functions.html#filter</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to do anything else during the iteration, it may be nice to get both the index (which guarantees you being able to reference it, for example if you have a list of dicts) and the actual list item contents.</p>\n\n<pre><code>inlist = [{'field1':10, 'field2':20}, {'field1':30, 'field2':15}]    \nfor idx, i in enumerate(inlist):\n    do some stuff with i['field1']\n    if somecondition:\n        xlist.append(idx)\nfor i in reversed(xlist): del inlist[i]\n</code></pre>\n\n<p><code>enumerate</code> gives you access to the item and the index at once. <code>reversed</code> is so that the indices that you're going to later delete don't change on you. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can try for-looping in reverse so for some_list you'll do something like:</p>\n\n<pre><code>list_len = len(some_list)\nfor i in range(list_len):\n    reverse_i = list_len - 1 - i\n    cur = some_list[reverse_i]\n\n    # some logic with cur element\n\n    if some_condition:\n        some_list.pop(reverse_i)\n</code></pre>\n\n<p>This way the index is aligned and doesn't suffer from the list updates (regardless whether you pop cur element or not).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Simple as:</p>\n\n<pre><code>for (i, tup) in enumerate(somelist):\n    if determine(tup):\n         del somelist[i]\n</code></pre>\n\n<p>This deletes the elements in really in place. I have cases where I have lots of codes inside the for and deleting is just one possible action, usually not the main one and on a <code>except</code> clause, where frequently the list is too big to make copies.</p>\n\n<p>This code running:</p>\n\n<pre><code>&gt;&gt;&gt; somelist = list(enumerate( 'Sun Mon Tue Wed Thu Fri Sat'.split(), 1))\n&gt;&gt;&gt; print somelist\n[(1, 'Sun'), (2, 'Mon'), (3, 'Tue'), (4, 'Wed'), (5, 'Thu'), (6, 'Fri'), (7, 'Sat')]\n\n&gt;&gt;&gt; def determine(tup):\n...     return tup[0] == 4 or tup[1] == 'Fri'\n... \n&gt;&gt;&gt; for (i, tup) in enumerate(somelist):\n...     if determine(tup):\n...         del somelist[i]\n... \n&gt;&gt;&gt; print somelist\n[(1, 'Sun'), (2, 'Mon'), (3, 'Tue'), (5, 'Thu'), (7, 'Sat')]\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Check out <a href=\"http://docs.python.org/reference/compound%5Fstmts.html#function\">the documentation</a> to see how decorators work. Here is what you asked for:</p>\n\n<pre><code>def makebold(fn):\n    def wrapped():\n        return \"&lt;b&gt;\" + fn() + \"&lt;/b&gt;\"\n    return wrapped\n\ndef makeitalic(fn):\n    def wrapped():\n        return \"&lt;i&gt;\" + fn() + \"&lt;/i&gt;\"\n    return wrapped\n\n@makebold\n@makeitalic\ndef hello():\n    return \"hello world\"\n\nprint hello() ## returns &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are not into long explanations, see <a href=\"http://stackoverflow.com/questions/739654/understanding-python-decorators#answer-739665\">Paolo Bergantino\u2019s answer</a>.</p>\n\n<h1>Decorator Basics</h1>\n\n<h2>Python\u2019s functions are objects</h2>\n\n<p>To understand decorators, you must first understand that functions are objects in Python.\nThis has important consequences. Let\u2019s see why with a simple example :</p>\n\n<pre><code>def shout(word=\"yes\"):\n    return word.capitalize()+\"!\"\n\nprint shout()\n# outputs : 'Yes!'\n\n# As an object, you can assign the function to a variable like any\n# other object \n\nscream = shout\n\n# Notice we don't use parentheses: we are not calling the function, we are\n# putting the function \"shout\" into the variable \"scream\". \n# It means you can then call \"shout\" from \"scream\":\n\nprint scream()\n# outputs : 'Yes!'\n\n# More than that, it means you can remove the old name 'shout', and\n# the function will still be accessible from 'scream'\n\ndel shout\ntry:\n    print shout()\nexcept NameError, e:\n    print e\n    #outputs: \"name 'shout' is not defined\"\n\nprint scream()\n# outputs: 'Yes!'\n</code></pre>\n\n<p>Okay! Keep this in mind. We\u2019ll circle back to it shortly. </p>\n\n<p>Another interesting property of Python functions is they can be defined... inside another function!</p>\n\n<pre><code>def talk():\n\n    # You can define a function on the fly in \"talk\" ...\n    def whisper(word=\"yes\"):\n        return word.lower()+\"...\"\n\n    # ... and use it right away!\n\n    print whisper()\n\n# You call \"talk\", that defines \"whisper\" EVERY TIME you call it, then\n# \"whisper\" is called in \"talk\". \ntalk()\n# outputs: \n# \"yes...\"\n\n# But \"whisper\" DOES NOT EXIST outside \"talk\":\n\ntry:\n    print whisper()\nexcept NameError, e:\n    print e\n    #outputs : \"name 'whisper' is not defined\"*\n    Python's functions are objects\n</code></pre>\n\n<h2>Functions references</h2>\n\n<p>Okay, still here? Now the fun part... </p>\n\n<p>You\u2019ve seen that functions are objects. Therefore, functions:</p>\n\n<ul>\n<li>can be assigned to a variable</li>\n<li>can be defined in another function</li>\n</ul>\n\n<p>That means that <strong>a function can <code>return</code> another function</strong>. Have a look! \u263a</p>\n\n<pre><code>def getTalk(kind=\"shout\"):\n\n    # We define functions on the fly\n    def shout(word=\"yes\"):\n        return word.capitalize()+\"!\"\n\n    def whisper(word=\"yes\") :\n        return word.lower()+\"...\";\n\n    # Then we return one of them\n    if kind == \"shout\":\n        # We don't use \"()\", we are not calling the function,\n        # we are returning the function object\n        return shout  \n    else:\n        return whisper\n\n# How do you use this strange beast?\n\n# Get the function and assign it to a variable\ntalk = getTalk()      \n\n# You can see that \"talk\" is here a function object:\nprint talk\n#outputs : &lt;function shout at 0xb7ea817c&gt;\n\n# The object is the one returned by the function:\nprint talk()\n#outputs : Yes!\n\n# And you can even use it directly if you feel wild:\nprint getTalk(\"whisper\")()\n#outputs : yes...\n</code></pre>\n\n<p>But wait...there\u2019s more! </p>\n\n<p>If you can <code>return</code> a function, you can pass one as a parameter:</p>\n\n<pre><code>def doSomethingBefore(func): \n    print \"I do something before then I call the function you gave me\"\n    print func()\n\ndoSomethingBefore(scream)\n#outputs: \n#I do something before then I call the function you gave me\n#Yes!\n</code></pre>\n\n<p>Well, you just have everything needed to understand decorators. You see, decorators are \u201cwrappers\u201d, which means that <strong>they let you execute code before and after the function they decorate</strong> without modifying the function itself.</p>\n\n<h2>Handcrafted decorators</h2>\n\n<p>How you\u2019d do it manually:</p>\n\n<pre><code># A decorator is a function that expects ANOTHER function as parameter\ndef my_shiny_new_decorator(a_function_to_decorate):\n\n    # Inside, the decorator defines a function on the fly: the wrapper.\n    # This function is going to be wrapped around the original function\n    # so it can execute code before and after it.\n    def the_wrapper_around_the_original_function():\n\n        # Put here the code you want to be executed BEFORE the original \n        # function is called\n        print \"Before the function runs\"\n\n        # Call the function here (using parentheses)\n        a_function_to_decorate()\n\n        # Put here the code you want to be executed AFTER the original \n        # function is called\n        print \"After the function runs\"\n\n    # At this point, \"a_function_to_decorate\" HAS NEVER BEEN EXECUTED.\n    # We return the wrapper function we have just created.\n    # The wrapper contains the function and the code to execute before\n    # and after. It\u2019s ready to use!\n    return the_wrapper_around_the_original_function\n\n# Now imagine you create a function you don't want to ever touch again.\ndef a_stand_alone_function():\n    print \"I am a stand alone function, don't you dare modify me\"\n\na_stand_alone_function() \n#outputs: I am a stand alone function, don't you dare modify me\n\n# Well, you can decorate it to extend its behavior.\n# Just pass it to the decorator, it will wrap it dynamically in \n# any code you want and return you a new function ready to be used:\n\na_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)\na_stand_alone_function_decorated()\n#outputs:\n#Before the function runs\n#I am a stand alone function, don't you dare modify me\n#After the function runs\n</code></pre>\n\n<p>Now, you probably want that every time you call <code>a_stand_alone_function</code>, <code>a_stand_alone_function_decorated</code> is called instead. That\u2019s easy, just overwrite <code>a_stand_alone_function</code> with the function returned by <code>my_shiny_new_decorator</code>:</p>\n\n<pre><code>a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)\na_stand_alone_function()\n#outputs:\n#Before the function runs\n#I am a stand alone function, don't you dare modify me\n#After the function runs\n\n# And guess what? That\u2019s EXACTLY what decorators do!\n</code></pre>\n\n<h2>Decorators demystified</h2>\n\n<p>The previous example, using the decorator syntax:</p>\n\n<pre><code>@my_shiny_new_decorator\ndef another_stand_alone_function():\n    print \"Leave me alone\"\n\nanother_stand_alone_function()  \n#outputs:  \n#Before the function runs\n#Leave me alone\n#After the function runs\n</code></pre>\n\n<p>Yes, that\u2019s all, it\u2019s that simple. <code>@decorator</code> is just a shortcut to:</p>\n\n<pre><code>another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)\n</code></pre>\n\n<p>Decorators are just a pythonic variant of the <a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorator design pattern</a>. There are several classic design patterns embedded in Python to ease development (like iterators).</p>\n\n<p>Of course, you can accumulate decorators:</p>\n\n<pre><code>def bread(func):\n    def wrapper():\n        print \"&lt;/''''''\\&gt;\"\n        func()\n        print \"&lt;\\______/&gt;\"\n    return wrapper\n\ndef ingredients(func):\n    def wrapper():\n        print \"#tomatoes#\"\n        func()\n        print \"~salad~\"\n    return wrapper\n\ndef sandwich(food=\"--ham--\"):\n    print food\n\nsandwich()\n#outputs: --ham--\nsandwich = bread(ingredients(sandwich))\nsandwich()\n#outputs:\n#&lt;/''''''\\&gt;\n# #tomatoes#\n# --ham--\n# ~salad~\n#&lt;\\______/&gt;\n</code></pre>\n\n<p>Using the Python decorator syntax:</p>\n\n<pre><code>@bread\n@ingredients\ndef sandwich(food=\"--ham--\"):\n    print food\n\nsandwich()\n#outputs:\n#&lt;/''''''\\&gt;\n# #tomatoes#\n# --ham--\n# ~salad~\n#&lt;\\______/&gt;\n</code></pre>\n\n<p>The order you set the decorators MATTERS:</p>\n\n<pre><code>@ingredients\n@bread\ndef strange_sandwich(food=\"--ham--\"):\n    print food\n\nstrange_sandwich()\n#outputs:\n##tomatoes#\n#&lt;/''''''\\&gt;\n# --ham--\n#&lt;\\______/&gt;\n# ~salad~\n</code></pre>\n\n<hr>\n\n<h1>Now: to answer the question...</h1>\n\n<p>As a conclusion, you can easily see how to answer the question:</p>\n\n<pre><code># The decorator to make it bold\ndef makebold(fn):\n    # The new function the decorator returns\n    def wrapper():\n        # Insertion of some code before and after\n        return \"&lt;b&gt;\" + fn() + \"&lt;/b&gt;\"\n    return wrapper\n\n# The decorator to make it italic\ndef makeitalic(fn):\n    # The new function the decorator returns\n    def wrapper():\n        # Insertion of some code before and after\n        return \"&lt;i&gt;\" + fn() + \"&lt;/i&gt;\"\n    return wrapper\n\n@makebold\n@makeitalic\ndef say():\n    return \"hello\"\n\nprint say() \n#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;\n\n# This is the exact equivalent to \ndef say():\n    return \"hello\"\nsay = makebold(makeitalic(say))\n\nprint say() \n#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n\n<p>You can now just leave happy, or burn your brain a little bit more and see advanced uses of decorators.</p>\n\n<hr>\n\n<h1>Taking decorators to the next level</h1>\n\n<h2>Passing arguments to the decorated function</h2>\n\n<pre><code># It\u2019s not black magic, you just have to let the wrapper \n# pass the argument:\n\ndef a_decorator_passing_arguments(function_to_decorate):\n    def a_wrapper_accepting_arguments(arg1, arg2):\n        print \"I got args! Look:\", arg1, arg2\n        function_to_decorate(arg1, arg2)\n    return a_wrapper_accepting_arguments\n\n# Since when you are calling the function returned by the decorator, you are\n# calling the wrapper, passing arguments to the wrapper will let it pass them to \n# the decorated function\n\n@a_decorator_passing_arguments\ndef print_full_name(first_name, last_name):\n    print \"My name is\", first_name, last_name\n\nprint_full_name(\"Peter\", \"Venkman\")\n# outputs:\n#I got args! Look: Peter Venkman\n#My name is Peter Venkman\n</code></pre>\n\n<h2>Decorating methods</h2>\n\n<p>One nifty thing about Python is that methods and functions are really the same.  The only difference is that methods expect that their first argument is a reference to the current object (<code>self</code>). </p>\n\n<p>That means you can build a decorator for methods the same way! Just remember to take <code>self</code> into consideration:</p>\n\n<pre><code>def method_friendly_decorator(method_to_decorate):\n    def wrapper(self, lie):\n        lie = lie - 3 # very friendly, decrease age even more :-)\n        return method_to_decorate(self, lie)\n    return wrapper\n\n\nclass Lucy(object):\n\n    def __init__(self):\n        self.age = 32\n\n    @method_friendly_decorator\n    def sayYourAge(self, lie):\n        print \"I am %s, what did you think?\" % (self.age + lie)\n\nl = Lucy()\nl.sayYourAge(-3)\n#outputs: I am 26, what did you think?\n</code></pre>\n\n<p>If you\u2019re making general-purpose decorator--one you\u2019ll apply to any function or method, no matter its arguments--then just use <code>*args, **kwargs</code>:</p>\n\n<pre><code>def a_decorator_passing_arbitrary_arguments(function_to_decorate):\n    # The wrapper accepts any arguments\n    def a_wrapper_accepting_arbitrary_arguments(*args, **kwargs):\n        print \"Do I have args?:\"\n        print args\n        print kwargs\n        # Then you unpack the arguments, here *args, **kwargs\n        # If you are not familiar with unpacking, check:\n        # http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/\n        function_to_decorate(*args, **kwargs)\n    return a_wrapper_accepting_arbitrary_arguments\n\n@a_decorator_passing_arbitrary_arguments\ndef function_with_no_argument():\n    print \"Python is cool, no argument here.\"\n\nfunction_with_no_argument()\n#outputs\n#Do I have args?:\n#()\n#{}\n#Python is cool, no argument here.\n\n@a_decorator_passing_arbitrary_arguments\ndef function_with_arguments(a, b, c):\n    print a, b, c\n\nfunction_with_arguments(1,2,3)\n#outputs\n#Do I have args?:\n#(1, 2, 3)\n#{}\n#1 2 3 \n\n@a_decorator_passing_arbitrary_arguments\ndef function_with_named_arguments(a, b, c, platypus=\"Why not ?\"):\n    print \"Do %s, %s and %s like platypus? %s\" %\\\n    (a, b, c, platypus)\n\nfunction_with_named_arguments(\"Bill\", \"Linus\", \"Steve\", platypus=\"Indeed!\")\n#outputs\n#Do I have args ? :\n#('Bill', 'Linus', 'Steve')\n#{'platypus': 'Indeed!'}\n#Do Bill, Linus and Steve like platypus? Indeed!\n\nclass Mary(object):\n\n    def __init__(self):\n        self.age = 31\n\n    @a_decorator_passing_arbitrary_arguments\n    def sayYourAge(self, lie=-3): # You can now add a default value\n        print \"I am %s, what did you think ?\" % (self.age + lie)\n\nm = Mary()\nm.sayYourAge()\n#outputs\n# Do I have args?:\n#(&lt;__main__.Mary object at 0xb7d303ac&gt;,)\n#{}\n#I am 28, what did you think?\n</code></pre>\n\n<h2>Passing arguments to the decorator</h2>\n\n<p>Great, now what would you say about passing arguments to the decorator itself? </p>\n\n<p>This can get somewhat twisted, since a decorator must accept a function as an argument. Therefore, you cannot pass the decorated function\u2019s arguments directly to the decorator.</p>\n\n<p>Before rushing to the solution, let\u2019s write a little reminder: </p>\n\n<pre><code># Decorators are ORDINARY functions\ndef my_decorator(func):\n    print \"I am an ordinary function\"\n    def wrapper():\n        print \"I am function returned by the decorator\"\n        func()\n    return wrapper\n\n# Therefore, you can call it without any \"@\"\n\ndef lazy_function():\n    print \"zzzzzzzz\"\n\ndecorated_function = my_decorator(lazy_function)\n#outputs: I am an ordinary function\n\n# It outputs \"I am an ordinary function\", because that\u2019s just what you do:\n# calling a function. Nothing magic.\n\n@my_decorator\ndef lazy_function():\n    print \"zzzzzzzz\"\n\n#outputs: I am an ordinary function\n</code></pre>\n\n<p>It\u2019s exactly the same. \"<code>my_decorator</code>\" is called. So when you <code>@my_decorator</code>, you are telling Python to call the function 'labelled by the variable \"<code>my_decorator</code>\"'. </p>\n\n<p>This is important! The label you give can point directly to the decorator\u2014<strong>or not</strong>. </p>\n\n<p>Let\u2019s get evil. \u263a</p>\n\n<pre><code>def decorator_maker():\n\n    print \"I make decorators! I am executed only once: \"+\\\n          \"when you make me create a decorator.\"\n\n    def my_decorator(func):\n\n        print \"I am a decorator! I am executed only when you decorate a function.\"\n\n        def wrapped():\n            print (\"I am the wrapper around the decorated function. \"\n                  \"I am called when you call the decorated function. \"\n                  \"As the wrapper, I return the RESULT of the decorated function.\")\n            return func()\n\n        print \"As the decorator, I return the wrapped function.\"\n\n        return wrapped\n\n    print \"As a decorator maker, I return a decorator\"\n    return my_decorator\n\n# Let\u2019s create a decorator. It\u2019s just a new function after all.\nnew_decorator = decorator_maker()       \n#outputs:\n#I make decorators! I am executed only once: when you make me create a decorator.\n#As a decorator maker, I return a decorator\n\n# Then we decorate the function\n\ndef decorated_function():\n    print \"I am the decorated function.\"\n\ndecorated_function = new_decorator(decorated_function)\n#outputs:\n#I am a decorator! I am executed only when you decorate a function.\n#As the decorator, I return the wrapped function\n\n# Let\u2019s call the function:\ndecorated_function()\n#outputs:\n#I am the wrapper around the decorated function. I am called when you call the decorated function.\n#As the wrapper, I return the RESULT of the decorated function.\n#I am the decorated function.\n</code></pre>\n\n<p>No surprise here. </p>\n\n<p>Let\u2019s do EXACTLY the same thing, but skip all the pesky intermediate variables:</p>\n\n<pre><code>def decorated_function():\n    print \"I am the decorated function.\"\ndecorated_function = decorator_maker()(decorated_function)\n#outputs:\n#I make decorators! I am executed only once: when you make me create a decorator.\n#As a decorator maker, I return a decorator\n#I am a decorator! I am executed only when you decorate a function.\n#As the decorator, I return the wrapped function.\n\n# Finally:\ndecorated_function()    \n#outputs:\n#I am the wrapper around the decorated function. I am called when you call the decorated function.\n#As the wrapper, I return the RESULT of the decorated function.\n#I am the decorated function.\n</code></pre>\n\n<p>Let\u2019s make it <em>even shorter</em>:</p>\n\n<pre><code>@decorator_maker()\ndef decorated_function():\n    print \"I am the decorated function.\"\n#outputs:\n#I make decorators! I am executed only once: when you make me create a decorator.\n#As a decorator maker, I return a decorator\n#I am a decorator! I am executed only when you decorate a function.\n#As the decorator, I return the wrapped function.\n\n#Eventually: \ndecorated_function()    \n#outputs:\n#I am the wrapper around the decorated function. I am called when you call the decorated function.\n#As the wrapper, I return the RESULT of the decorated function.\n#I am the decorated function.\n</code></pre>\n\n<p>Hey, did you see that? We used a function call with the \"<code>@</code>\" syntax! :-)</p>\n\n<p>So, back to decorators with arguments. If we can use functions to generate the decorator on the fly, we can pass arguments to that function, right?</p>\n\n<pre><code>def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):\n\n    print \"I make decorators! And I accept arguments:\", decorator_arg1, decorator_arg2\n\n    def my_decorator(func):\n        # The ability to pass arguments here is a gift from closures.\n        # If you are not comfortable with closures, you can assume it\u2019s ok,\n        # or read: http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python\n        print \"I am the decorator. Somehow you passed me arguments:\", decorator_arg1, decorator_arg2\n\n        # Don't confuse decorator arguments and function arguments!\n        def wrapped(function_arg1, function_arg2) :\n            print (\"I am the wrapper around the decorated function.\\n\"\n                  \"I can access all the variables\\n\"\n                  \"\\t- from the decorator: {0} {1}\\n\"\n                  \"\\t- from the function call: {2} {3}\\n\"\n                  \"Then I can pass them to the decorated function\"\n                  .format(decorator_arg1, decorator_arg2,\n                          function_arg1, function_arg2))\n            return func(function_arg1, function_arg2)\n\n        return wrapped\n\n    return my_decorator\n\n@decorator_maker_with_arguments(\"Leonard\", \"Sheldon\")\ndef decorated_function_with_arguments(function_arg1, function_arg2):\n    print (\"I am the decorated function and only knows about my arguments: {0}\"\n           \" {1}\".format(function_arg1, function_arg2))\n\ndecorated_function_with_arguments(\"Rajesh\", \"Howard\")\n#outputs:\n#I make decorators! And I accept arguments: Leonard Sheldon\n#I am the decorator. Somehow you passed me arguments: Leonard Sheldon\n#I am the wrapper around the decorated function. \n#I can access all the variables \n#   - from the decorator: Leonard Sheldon \n#   - from the function call: Rajesh Howard \n#Then I can pass them to the decorated function\n#I am the decorated function and only knows about my arguments: Rajesh Howard\n</code></pre>\n\n<p>Here it is: a decorator with arguments. Arguments can be set as variable:</p>\n\n<pre><code>c1 = \"Penny\"\nc2 = \"Leslie\"\n\n@decorator_maker_with_arguments(\"Leonard\", c1)\ndef decorated_function_with_arguments(function_arg1, function_arg2):\n    print (\"I am the decorated function and only knows about my arguments:\"\n           \" {0} {1}\".format(function_arg1, function_arg2))\n\ndecorated_function_with_arguments(c2, \"Howard\")\n#outputs:\n#I make decorators! And I accept arguments: Leonard Penny\n#I am the decorator. Somehow you passed me arguments: Leonard Penny\n#I am the wrapper around the decorated function. \n#I can access all the variables \n#   - from the decorator: Leonard Penny \n#   - from the function call: Leslie Howard \n#Then I can pass them to the decorated function\n#I am the decorated function and only knows about my arguments: Leslie Howard\n</code></pre>\n\n<p>As you can see, you can pass arguments to the decorator like any function using this trick. You can even use <code>*args, **kwargs</code> if you wish. But remember decorators are called <strong>only once</strong>. Just when Python imports the script. You can't dynamically set the arguments afterwards. When you do \"import x\", <strong>the function is already decorated</strong>, so you can't\nchange anything.</p>\n\n<hr>\n\n<h1>Let\u2019s practice: decorating a decorator</h1>\n\n<p>Okay, as a bonus, I'll give you a snippet to make any decorator accept generically any argument. After all, in order to accept arguments, we created our decorator using another function. </p>\n\n<p>We wrapped the decorator.</p>\n\n<p>Anything else we saw recently that wrapped function?</p>\n\n<p>Oh yes, decorators!</p>\n\n<p>Let\u2019s have some fun and write a decorator for the decorators:</p>\n\n<pre><code>def decorator_with_args(decorator_to_enhance):\n    \"\"\" \n    This function is supposed to be used as a decorator.\n    It must decorate an other function, that is intended to be used as a decorator.\n    Take a cup of coffee.\n    It will allow any decorator to accept an arbitrary number of arguments,\n    saving you the headache to remember how to do that every time.\n    \"\"\"\n\n    # We use the same trick we did to pass arguments\n    def decorator_maker(*args, **kwargs):\n\n        # We create on the fly a decorator that accepts only a function\n        # but keeps the passed arguments from the maker.\n        def decorator_wrapper(func):\n\n            # We return the result of the original decorator, which, after all, \n            # IS JUST AN ORDINARY FUNCTION (which returns a function).\n            # Only pitfall: the decorator must have this specific signature or it won't work:\n            return decorator_to_enhance(func, *args, **kwargs)\n\n        return decorator_wrapper\n\n    return decorator_maker\n</code></pre>\n\n<p>It can be used as follows:</p>\n\n<pre><code># You create the function you will use as a decorator. And stick a decorator on it :-)\n# Don't forget, the signature is \"decorator(func, *args, **kwargs)\"\n@decorator_with_args \ndef decorated_decorator(func, *args, **kwargs): \n    def wrapper(function_arg1, function_arg2):\n        print \"Decorated with\", args, kwargs\n        return func(function_arg1, function_arg2)\n    return wrapper\n\n# Then you decorate the functions you wish with your brand new decorated decorator.\n\n@decorated_decorator(42, 404, 1024)\ndef decorated_function(function_arg1, function_arg2):\n    print \"Hello\", function_arg1, function_arg2\n\ndecorated_function(\"Universe and\", \"everything\")\n#outputs:\n#Decorated with (42, 404, 1024) {}\n#Hello Universe and everything\n\n# Whoooot!\n</code></pre>\n\n<p>I know, the last time you had this feeling, it was after listening a guy saying: \"before understanding recursion, you must first understand recursion\". But now, don't you feel good about mastering this?</p>\n\n<hr>\n\n<h1>Best practices: decorators</h1>\n\n<ul>\n<li>Decorators were introduced in Python 2.4, so be sure your code will be run on &gt;= 2.4. </li>\n<li>Decorators slow down the function call. Keep that in mind.</li>\n<li><strong>You cannot un-decorate a function.</strong> (There <em>are</em> hacks to create decorators that can be removed, but nobody uses them.) So once a function is decorated, it\u2019s decorated <em>for all the code</em>.</li>\n<li>Decorators wrap functions, which can make them hard to debug.  (This gets better from Python &gt;= 2.5; see below.)</li>\n</ul>\n\n<p>The <code>functools</code> module was introduced in Python 2.5. It includes the function <code>functools.wraps()</code>, which copies the name, module, and docstring of the decorated function to its wrapper. </p>\n\n<p>(Fun fact: <code>functools.wraps()</code> is a decorator! \u263a)</p>\n\n<pre><code># For debugging, the stacktrace prints you the function __name__\ndef foo():\n    print \"foo\"\n\nprint foo.__name__\n#outputs: foo\n\n# With a decorator, it gets messy    \ndef bar(func):\n    def wrapper():\n        print \"bar\"\n        return func()\n    return wrapper\n\n@bar\ndef foo():\n    print \"foo\"\n\nprint foo.__name__\n#outputs: wrapper\n\n# \"functools\" can help for that\n\nimport functools\n\ndef bar(func):\n    # We say that \"wrapper\", is wrapping \"func\"\n    # and the magic begins\n    @functools.wraps(func)\n    def wrapper():\n        print \"bar\"\n        return func()\n    return wrapper\n\n@bar\ndef foo():\n    print \"foo\"\n\nprint foo.__name__\n#outputs: foo\n</code></pre>\n\n<hr>\n\n<h1>How can the decorators be useful?</h1>\n\n<p><strong>Now the big question:</strong> What can I use decorators for? </p>\n\n<p>Seem cool and powerful, but a practical example would be great. Well, there are 1000 possibilities. Classic uses are extending a function behavior from an external lib (you can't modify it), or for debugging (you don't want to modify it because it\u2019s temporary). </p>\n\n<p>You can use them to extend several functions in a DRY\u2019s way, like so:</p>\n\n<pre><code>def benchmark(func):\n    \"\"\"\n    A decorator that prints the time a function takes\n    to execute.\n    \"\"\"\n    import time\n    def wrapper(*args, **kwargs):\n        t = time.clock()\n        res = func(*args, **kwargs)\n        print func.__name__, time.clock()-t\n        return res\n    return wrapper\n\n\ndef logging(func):\n    \"\"\"\n    A decorator that logs the activity of the script.\n    (it actually just prints it, but it could be logging!)\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        res = func(*args, **kwargs)\n        print func.__name__, args, kwargs\n        return res\n    return wrapper\n\n\ndef counter(func):\n    \"\"\"\n    A decorator that counts and prints the number of times a function has been executed\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        wrapper.count = wrapper.count + 1\n        res = func(*args, **kwargs)\n        print \"{0} has been used: {1}x\".format(func.__name__, wrapper.count)\n        return res\n    wrapper.count = 0\n    return wrapper\n\n@counter\n@benchmark\n@logging\ndef reverse_string(string):\n    return str(reversed(string))\n\nprint reverse_string(\"Able was I ere I saw Elba\")\nprint reverse_string(\"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!\")\n\n#outputs:\n#reverse_string ('Able was I ere I saw Elba',) {}\n#wrapper 0.0\n#wrapper has been used: 1x \n#ablE was I ere I saw elbA\n#reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {}\n#wrapper 0.0\n#wrapper has been used: 2x\n#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A\n</code></pre>\n\n<p>Of course the good thing with decorators is that you can use them right away on almost anything without rewriting. DRY, I said:</p>\n\n<pre><code>@counter\n@benchmark\n@logging\ndef get_random_futurama_quote():\n    from urllib import urlopen\n    result = urlopen(\"http://subfusion.net/cgi-bin/quote.pl?quote=futurama\").read()\n    try:\n        value = result.split(\"&lt;br&gt;&lt;b&gt;&lt;hr&gt;&lt;br&gt;\")[1].split(\"&lt;br&gt;&lt;br&gt;&lt;hr&gt;\")[0]\n        return value.strip()\n    except:\n        return \"No, I'm ... doesn't!\"\n\n\nprint get_random_futurama_quote()\nprint get_random_futurama_quote()\n\n#outputs:\n#get_random_futurama_quote () {}\n#wrapper 0.02\n#wrapper has been used: 1x\n#The laws of science be a harsh mistress.\n#get_random_futurama_quote () {}\n#wrapper 0.01\n#wrapper has been used: 2x\n#Curse you, merciful Poseidon!\n</code></pre>\n\n<p>Python itself provides several decorators: <code>property</code>, <code>staticmethod</code>, etc. </p>\n\n<ul>\n<li>Django uses decorators to manage caching and view permissions. </li>\n<li>Twisted to fake inlining asynchronous functions calls.</li>\n</ul>\n\n<p>This really is a large playground.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example:</p>\n\n<pre><code>from functools import wraps\n\ndef wrap_in_tag(tag):\n    def factory(func):\n        @wraps(func)\n        def decorator():\n            return '&lt;%(tag)s&gt;%(rv)s&lt;/%(tag)s&gt;' % (\n                {'tag': tag, 'rv': func()})\n        return decorator\n    return factory\n</code></pre>\n\n<p>This enables you to write:</p>\n\n<pre><code>@wrap_in_tag('b')\n@wrap_in_tag('i')\ndef say():\n    return 'hello'\n</code></pre>\n\n<p>or</p>\n\n<pre><code>makebold = wrap_in_tag('b')\nmakeitalic = wrap_in_tag('i')\n\n@makebold\n@makeitalic\ndef say():\n    return 'hello'\n</code></pre>\n\n<p>Personally I would have written the decorator somewhat differently:</p>\n\n<pre><code>from functools import wraps\n\ndef wrap_in_tag(tag):\n    def factory(func):\n        @wraps(func)\n        def decorator(val):\n            return func('&lt;%(tag)s&gt;%(val)s&lt;/%(tag)s&gt;' %\n                        {'tag': tag, 'val': val})\n        return decorator\n    return factory\n</code></pre>\n\n<p>which would yield:</p>\n\n<pre><code>@wrap_in_tag('b')\n@wrap_in_tag('i')\ndef say(val):\n    return val\nsay('hello')\n</code></pre>\n\n<p>Don't forget the construction for which decorator syntax is a shorthand:</p>\n\n<pre><code>say = wrap_in_tag('b')(wrap_in_tag('i')(say)))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It looks like the other people have already told you how to solve the problem. I hope this will help you understand what decorators are.</p>\n\n<p>Decorators are just syntactical sugar.</p>\n\n<p>This</p>\n\n<pre><code>@decorator\ndef func():\n    ...\n</code></pre>\n\n<p>expands to    </p>\n\n<pre><code>def func():\n    ...\nfunc = decorator(func)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>And of course you can return lambdas as well from a decorator function:</p>\n\n<pre><code>def makebold(f): \n    return lambda: \"&lt;b&gt;\" + f() + \"&lt;/b&gt;\"\ndef makeitalic(f): \n    return lambda: \"&lt;i&gt;\" + f() + \"&lt;/i&gt;\"\n\n@makebold\n@makeitalic\ndef say():\n    return \"Hello\"\n\nprint say()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python decorators add extra functionality to another function</p>\n\n<p>An italics decorator could be like</p>\n\n<pre><code>def makeitalic(fn):\n    def newFunc():\n        return \"&lt;i&gt;\" + fn() + \"&lt;/i&gt;\"\n    return newFunc\n</code></pre>\n\n<p>Note that a function is defined inside a function.\nWhat it basically does is replace a function with the newly defined one. For example, I have this class</p>\n\n<pre><code>class foo:\n    def bar(self):\n        print \"hi\"\n    def foobar(self):\n        print \"hi again\"\n</code></pre>\n\n<p>Now say, I want both functions to print \"---\" after and before they are done.\nI could add a print \"---\" before and after each print statement.\nBut because I don't like repeating myself, I will make a decorator</p>\n\n<pre><code>def addDashes(fn): # notice it takes a function as an argument\n    def newFunction(self): # define a new function\n        print \"---\"\n        fn(self) # call the original function\n        print \"---\"\n    return newFunction\n    # Return the newly defined function - it will \"replace\" the original\n</code></pre>\n\n<p>So now I can change my class to </p>\n\n<pre><code>class foo:\n    @addDashes\n    def bar(self):\n        print \"hi\"\n\n    @addDashes\n    def foobar(self):\n        print \"hi again\"\n</code></pre>\n\n<p>For more on decorators, check\n<a href=\"http://www.ibm.com/developerworks/linux/library/l-cpdecor.html\">http://www.ibm.com/developerworks/linux/library/l-cpdecor.html</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another way of doing the same thing:</p>\n\n<pre><code>class bol(object):\n  def __init__(self, f):\n    self.f = f\n  def __call__(self):\n    return \"&lt;b&gt;{}&lt;/b&gt;\".format(self.f())\n\nclass ita(object):\n  def __init__(self, f):\n    self.f = f\n  def __call__(self):\n    return \"&lt;i&gt;{}&lt;/i&gt;\".format(self.f())\n\n@bol\n@ita\ndef sayhi():\n  return 'hi'\n</code></pre>\n\n<p>Or, more flexibly:</p>\n\n<pre><code>class sty(object):\n  def __init__(self, tag):\n    self.tag = tag\n  def __call__(self, f):\n    def newf():\n      return \"&lt;{tag}&gt;{res}&lt;/{tag}&gt;\".format(res=f(), tag=self.tag)\n    return newf\n\n@sty('b')\n@sty('i')\ndef sayhi():\n  return 'hi'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A decorator takes the function definition and creates a new function that executes this function and transforms the result.</p>\n\n<pre><code>@deco\ndef do():\n    ...\n</code></pre>\n\n<p>is eqivarent to:</p>\n\n<pre><code>do = deco(do)\n</code></pre>\n\n<h2>Example:</h2>\n\n<pre><code>def deco(func):\n    def inner(letter):\n        return func(letter).upper()  #upper\n    return inner\n</code></pre>\n\n<p>This</p>\n\n<pre><code>@deco\ndef do(number):\n    return chr(number)  # number to letter\n</code></pre>\n\n<p>is eqivalent to this\n    def do2(number):\n        return chr(number)</p>\n\n<pre><code>do2 = deco(do2)\n</code></pre>\n\n<p>65 &lt;=&gt; 'a'</p>\n\n<pre><code>print(do(65))\nprint(do2(65))\n&gt;&gt;&gt; B\n&gt;&gt;&gt; B\n</code></pre>\n\n<p>To understand the decorator, it is important to notice, that decorator created a new function do which is inner that executes func and transforms the result.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You <em>could</em> make two separate decorators that do what you want as illustrated directly below. Note the use of <code>*args, **kwargs</code> in the declaration of the <code>wrapped()</code> function which supports the decorated function having multiple arguments (which isn't really necessary for the example <code>say()</code> function, but is included for generality). </p>\n\n<p>For similar reasons, the <code>functools.wraps</code> decorator is used to change the meta attributes of the wrapped function to be those of the one being decorated. This makes error messages and embedded function documentation (<code>func.__doc__</code>) be those of the decorated function instead of <code>wrapped()</code>'s.</p>\n\n<pre><code>from functools import wraps\n\ndef makebold(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        return \"&lt;b&gt;\" + fn(*args, **kwargs) + \"&lt;/b&gt;\"\n    return wrapped\n\ndef makeitalic(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        return \"&lt;i&gt;\" + fn(*args, **kwargs) + \"&lt;/i&gt;\"\n    return wrapped\n\n@makebold\n@makeitalic\ndef say():\n    return 'Hello'\n\nprint say()  # -&gt; &lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n\n<p>However it would be better in this case, since the two are so similar to one other, for you to instead make a generic one that was essentially a <em>decorator factory</em> \u2014 in other words, a decorator that makes other decorators. That way there would be less code repetition.</p>\n\n<pre><code>def html_deco(name):\n    def decorator(fn):\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            return '&lt;%s&gt;' % name + fn(*args, **kwargs) + '&lt;/%s&gt;' % name\n        return wrapped\n    return decorator\n\n@html_deco('b')\n@html_deco('i')\ndef greet(whom=''):  # an example function with a keyword argument\n    return 'Hello' + (' ' + whom) if whom else ''\n\nprint greet('world')  # -&gt; &lt;b&gt;&lt;i&gt;Hello world&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n\n<p>Of course, you're free to assign a more descriptive name to a factory-generated decorator to reduce repetition even more and make the code more readable:</p>\n\n<pre><code>makebold = html_deco('b')\nmakeitalic = html_deco('i')\n\n@makebold\n@makeitalic\ndef greet(whom=''):\n    return 'Hello' + (' ' + whom) if whom else ''\n\nprint greet('world')  # -&gt; &lt;b&gt;&lt;i&gt;Hello world&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a simple example of chaining decorators.  Note the last line - it shows what is going on under the covers.</p>\n\n<pre><code>############################################################\n#\n#    decorators\n#\n############################################################\n\ndef bold(fn):\n    def decorate():\n        # surround with bold tags before calling original function\n        return \"&lt;b&gt;\" + fn() + \"&lt;/b&gt;\"\n    return decorate\n\n\ndef uk(fn):\n    def decorate():\n        # swap month and day\n        fields = fn().split('/')\n        date = fields[1] + \"/\" + fields[0] + \"/\" + fields[2]\n        return date\n    return decorate\n\nimport datetime\ndef getDate():\n    now = datetime.datetime.now()\n    return \"%d/%d/%d\" % (now.day, now.month, now.year)\n\n@bold\ndef getBoldDate(): \n    return getDate()\n\n@uk\ndef getUkDate():\n    return getDate()\n\n@bold\n@uk\ndef getBoldUkDate():\n    return getDate()\n\n\nprint getDate()\nprint getBoldDate()\nprint getUkDate()\nprint getBoldUkDate()\n# what is happening under the covers\nprint bold(uk(getDate))()\n</code></pre>\n\n<p>The output looks like:</p>\n\n<pre><code>17/6/2013\n&lt;b&gt;17/6/2013&lt;/b&gt;\n6/17/2013\n&lt;b&gt;6/17/2013&lt;/b&gt;\n&lt;b&gt;6/17/2013&lt;/b&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To explain decorator in a simpler way:</p>\n\n<p>With:</p>\n\n<pre><code>@decor1\n@decor2\ndef func(*args, **kwargs):\n    pass\n</code></pre>\n\n<p>When do:</p>\n\n<pre><code>func(*args, **kwargs)\n</code></pre>\n\n<p>You really do:</p>\n\n<pre><code>decor1(decor2(func))(*args, **kwargs)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Speaking of the counter example - as given above, the counter will be shared between all functions that use the decorator:</p>\n\n<pre><code>def counter(func):\n    def wrapped(*args, **kws):\n        print 'Called #%i' % wrapped.count\n        wrapped.count += 1\n        return func(*args, **kws)\n    wrapped.count = 0\n    return wrapped\n</code></pre>\n\n<p>That way, your decorator can be reused for different functions (or used to decorate the same function multiple times: <code>func_counter1 = counter(func); func_counter2 = counter(func)</code>), and the counter variable will remain private to each. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Decorate functions with different number of arguments:</h1>\n\n<pre><code>def frame_tests(fn):\n    def wrapper(*args):\n        print \"\\nStart: %s\" %(fn.__name__)\n        fn(*args)\n        print \"End: %s\\n\" %(fn.__name__)\n    return wrapper\n\n@frame_tests\ndef test_fn1():\n    print \"This is only a test!\"\n\n@frame_tests\ndef test_fn2(s1):\n    print \"This is only a test! %s\" %(s1)\n\n@frame_tests\ndef test_fn3(s1, s2):\n    print \"This is only a test! %s %s\" %(s1, s2)\n\nif __name__ == \"__main__\":\n    test_fn1()\n    test_fn2('OK!')\n    test_fn3('OK!', 'Just a test!')\n</code></pre>\n\n<p>Result:  </p>\n\n<pre><code>Start: test_fn1  \nThis is only a test!  \nEnd: test_fn1  \n\n\nStart: test_fn2  \nThis is only a test! OK!  \nEnd: test_fn2  \n\n\nStart: test_fn3  \nThis is only a test! OK! Just a test!  \nEnd: test_fn3  \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>#decorator.py\ndef makeHtmlTag(tag, *args, **kwds):\n    def real_decorator(fn):\n        css_class = \" class='{0}'\".format(kwds[\"css_class\"]) \\\n                                 if \"css_class\" in kwds else \"\"\n        def wrapped(*args, **kwds):\n            return \"&lt;\"+tag+css_class+\"&gt;\" + fn(*args, **kwds) + \"&lt;/\"+tag+\"&gt;\"\n        return wrapped\n    # return decorator dont call it\n    return real_decorator\n\n@makeHtmlTag(tag=\"b\", css_class=\"bold_css\")\n@makeHtmlTag(tag=\"i\", css_class=\"italic_css\")\ndef hello():\n    return \"hello world\"\n\nprint hello()\n</code></pre>\n\n<p>You can also write decorator in Class</p>\n\n<pre><code>#class.py\nclass makeHtmlTagClass(object):\n\ndef __init__(self, tag, css_class=\"\"):\n    self._tag = tag\n    self._css_class = \" class='{0}'\".format(css_class) \\\n                                   if css_class !=\"\" else \"\"\n\ndef __call__(self, fn):\n    def wrapped(*args, **kwargs):\n        return \"&lt;\" + self._tag + self._css_class+\"&gt;\"  \\\n                   + fn(*args, **kwargs) + \"&lt;/\" + self._tag + \"&gt;\"\n    return wrapped\n\n@makeHtmlTagClass(tag=\"b\", css_class=\"bold_css\")\n@makeHtmlTagClass(tag=\"i\", css_class=\"italic_css\")\ndef hello(name):\n    return \"Hello, {}\".format(name)\n\nprint hello(\"Your name\")\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\n\n<pre><code>globvar = 0\n\ndef set_globvar_to_one():\n    global globvar    # Needed to modify global copy of globvar\n    globvar = 1\n\ndef print_globvar():\n    print globvar     # No need for global declaration to read value of globvar\n\nset_globvar_to_one()\nprint_globvar()       # Prints 1\n</code></pre>\n\n<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>\n\n<p>See other answers if you want to share a global variable across modules.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces.</p>\n\n<p>Say you've got a module like this:</p>\n\n<pre><code># sample.py\nmyGlobal = 5\n\ndef func1():\n    myGlobal = 42\n\ndef func2():\n    print myGlobal\n\nfunc1()\nfunc2()\n</code></pre>\n\n<p>You might expecting this to print 42, but instead it prints 5.  As has already been mentioned, if you add a '<code>global</code>' declaration to <code>func1()</code>, then <code>func2()</code> will print 42.</p>\n\n<pre><code>def func1():\n    global myGlobal\n    myGlobal = 42\n</code></pre>\n\n<p>What's going on here is that Python assumes that any name that is <em>assigned to</em>, anywhere within a function, is local to that function unless explicitly told otherwise.  If it is only <em>reading</em> from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes (e.g. the module's global scope).</p>\n\n<p>When you assign 42 to the name <code>myGlobal</code>, therefore, Python creates a local variable that shadows the global variable of the same name.  That local goes out of scope and is <a href=\"http://www.digi.com/wiki/developer/index.php/Python_Garbage_Collection\">garbage-collected</a> when <code>func1()</code> returns; meanwhile, <code>func2()</code> can never see anything other than the (unmodified) global name.  Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of <code>myGlobal</code> inside <code>func1()</code> before you assign to it, you'd get an <code>UnboundLocalError</code>, because Python has already decided that it must be a local variable but it has not had any value associated with it yet.  But by using the '<code>global</code>' statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally.</p>\n\n<p>(I believe that this behavior originated largely through an optimization of local namespaces -- without this behavior,  Python's VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn't already exist at module/builtin level), which would significantly slow down a very common operation.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You may want to explore the notion of <a href=\"http://docs.python.org/reference/datamodel.html\">namespaces</a>. In Python, the <a href=\"http://docs.python.org/tutorial/modules.html\">module</a> is the natural place for <em>global</em> data:</p>\n\n<blockquote>\n  <p>Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user\u2019s global variables. On the other hand, if you know what you are doing you can touch a module\u2019s global variables with the same notation used to refer to its functions, <code>modname.itemname</code>.</p>\n</blockquote>\n\n<p>A specific use of global-in-a-module is described here - <a href=\"http://effbot.org/pyfaq/how-do-i-share-global-variables-across-modules.htm\">how-do-i-share-global-variables-across-modules</a>:</p>\n\n<blockquote>\n  <p>The canonical way to share information across modules within a single program is to create a special configuration module (often called config or cfg). Just import the configuration module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example:</p>\n  \n  <p>File: config.py</p>\n</blockquote>\n\n<pre><code>x = 0   # Default value of the 'x' configuration setting\n</code></pre>\n\n<blockquote>\n  <p>File: mod.py</p>\n</blockquote>\n\n<pre><code>import config\nconfig.x = 1\n</code></pre>\n\n<blockquote>\n  <p>File: main.py</p>\n</blockquote>\n\n<pre><code>import config\nimport mod\nprint config.x\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.  </p>\n\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; def foo():\n...     global bar\n...     baz = 5\n...     print bar\n...     print baz\n...     print quux\n... \n&gt;&gt;&gt; dis.disassemble(foo.func_code)\n  3           0 LOAD_CONST               1 (5)\n              3 STORE_FAST               0 (baz)\n\n  4           6 LOAD_GLOBAL              0 (bar)\n              9 PRINT_ITEM          \n             10 PRINT_NEWLINE       \n\n  5          11 LOAD_FAST                0 (baz)\n             14 PRINT_ITEM          \n             15 PRINT_NEWLINE       \n\n  6          16 LOAD_GLOBAL              1 (quux)\n             19 PRINT_ITEM          \n             20 PRINT_NEWLINE       \n             21 LOAD_CONST               0 (None)\n             24 RETURN_VALUE        \n&gt;&gt;&gt; \n</code></pre>\n\n<p>See how baz, which appears on the left side of an assignment in <code>foo()</code>, is the only <code>LOAD_FAST</code> variable.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to refer to global variable in a function, you can use <strong>global</strong> keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables. However, if you assign to a new variable not declared as global in the function, it is implicitly declared as local, and it can overshadow any existing global variable with the same name.</p>\n\n<p>Also, global variables are useful, contrary to some OOP zealots who claim otherwise - especially for smaller scripts, where OOP is overkill.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In addition to already existing answers and to make this more confusing:</p>\n\n<blockquote>\n  <p>In Python, variables that are only referenced inside a function are\n  <strong>implicitly global</strong>. If a variable is assigned a new value anywhere\n  within the function\u2019s body, it\u2019s assumed to be a <strong>local</strong>. If a variable\n  is ever assigned a new value inside the function, the variable is\n  implicitly local, and you need to explicitly declare it as \u2018global\u2019.</p>\n  \n  <p>Though a bit surprising at first, a moment\u2019s consideration explains\n  this. On one hand, requiring global for assigned variables provides a\n  bar against unintended side-effects. On the other hand, if global was\n  required for all global references, you\u2019d be using global all the\n  time. You\u2019d have to declare as global every reference to a built-in\n  function or to a component of an imported module. This clutter would\n  defeat the usefulness of the global declaration for identifying\n  side-effects.</p>\n</blockquote>\n\n<p>Source: <em><a href=\"https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\">What are the rules for local and global variables in Python?</a></em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Global variables are much more fun when you deal with parallel execution. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable:</p>\n\n<pre><code>import multiprocessing\nimport time\nimport os\nimport sys\nimport random\ndef worker(a):\n    oldValue = get()\n    set(random.randint(0, 100))\n    sys.stderr.write(' '.join([str(os.getpid()), str(a), 'old:', str(oldValue), 'new:', str(get()), '\\n']))\n\ndef get():\n    global globalVariable\n    return globalVariable\n\nglobalVariable = -1\ndef set(v):\n    global globalVariable\n    globalVariable = v\n\nprint get()\nset(-2)\nprint get()\n\nprocessPool = multiprocessing.Pool(5)\nresults = processPool.map(worker, range(15))\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<pre><code>27094 0 old: -2 new: 2\n27094 1 old: 2 new: 95\n27094 2 old: 95 new: 20\n27094 3 old: 20 new: 54\n27098 4 old: -2 new: 80\n27098 6 old: 80 new: 62\n27095 5 old: -2 new: 100\n27094 7 old: 54 new: 23\n27098 8 old: 62 new: 67\n27098 10 old: 67 new: 22\n27098 11 old: 22 new: 85\n27095 9 old: 100 new: 32\n27094 12 old: 23 new: 65\n27098 13 old: 85 new: 60\n27095 14 old: 32 new: 71\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation.</p>\n\n<p>If you didn't have to explicitly specify when an identifier was to refer to a predefined global, then you'd presumably have to explicitly specify when an identifier is a new local variable instead (for example, with something like the 'var' command seen in JavaScript). Since local variables are more common than global variables in any serious and non-trivial system, Python's system makes more sense in most cases.</p>\n\n<p>You <em>could</em> have a language which attempted to guess, using a global variable if it existed or creating a local variable if it didn't. However, that would be very error-prone. For example, importing another module could inadvertently introduce a global variable by that name, changing the behaviour of your program.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As it turns out the answer is always simple.</p>\n\n<p>Here is a small sample module. It is is a way to show it in a main definition:</p>\n\n<pre><code>def five(enterAnumber,sumation):\n    global helper\n    helper  = enterAnumber + sumation\n\ndef isTheNumber():\n    return helper\n</code></pre>\n\n<p>Here is a way to show it in a main definition:</p>\n\n<pre><code>import TestPy\n\ndef main():\n    atest  = TestPy\n    atest.five(5,8)\n    print(atest.isTheNumber())\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>This simple code works just like that, and it will execute. I hope it helps.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to reference the global variable in every function you want to use.</p>\n\n<p>As follows:</p>\n\n<pre><code>var = \"test\"\n\ndef printGlobalText():\n    global var #wWe are telling to explicitly use the global version\n    var = \"global from printGlobalText fun.\"\n    print \"var from printGlobalText: \" + var\n\ndef printLocalText():\n    #We are NOT telling to explicitly use the global version, so we are creating a local variable\n    var = \"local version from printLocalText fun\"\n    print \"var from printLocalText: \" + var\n\nprintGlobalText()\nprintLocalText()\n\"\"\"\nOutput Result:\nvar from printGlobalText: global from printGlobalText fun.\nvar from printLocalText: local version from printLocalText\n[Finished in 0.1s]\n\"\"\"\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try This :</p>\n\n<pre><code>def x1():\n    global x\n    x = 6\n\ndef x2():\n    global x\n    x = x+1\n    print x\n\nx = 5\nx1()\nx2()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What you are saying is to use the method like this:</p>\n\n<pre><code>globvar = 5\n\ndef f():\n    var = globvar\n    print(var)\n\nf()**  #prints 5\n</code></pre>\n\n<p>but the better way is to use the global variable like this:<br></p>\n\n<pre><code>globavar = 5\ndef f():\n    global globvar\n    print(globvar)\nf()   #prints 5\n</code></pre>\n\n<p>both give the same output.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>following on and as an add on  use a file to contain all global variables all declared locally and then 'import as'</p>\n\n<pre><code>file  initval.py\n\nStocksin = 300\nPrices = []\n\n\n\nFile getstocks.py\n\nimport  initval as  iv\n\nDef   getmystocks (): \n     iv.Stocksin  = getstockcount ()\n\n\nDef getmycharts ():\n    For ic in range (0,iv.Stocksin):\n</code></pre>\n\n<p>.....</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is not possible to sort a dict, only to get a representation of a dict that is sorted. Dicts are inherently orderless, but other types, such as lists and tuples, are not. So you need a sorted representation, which will be a list\u2014probably a list of tuples.</p>\n\n<p>For instance,</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n</code></pre>\n\n<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\n\n<p>And for those wishing to sort on keys instead of values:</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>As simple as: <code>sorted(dict1, key=dict1.get)</code></h2>\n\n<p>Well, it is actually possible to do a \"sort by dictionary values\". Recently I had to do that in a Code Golf (Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549\">Code golf: Word frequency chart</a></em>). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display list of the top words, sorted by decreasing frequency. </p>\n\n<p>If you construct a dictionary with the words as keys and the number of occurences of each word as value, simplified here as</p>\n\n<pre><code>d = defaultdict(int)\nfor w in text.split():\n  d[w] += 1\n</code></pre>\n\n<p>then you can get list of the words in order of frequency of use with <code>sorted(d, key=d.get)</code> - the sort iterates over the dictionary keys, using as sort-key the number of word occurrences. </p>\n\n<pre><code>for w in sorted(d, key=d.get, reverse=True):\n  print w, d[w]\n</code></pre>\n\n<p>I am writing this detailed explanation to illustrate what do people often mean by \"I can easily sort a dictionary by key, but how do I sort by value\" - and I think the OP was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use:</p>\n\n<p><code>sorted(d.items(), key=lambda x: x[1])</code></p>\n\n<p>This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Dicts can't be sorted, but you can build a sorted list from them.</p>\n\n<p>A sorted list of dict values:</p>\n\n<pre><code>sorted(d.values())\n</code></pre>\n\n<p>A list of (key, value) pairs, sorted by value:</p>\n\n<pre><code>from operator import itemgetter\nsorted(d.items(), key=itemgetter(1))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In recent Python 2.7, we have the new <a href=\"http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections\">OrderedDict</a> type, which remembers the order in which the items were added.</p>\n\n<pre><code>&gt;&gt;&gt; d = {\"third\": 3, \"first\": 1, \"fourth\": 4, \"second\": 2}\n\n&gt;&gt;&gt; for k, v in d.items():\n...     print \"%s: %s\" % (k, v)\n...\nsecond: 2\nfourth: 4\nthird: 3\nfirst: 1\n\n&gt;&gt;&gt; d\n{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}\n</code></pre>\n\n<p>To make a new ordered dictionary from the original, sorting by the values:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))\n</code></pre>\n\n<p>The OrderedDict behaves like a normal dict:</p>\n\n<pre><code>&gt;&gt;&gt; for k, v in d_sorted_by_value.items():\n...     print \"%s: %s\" % (k, v)\n...\nfirst: 1\nsecond: 2\nthird: 3\nfourth: 4\n\n&gt;&gt;&gt; d_sorted_by_value\nOrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It can often be very handy to use <b><a href=\"http://docs.python.org/library/collections.html#collections.namedtuple\">namedtuple</a></b>. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score':</p>\n\n<pre><code>import collections\nPlayer = collections.namedtuple('Player', 'score name')\nd = {'John':5, 'Alex':10, 'Richard': 7}\n</code></pre>\n\n<p>sorting with lowest score first:</p>\n\n<pre><code>worst = sorted(Player(v,k) for (k,v) in d.items())\n</code></pre>\n\n<p>sorting with highest score first:</p>\n\n<pre><code>best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)\n</code></pre>\n\n<p>Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this:</p>\n\n<pre><code>    player = best[1]\n    player.name\n        'Richard'\n    player.score\n         7\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Pretty much the same as Hank Gay's answer;</p>\n\n<pre>\nsorted([(value,key) for (key,value) in mydict.items()])\n</pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 2.7, simply do:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from collections import OrderedDict\n# regular unsorted dictionary\nd = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n# dictionary sorted by key\nOrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n# dictionary sorted by value\nOrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n</code></pre>\n\n<p>copy-paste from : <a href=\"http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes\">http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes</a></p>\n\n<p>Enjoy ;-)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had the same problem, I solved it like this:</p>\n\n<pre><code>WantedOutput = sorted(MyDict, key=lambda x : MyDict[x]) \n</code></pre>\n\n<p>(people who answer: \"It is not possible to sort a dict\" did not read the question!!\nIn fact \"I can sort on the keys, but how can I sort based on the values?\" clearly means that he wants a list of the keys sorted according to the value of their values.)</p>\n\n<p>Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <a href=\"http://docs.python.org/2/library/collections.html#collections.Counter\" rel=\"nofollow\">collections.Counter</a>. Note, this will work for both numeric and non-numeric values.</p>\n\n<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; #To sort in reverse order\n&gt;&gt;&gt; Counter(x).most_common()\n[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\n&gt;&gt;&gt; #To sort in ascending order\n&gt;&gt;&gt; Counter(x).most_common()[::-1]\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n&gt;&gt;&gt; #To get a dictionary sorted by values\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; OrderedDict(Counter(x).most_common()[::-1])\nOrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can create an \"inverted index\", also</p>\n\n<pre><code>from collections import defaultdict\ninverse= defaultdict( list )\nfor k, v in originalDict.items():\n    inverse[v].append( k )\n</code></pre>\n\n<p>Now your inverse has the values; each value has a list of applicable keys.</p>\n\n<pre><code>for k in sorted(inverse):\n    print k, inverse[k]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If values are numeric you may also use Counter from collections</p>\n\n<pre><code>from collections import Counter\n\nx={'hello':1,'python':5, 'world':3}\nc=Counter(x)\nprint c.most_common()\n\n\n&gt;&gt; [('python', 5), ('world', 3), ('hello', 1)]    \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Technically, dictionaries aren't sequences, and therefore can't be sorted. You can do something like</p>\n\n<pre><code>sorted(a_dictionary.values())\n</code></pre>\n\n<p>assuming performance isn't a huge deal.</p>\n\n<p>UPDATE: Thanks to the commenters for pointing out that I made this way too complicated in the beginning.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>from django.utils.datastructures import SortedDict\n\ndef sortedDictByKey(self,data):\n    \"\"\"Sorted dictionary order by key\"\"\"\n    sortedDict = SortedDict()\n    if data:\n        if isinstance(data, dict):\n            sortedKey = sorted(data.keys())\n            for k in sortedKey:\n                sortedDict[k] = data[k]\n    return sortedDict\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import operator\norigin_list = [\n    {\"name\": \"foo\", \"rank\": 0, \"rofl\": 20000},\n    {\"name\": \"Silly\", \"rank\": 15, \"rofl\": 1000},\n    {\"name\": \"Baa\", \"rank\": 300, \"rofl\": 20},\n    {\"name\": \"Zoo\", \"rank\": 10, \"rofl\": 200},\n    {\"name\": \"Penguin\", \"rank\": -1, \"rofl\": 10000}\n]\nprint \"&gt;&gt; Original &gt;&gt;\"\nfor foo in origin_list:\n    print foo\n\nprint \"\\n&gt;&gt; Rofl sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rofl\")):\n    print foo\n\nprint \"\\n&gt;&gt; Rank sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rank\")):\n    print foo\n</code></pre>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>Original &gt;&gt; {'name': 'foo', 'rank': 0, 'rofl': 20000} {'name': 'Silly',\n      'rank': 15, 'rofl': 1000} {'name':\n      'Baa', 'rank': 300, 'rofl': 20}\n      {'name': 'Zoo', 'rank': 10, 'rofl':\n      200} {'name': 'Penguin', 'rank': -1,\n      'rofl': 10000}</p>\n      \n      <p>Rofl &gt;&gt; {'name': 'Baa', 'rank': 300, 'rofl': 20} {'name': 'Zoo',\n      'rank': 10, 'rofl': 200} {'name':\n      'Silly', 'rank': 15, 'rofl': 1000}\n      {'name': 'Penguin', 'rank': -1,\n      'rofl': 10000} {'name': 'foo', 'rank':\n      0, 'rofl': 20000}</p>\n      \n      <p>Rank &gt;&gt; {'name': 'Penguin', 'rank': -1, 'rofl': 10000} {'name': 'foo', 'rank': 0, 'rofl': 20000} {'name':\n      'Zoo', 'rank': 10, 'rofl': 200}\n      {'name': 'Silly', 'rank': 15, 'rofl':\n      1000} {'name': 'Baa', 'rank': 300,\n      'rofl': 20}</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Why not try this approach. Let us define a dictionary called mydict with the following data:</p>\n\n<pre><code>mydict = {'carl':40,\n          'alan':2,\n          'bob':1,\n          'danny':3}\n</code></pre>\n\n<p>If one wanted to sort the dictionary by keys, one could do something like:</p>\n\n<pre><code>for key in sorted(mydict.iterkeys()):\n    print \"%s: %s\" % (key, mydict[key])\n</code></pre>\n\n<p>This should return the following output:</p>\n\n<pre><code>alan: 2\nbob: 1\ncarl: 40\ndanny: 3\n</code></pre>\n\n<p>On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:</p>\n\n<pre><code>for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):\n    print \"%s: %s\" % (key, value)\n</code></pre>\n\n<p>The result of this command (sorting the dictionary by value) should return the following:</p>\n\n<pre><code>bob: 1\nalan: 2\ndanny: 3\ncarl: 40\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use a <a href=\"https://pypi.python.org/pypi/skipdict/1.0\">skip dict</a> which is a dictionary that's permanently sorted by value.</p>\n\n<pre><code>&gt;&gt;&gt; data = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n&gt;&gt;&gt; SkipDict(data)\n{0: 0.0, 2: 1.0, 1: 2.0, 4: 3.0, 3: 4.0}\n</code></pre>\n\n<p>If you use <code>keys()</code>, <code>values()</code> or <code>items()</code> then you'll iterate in sorted order by value.</p>\n\n<p>It's implemented using the <a href=\"http://en.wikipedia.org/wiki/Skip_list\">skip list</a> datastructure.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <strong>ValueSortedDict</strong> from <a href=\"http://pypi.python.org/pypi/dicts\" rel=\"nofollow\">dicts</a>:</p>\n\n<pre><code>from dicts.sorteddict import ValueSortedDict\nd = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_dict = ValueSortedDict(d)\nprint sorted_dict.items() \n\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If your values are integers, and you use Python 2.7 or newer, you can use <a href=\"http://docs.python.org/py3k/library/collections.html#collections.Counter\" rel=\"nofollow\"><code>collections.Counter</code></a> instead of <code>dict</code>. The <code>most_common</code> method will give you all items, sorted by the value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Iterate through a dict and sort it by its values in descending order:</p>\n\n<pre><code>$ python --version\nPython 3.2.2\n\n$ cat sort_dict_by_val_desc.py \ndictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)\nfor word in sorted(dictionary, key=dictionary.get, reverse=True):\n  print(word, dictionary[word])\n\n$ python sort_dict_by_val_desc.py \naina 5\ntuli 4\njoka 3\nsana 2\nsiis 1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This works in 3.1.x:</p>\n\n<pre><code>import operator\nslovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)\nprint(slovar_sorted)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the sorted function of Python</p>\n\n<p><code>sorted(iterable[, cmp[, key[, reverse]]])</code></p>\n\n<p>Thus you can use:</p>\n\n<p><code>sorted(dictionary.items(),key = lambda x :x[1])</code></p>\n\n<p>Visit this link for more information on sorted function: <a href=\"https://docs.python.org/2/library/functions.html#sorted\" rel=\"nofollow\">https://docs.python.org/2/library/functions.html#sorted</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For the sake of completeness, I am posting a solution using <a href=\"http://docs.python.org/2/library/heapq.html\" rel=\"nofollow\">heapq</a>. Note, this method will work for both numeric and non-numeric values</p>\n\n<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; x_items = x.items()\n&gt;&gt;&gt; heapq.heapify(x_items)\n&gt;&gt;&gt; #To sort in reverse order\n&gt;&gt;&gt; heapq.nlargest(len(x_items),x_items, operator.itemgetter(1))\n[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\n&gt;&gt;&gt; #To sort in ascending order\n&gt;&gt;&gt; heapq.nsmallest(len(x_items),x_items, operator.itemgetter(1))\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I came up with this one, </p>\n\n<pre><code>import operator    \nx = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}\n</code></pre>\n\n<p>For Python 3.x: <code>x.items()</code> replacing <code>iteritems()</code>.</p>\n\n<pre><code>&gt;&gt;&gt; sorted_x\n{0: 0, 1: 2, 2: 1, 3: 4, 4: 3}\n</code></pre>\n\n<p>Or try with <code>collections.OrderedDict</code>!</p>\n\n<pre><code>x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nfrom collections import OrderedDict\n\nod1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a solution using zip on <a href=\"https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects\" rel=\"nofollow\"><code>d.values()</code> and <code>d.keys()</code></a>.  A few lines down this link (on Dictionary view objects) is:</p>\n\n<blockquote>\n  <p>This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).</p>\n</blockquote>\n\n<p>So we can do the following:</p>\n\n<pre><code>d = {'key1': 874.7, 'key2': 5, 'key3': 8.1}\n\nd_sorted = sorted(zip(d.values(), d.keys()))\n\nprint d_sorted \n# prints: [(5, 'key2'), (8.1, 'key3'), (874.7, 'key1')]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>months = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31,\n          \"June\": 30, \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31,\n          \"November\": 30, \"December\": 31}\n\ndef mykey(t):\n    \"\"\" Customize your sorting logic using this function.  The parameter to\n    this function is a tuple.  Comment/uncomment the return statements to test\n    different logics.\n    \"\"\"\n    return t[1]              # sort by number of days in the month\n    #return t[1], t[0]       # sort by number of days, then by month name\n    #return len(t[0])        # sort by length of month name\n    #return t[0][-1]         # sort by last character of month name\n\n\n# Since a dictionary can't be sorted by value, what you can do is to convert\n# it into a list of tuples with tuple length 2.\n# You can then do custom sorts by passing your own function to sorted().\nmonths_as_list = sorted(months.items(), key=mykey, reverse=False)\n\nfor month in months_as_list:\n    print month\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Of course, remember, you need to use <code>OrderedDict</code> because regular Python dictionaries don't keep the original order. </p>\n\n<pre><code>from collections import OrderedDict\na = OrderedDict(sorted(originalDict.items(), key = lambda x: x[1]))\n</code></pre>\n\n<hr>\n\n<p>If you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an OrderedDict for 2.4 and 2.6  <a href=\"https://pypi.python.org/pypi/ordereddict\" rel=\"nofollow\">here</a>, but </p>\n\n<pre><code>a) I don't know about how well it works \n</code></pre>\n\n<p>and </p>\n\n<pre><code>b) You have to download and install it of course. If you do not have administrative access, then I'm afraid the option's out.)\n</code></pre>\n\n<hr>\n\n<pre><code>def gen(originalDict):\n    for x,y in sorted(zip(originalDict.keys(), originalDict.values()), key = lambda z: z[1]):\n        yield (x, y)\n    #Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. \n\nfor bleh, meh in gen(myDict):\n    if bleh == \"foo\":\n        print(myDict[bleh])\n</code></pre>\n\n<hr>\n\n<p>You can also print out every value</p>\n\n<pre><code>for bleh, meh in gen(myDict):\n    print(bleh,meh)\n</code></pre>\n\n<p>Please remember to remove the parentheses after print if not using Python 3.0 or above</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This returns the list of key-value pairs in the dictionary, sorted by value from highest to lowest:</p>\n\n<pre><code>sorted(d.items(), key=lambda x: x[1], reverse=True)\n</code></pre>\n\n<p>For the dictionary sorted by key, use the following:</p>\n\n<pre><code>sorted(d.items(), reverse=True)\n</code></pre>\n\n<p>The return is a list of tuples because dictionaries themselves can't be sorted.</p>\n\n<p>This can be both printed or sent into further computation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; import collections\n&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; sorted_x = collections.OrderedDict(sorted(x.items(), key=lambda t:t[1]))\n&gt;&gt;&gt; OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\n</code></pre>\n\n<p><code>OrderedDict</code> is subclass of <code>dict</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using Python 3.2:</p>\n\n<pre><code>x = {\"b\":4, \"a\":3, \"c\":1}\nfor i in sorted(x.values()):\n    print(list(x.keys())[list(x.values()).index(i)])\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are now two questions on Software Recommendations SE that seek to provide ongoing current data points to shape the below recommendations. If you have experience with relevant IDEs, please contribute both answers and votes there:</p>\n\n<ul>\n<li><a href=\"http://softwarerecs.stackexchange.com/q/26147/910\">Open Source Python IDE</a></li>\n<li><a href=\"http://softwarerecs.stackexchange.com/q/26151/910\">Commercial Python IDE</a></li>\n</ul>\n\n<h2>Results</h2>\n\n<p><a href=\"http://i.stack.imgur.com/ItVKB.png\">Image version</a></p>\n\n<p><a href=\"https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/pubhtml\">Spreadsheet version</a></p>\n\n<pre>\n                       Bracket Matching -.  .- Line Numbering\n                        Smart Indent -.  |  |  .- UML Editing / Viewing\n       Source Control Integration -.  |  |  |  |  .- Code Folding\n                  Error Markup -.  |  |  |  |  |  |  .- Code Templates\nIntegrated Python Debugging -.  |  |  |  |  |  |  |  |  .- Unit Testing\n  Multi-Language Support -.  |  |  |  |  |  |  |  |  |  |  .- GUI Designer (Qt, Eric, etc)\n Auto Code Completion -.  |  |  |  |  |  |  |  |  |  |  |  |  .- Integrated DB Support\n   Commercial/Free -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  .- Rapid Application\n Cross Platform -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     Development\n                +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n Atom           |Y |F |  |  |Y |Y |Y |Y |Y |Y |  |Y |Y |  |  |  |  |\n Editra         |Y |F |Y |Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |\n Emacs          |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |\n Eric Ide       |Y |F |Y |  |Y |Y |  |Y |  |Y |  |Y |  |Y |  |  |  |\n Geany          |Y |F |Y*|Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |*very limited\n Gedit          |Y |F |Y\u00b9|Y |  |  |  |Y |Y |Y |  |  |Y\u00b2|  |  |  |  |\u00b9with plugin; \u00b2sort of\n Idle           |Y |F |Y |  |Y |  |  |Y |Y |  |  |  |  |  |  |  |  |\n JEdit          |Y |F |  |Y |  |  |  |  |Y |Y |  |Y |  |  |  |  |  |\n KDevelop       |Y |F |  |Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |\n Komodo         |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |Y |  |\n NetBeans*      |Y |F |Y |Y |Y |  |Y |Y |Y |Y |Y |Y |Y |Y |  |  |Y |*pre-v7.0\n NotePad++      |W |F |  |Y |  |  |  |Y*|  |Y |  |  |  |  |  |  |  |*with plugin\n Pfaide         |W |C |Y |Y |  |  |  |Y |Y |Y |  |Y |Y |  |  |  |  |\n PIDA           |LW|F |Y |Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |VIM based\n PTVS           |W |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |  |  |Y*|  |Y |*WPF bsed\n PyCharm        |Y |CF|Y |Y*|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |*JavaScript\n PyDev(Eclipse) |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |\n Pyscripter     |W |F |Y |  |Y |Y |  |Y |  |Y |  |  |Y |Y |  |  |  |\n PythonWin      |W |F |Y |  |Y |  |  |Y |Y |  |  |Y |  |  |  |  |  |\n SciTE          |Y |F\u00b9|  |Y |  |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |\u00b9Mac version is\n ScriptDev      |W |C |Y |Y |Y |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |    commercial\n Spyder         |Y |F |Y |  |Y |Y |  |Y |Y |Y |  |  |  |  |  |  |  |\n Sublime Text   |Y |CF|Y |Y |  |Y |Y |Y |Y |Y |  |Y |Y |Y*|  |  |  |extensible w/Python,\n TextMate       |M |F |  |Y |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |    *PythonTestRunner\n UliPad         |Y |F |Y |Y |Y |  |  |Y |Y |  |  |  |Y |Y |  |  |  |\n Vim            |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |\n Visual Studio  |W |CF|Y |Y |Y |? |Y |Y |Y |Y |? |Y |? |? |? |? |? |\n WingIde        |Y |C |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |*support for C\n Zeus           |W |C |  |  |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |\n                +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n Cross Platform -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     Development\n   Commercial/Free -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '- Rapid Application\n Auto Code Completion -'  |  |  |  |  |  |  |  |  |  |  |  |  '- Integrated DB Support\n  Multi-Language Support -'  |  |  |  |  |  |  |  |  |  |  '- GUI Designer (Qt, Eric, etc)\nIntegrated Python Debugging -'  |  |  |  |  |  |  |  |  '- Unit Testing\n                  Error Markup -'  |  |  |  |  |  |  '- Code Templates\n       Source Control Integration -'  |  |  |  |  '- Code Folding\n                        Smart Indent -'  |  |  '- UML Editing / Viewing\n                       Bracket Matching -'  '- Line Numbering\n</pre>\n\n<hr>\n\n<p>Acronyms used:</p>\n\n<pre>\n L  - Linux\n W  - Windows\n M  - Mac\n C  - Commercial\n F  - Free\n CF - Commercial with Free limited edition\n ?  - To be confirmed\n</pre>\n\n<p>I don't mention basics like syntax highlighting as I expect these by default.</p>\n\n<hr>\n\n<p>This is a just dry list reflecting your feedback and comments, I am not advocating any of these tools. I will keep updating this list as you keep posting your answers.</p>\n\n<p><strong><em>PS. Can you help me to add features of the above editors to the list (like auto-complete, debugging, etc.)?</em></strong></p>\n\n<p>We have a comprehensive wiki page for this question <a href=\"https://wiki.python.org/moin/IntegratedDevelopmentEnvironments\">https://wiki.python.org/moin/IntegratedDevelopmentEnvironments</a></p>\n\n<p><a href=\"https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/edit#gid=0&amp;fvid=1960281650\">Submit edits to the spreadsheet</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Python 2.7.9+ and 3.4+</h2>\n\n<p>Good news! <a href=\"https://docs.python.org/3/whatsnew/3.4.html\">Python 3.4</a> (released March 2014)\nand <a href=\"https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7\">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Nodejs, Haskell, Perl, Go--almost every other contemporary language with a majority open-source community. Thank you Python.</p>\n\n<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this at <a href=\"http://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719\">Does python have a package/module management system?</a></p>\n\n<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>\n\n<h2>Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3</h2>\n\n<p>Flying in the face of its <a href=\"http://www.python.org/about/\">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was--until recently--ironically difficult to install.</p>\n\n<h3>Official instructions</h3>\n\n<p>Per <a href=\"http://www.pip-installer.org/en/latest/installing.html\">http://www.pip-installer.org/en/latest/installing.html</a></p>\n\n<p>Download <a href=\"https://raw.github.com/pypa/pip/master/contrib/get-pip.py\"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt.</p>\n\n<pre><code>python get-pip.py\n</code></pre>\n\n<p>You possibly need an administrator command prompt to do this. Follow <a href=\"http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx\">http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx</a></p>\n\n<h3>Alternative instructions</h3>\n\n<p>The official documentation tells users to install Pip and each its dependencies from source. That's tedious for the experienced, and prohibitively difficult for newbies.</p>\n\n<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to</p>\n\n<ol>\n<li>Install setuptools <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools</a></li>\n<li>Install pip <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip</a></li>\n</ol>\n\n<p>For me, this installed Pip at <code>C:\\Python27\\Scripts\\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (eg.  <code>C:\\Python27\\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>\n\n<pre><code>pip install httpie\n</code></pre>\n\n<p>There you go (hopefully)! Solutions for common problems are given below:</p>\n\n<h3>Proxy problems</h3>\n\n<p>If you work in an office, you might be behind a HTTP proxy. If so, set the environment variables <a href=\"http://docs.python.org/2/library/urllib.html\"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>\n\n<pre><code>http://proxy_url:port\nhttp://username:password@proxy_url:port\n</code></pre>\n\n<p>If you're really unlucky, your proxy might be a Microsoft NTLM proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href=\"http://cntlm.sourceforge.net/\">http://cntlm.sourceforge.net/</a></p>\n\n<h3>Unable to find vcvarsall.bat</h3>\n\n<p>Python modules can be part written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>\n\n<blockquote>\n  <p>Error: Unable to find vcvarsall.bat</p>\n</blockquote>\n\n<p>You can fix that by <a href=\"http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat\">installing a C++ compiler</a> such as MinGW or Visual C++. Microsoft actually ship one specifically for use with Python Or try <a href=\"http://aka.ms/vcpython27\">http://aka.ms/vcpython27</a></p>\n\n<p>Often though it's easier to check Christoph's site for your package <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><s>-- <strong>Outdated</strong> -- use distribute, not setuptools as described here. --</s><br>\n-- <strong>Outdated #2</strong> -- use setuptools as distribute is deprecated.</p>\n\n<p>As you mentioned pip doesn't include an independent installer, but you can install it with its predecessor easy_install.</p>\n\n<p>So:</p>\n\n<ol>\n<li>Download the last pip version from here: <a href=\"http://pypi.python.org/pypi/pip#downloads\">http://pypi.python.org/pypi/pip#downloads</a></li>\n<li>Uncompress it</li>\n<li>Download the last easy installer for Windows: (<strong>download the .exe at the bottom of <a href=\"http://pypi.python.org/pypi/setuptools\">http://pypi.python.org/pypi/setuptools</a></strong> ). Install it.</li>\n<li>copy the uncompressed pip folder <strong>content</strong> into <code>C:\\Python2x\\</code> folder (don't copy the whole folder into it, just the content), because python command doesn't work outside <code>C:\\Python2x</code> folder and then run:  <code>python setup.py install</code></li>\n<li>Add your python <code>C:\\Python2x\\Scripts</code> to the path</li>\n</ol>\n\n<p>You are done. </p>\n\n<p>Now you can use <code>pip install package</code> to easily install packages as in Linux :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>2014 UPDATE:</strong></p>\n\n<p>1) If you have installed python 3.4 or later, pip is included with python and should already be working on your system. </p>\n\n<p>2) If you are running a version below python 3.4 or if pip was not installed with python 3.4 for some reason, then you'd probably use pip's official installation script <code>get-pip.py</code>. The pip installer now grabs setuptools for you, and works regardless of architecture (32bit or 64bit).</p>\n\n<p>The installation <a href=\"http://www.pip-installer.org/en/latest/installing.html\">instructions are detailed here</a> and involve:</p>\n\n<blockquote>\n  <p>To install or upgrade pip, securely download <a href=\"https://raw.github.com/pypa/pip/master/contrib/get-pip.py\">get-pip.py</a>.</p>\n  \n  <p>Then run the following (which may require administrator access):</p>\n</blockquote>\n\n<pre><code>python get-pip.py\n</code></pre>\n\n<blockquote>\n  <p>To upgrade an existing setuptools (or distribute), run <code>pip install -U setuptools</code></p>\n</blockquote>\n\n<p>I'll leave the two sets of old instructions below for posterity.</p>\n\n<p><strong>OLD Answers:</strong></p>\n\n<p>For Windows editions of the <strong>64 bit</strong> variety - 64bit windows + python used to require a separate installation method due to ez_setup, but I've tested the new distribute method on 64bit windows running 32bit python and 64bit python, and you can now use the same method for all versions of windows/python 2.7X:</p>\n\n<p><strong>OLD Method 2</strong> using <a href=\"https://pypi.python.org/pypi/distribute\">distribute</a>:</p>\n\n<ol>\n<li>Download <a href=\"http://python-distribute.org/distribute_setup.py\">distribute</a> - I threw mine in <code>C:\\Python27\\Scripts</code> (feel free to create a <code>Scripts</code> directory if it doesn't exist.</li>\n<li>Open up a command prompt (on windows you should check out <a href=\"http://code.google.com/p/conemu-maximus5/\">conemu2</a> if you don't use powershell) and change (<code>cd</code>) to the directory you've downloaded <code>distribute_setup.py</code> to.</li>\n<li>Run distribute_setup: <code>python distribute_setup.py</code> (This will not work if your python installation directory is not added to your path - <a href=\"http://stackoverflow.com/a/6318188/705198\">go here for help</a>)</li>\n<li>Change the current directory to the Scripts directory for your python installation (<code>C:\\Python27\\Scripts</code>) or add that directory, as well as the python base installation directory to your %PATH% environment variable.</li>\n<li>Install pip using the newly installed setuptools: <code>easy_install pip</code></li>\n</ol>\n\n<p>The last step will not work unless you're either in the directory <code>easy_install.exe</code> is located in(C:\\Python27\\Scripts would be the default for python 2.7), or you have that directory added to your path.</p>\n\n<p><strong>OLD Method 1</strong> using ez_setup:</p>\n\n<p><a href=\"http://pypi.python.org/pypi/setuptools#windows\">from the setuptools page</a> --</p>\n\n<blockquote>\n  <p>Download <a href=\"http://peak.telecommunity.com/dist/ez_setup.py\">ez_setup.py</a> and run it; it will download the appropriate .egg file and install it for you. (Currently, the provided .exe installer does not support 64-bit versions of Python for Windows, due to a distutils installer compatibility issue</p>\n</blockquote>\n\n<p>After this, you may continue with:</p>\n\n<ol>\n<li>Add <code>c:\\Python2x\\Scripts</code> to the Windows path (replace the <code>x</code> in <code>Python2x</code> with the actual version number you have installed)</li>\n<li>Open a new (!) DOS prompt. From there run <code>easy_install pip</code></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Oct 2015 Update:</strong> </p>\n\n<p>These answers are outdated or otherwise wordy and difficult.</p>\n\n<p>If you've got Python 3.4+ or 2.7.9+, it will be <a href=\"https://docs.python.org/3.4/whatsnew/3.4.html#whatsnew-pep-453\" rel=\"nofollow\">installed by default</a> on Windows.  Otherwise, in short:</p>\n\n<ol>\n<li>Download the pip installer: \n<a href=\"https://raw.github.com/pypa/pip/master/contrib/get-pip.py\" rel=\"nofollow\">https://raw.github.com/pypa/pip/master/contrib/get-pip.py</a></li>\n<li>Inspect file to confirm it isn't malicious\n(must b64 decode).</li>\n<li>Open a console in the download folder as Admin and run\n<code>get-pip.py</code>.  Alternatively, right-click its icon in Explorer and choose the \"run as Admin...\".</li>\n</ol>\n\n<p>The new binaries <code>pip.exe</code> (and the deprecated <code>easy_install.exe</code>) will be found in the <code>\"%ProgramFiles%\\PythonXX\\Scripts\"</code> folder (or similar), which is likely not in your <code>PATH</code> variable.  I recommend adding it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python 3.4, which  was released in March 2014, comes with <code>pip</code> included:<br>\n<a href=\"http://docs.python.org/3.4/whatsnew/3.4.html\">http://docs.python.org/3.4/whatsnew/3.4.html</a><br>\nSo since the release of Python 3.4, the up-to-date way to install pip on Windows is to just install Python.\nWhen sticking to all defaults during installation, pip will be installed to<br>\n<code>C:\\Python34\\Scripts\\pip3.exe</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When I have to use Windows, I use ActivePython, which automatically adds everything to your PATH and includes a package manager called <a href=\"http://code.activestate.com/pypm/\">PyPM</a> which provides <em>binary</em> package management making it faster and simpler to install packages.</p>\n\n<p><code>pip</code> and <code>easy_install</code> aren't exactly the same thing, so there are some things you can get through <code>pip</code> but not <code>easy_install</code> <a href=\"http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install/3224103#3224103\">and vice versa</a>.</p>\n\n<p>My recommendation is that you get <a href=\"http://www.activestate.com/activepython/downloads\">ActivePython Community Edition</a> and don't worry about the huge hassle of getting everything set up for Python on Windows. Then, you can just use <code>pypm</code>.</p>\n\n<p>In case you want to use <code>pip</code> you have to check the <code>PyPM</code> option in the ActiveState installer. After installation you only need to logoff and log on again, and <code>pip</code> will be available on the commandline, because it is contained in the ActiveState installer <code>PyPM</code> option and the paths have been set by the installer for you already. <code>PyPM</code> will also be available, but you do not have to use it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The up-to-date way is to use Windows' package manager <a href=\"http://chocolatey.org/\">Chocolatey</a>.</p>\n\n<p>Once this is installed, all you have to do is open a command prompt and run the following the three commands below, which will install Python 2.7, easy_install and pip. It will automatically detect whether you're on x64 or x86 Windows.</p>\n\n<pre><code>cinst python\ncinst easy.install\ncinst pip\n</code></pre>\n\n<p>All of the other Python packages on the Chocolatey Gallery can be found <a href=\"http://chocolatey.org/packages?q=python\">here</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Update March 2015</strong></p>\n\n<p>Python 2.7.9 and later (on the python2 series), and Python 3.4 and later include pip by default, so you may have pip already.</p>\n\n<p>If you don't, run this one line command on your prompt (which may require administrator access):</p>\n\n<pre><code>python -c \"exec('try: from urllib2 import urlopen \\nexcept: from urllib.request import urlopen');f=urlopen('https://bootstrap.pypa.io/get-pip.py').read();exec(f)\"\n</code></pre>\n\n<p>It will install <a href=\"http://www.pip-installer.org/\">pip</a>. If <a href=\"https://bitbucket.org/pypa/setuptools/\">Setuptools</a> is not already installed, <code>get-pip.py</code> will install it for you too.</p>\n\n<p>As mentioned in comments, the above command will download code from the Pip source code repository at GitHub.com, and dynamically run it at your environment. So be noticed that this is a shortcut of the steps download, inspect and run, <strong>all with a single command using Python itself</strong>. If you trust Pip, can proceed without doubt. </p>\n\n<p>Be sure that your Windows environment variable PATH includes Python's folders (for Python 2.7.x default install: <code>C:\\Python27</code> and <code>C:\\Python27\\Scripts</code>, for Python 3.3x: <code>C:\\Python33</code> and <code>C:\\Python33\\Scripts</code>, and so on).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Installers</h2>\n\n<p>I've built Windows installers for both <a href=\"http://pypi.python.org/pypi/distribute\">distribute</a> and <a href=\"http://www.pip-installer.org/\">pip</a> here (the goal being to use <code>pip</code> without having to either bootstrap with <code>easy_install</code> or save and run Python scripts):</p>\n\n<ul>\n<li><a href=\"http://download.sjsoft.com/opensource/distribute-0.6.27.win32.exe\">distribute-0.6.27.win32.exe</a></li>\n<li><a href=\"http://download.sjsoft.com/opensource/pip-1.1.win32.exe\">pip-1.1.win32.exe</a></li>\n</ul>\n\n<p>On Windows, simply download and install first <code>distribute</code>, then <code>pip</code> from the above links. The <code>distribute</code> link above does contain stub <code>.exe</code> installers, and these are currently 32-bit only. I haven't tested the effect on 64-bit Windows.</p>\n\n<h2>Building on Windows</h2>\n\n<p>The process to redo this for new versions is not difficult, and I've included it here for reference.</p>\n\n<h3>Building <code>distribute</code></h3>\n\n<p>In order to get the stub <code>.exe</code> files, you need to have a Visual C++ compiler (it is apparently compilable with MinGW as well)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>hg clone https://bitbucket.org/tarek/distribute\ncd distribute\nhg checkout 0.6.27\nrem optionally, comment out tag_build and tag_svn_revision in setup.cfg\nmsvc-build-launcher.cmd\npython setup.py bdist_win32\ncd ..\necho build is in distribute\\dist\n</code></pre>\n\n<h3>Building <code>pip</code></h3>\n\n<pre class=\"lang-none prettyprint-override\"><code>git clone https://github.com/pypa/pip.git\ncd pip\ngit checkout 1.1\npython setup.py bdist_win32\ncd ..\necho build is in pip\\dist\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Works For Python 2.7, save this script and launch it :<br><br>\n<a href=\"https://raw.github.com/pypa/pip/master/contrib/get-pip.py\">https://raw.github.com/pypa/pip/master/contrib/get-pip.py</a><br><br>\nPip is installed, then add the path to your environment :<br></p>\n\n<pre><code>C:\\Python27\\Scripts\n</code></pre>\n\n<p>Finally</p>\n\n<pre><code>pip install virtualenv \n</code></pre>\n\n<p>Also you need Microsoft Visual C++ 2008 Express <a href=\"http://go.microsoft.com/?linkid=7729279\">http://go.microsoft.com/?linkid=7729279</a> to get the good compiler and avoir this kind of messages when installing packages :</p>\n\n<pre><code>error: Unable to find vcvarsall.bat\n</code></pre>\n\n<p>If you have a 64bit version of Windows 7, you may read this to successfully install python executable package (issue with registry entries) :<br>\n<a href=\"http://tech.valgog.com/2010/01/after-installing-64-bit-windows-7-at.html\">http://tech.valgog.com/2010/01/after-installing-64-bit-windows-7-at.html</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To install pip <em>globally</em> on Python 2.x, easy_install appears to be the best solution as Adri\u00e1n states.</p>\n\n<p>However the <a href=\"http://www.pip-installer.org/en/latest/installing.html\">installation instructions</a> for pip recommend using <a href=\"http://www.virtualenv.org\">virtualenv</a> since every virtualenv has pip installed in it automatically.  This does not require root access or modify your system Python installation.</p>\n\n<p>Installing virtualenv still requires easy_install though.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To use pip, it is not mandatory that you need to install pip in the system directly. You can use it through virtualenv. What you can do is follow these steps:</p>\n\n<ul>\n<li>download virtualenv tar.gz file from <a href=\"https://pypi.python.org/pypi/virtualenv\">https://pypi.python.org/pypi/virtualenv</a></li>\n<li>unzip it with 7zip or some other tools</li>\n</ul>\n\n<p>We normally need to install python packages for one particular project. So, now create a project folder, lets say myproject. </p>\n\n<ul>\n<li>COPY <strong>virtualenv.py</strong> file from decompressed folder of virtualenv, and PASTE inside <strong>myproject</strong> folder</li>\n</ul>\n\n<p>Now Create Virtual Environment, lets say <strong>myvirtualenv</strong> as follows, inside <strong>myproject</strong> folder:</p>\n\n<pre><code>python virtualenv.py myvirtualenv\n</code></pre>\n\n<p>It will show you:</p>\n\n<pre><code>New python executable in myvirtualenv\\Scripts\\python.exe\nInstalling setuptools....................................done.\nInstalling pip.........................done.\n</code></pre>\n\n<p>Now your virtual environment <strong>myvirtualenv</strong> is created inside your project folder. You might notice, pip is now installed inside you virtual environment. All you need to do is activate the virtual environment with following command.</p>\n\n<pre><code>myvirtualenv\\Scripts\\activate\n</code></pre>\n\n<p>You will see following in the command prompt:</p>\n\n<pre><code>(myvirtualenv) PATH\\TO\\YOUR\\PROJECT\\FOLDER&gt;pip install package_name\n</code></pre>\n\n<p>Now you can start using pip, but make sure you have activated the virtualenv looking at the left of your prompt.</p>\n\n<p>This is one of the easiest way to install pip i.e. inside virtual environment, but you need to have virtualenv.py file with you.</p>\n\n<p>For more ways to install pip/virtualenv/virtualenvwrapper you can refer to <a href=\"http://thegauraw.tumblr.com\">thegauraw.tumblr.com</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is now described at <a href=\"http://www.pip-installer.org/en/latest/installing.html\" rel=\"nofollow\">http://www.pip-installer.org/en/latest/installing.html</a>.</p>\n\n<p>Be sure that your Windows environment variable PATH includes Python's folders (for Python 2.7.x default install: C:\\Python27 and C:\\Python27\\Scripts, for Python 3.3x: C:\\Python33 and C:\\Python33\\Scripts, etc)</p>\n\n<p>Then download and run <a href=\"https://raw.github.com/pypa/pip/master/contrib/get-pip.py\" rel=\"nofollow\">https://raw.github.com/pypa/pip/master/contrib/get-pip.py</a></p>\n\n<pre><code>curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py\npython get-pip.py\n</code></pre>\n\n<p>PS:</p>\n\n<p>I encounter same problem and then found such perhaps easiest way (one liner!) mentioned on official website here: <a href=\"http://www.pip-installer.org/en/latest/installing.html\" rel=\"nofollow\">http://www.pip-installer.org/en/latest/installing.html</a></p>\n\n<p>Can't believe there are so many lengthy (perhaps outdated?) answers out there. Feeling thankful to them but, please up-vote this short answer to help more new comers!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just wanted to add one more solution for those having issues installing setuptools from Windows 64-bit. The issue is discussed in this bug on python.org and is still unresolved as of the date of this comment. A simple workaround is mentioned and it works flawlessly. One registry change did the trick for me.</p>\n\n<p>Link: <a href=\"http://bugs.python.org/issue6792#\">http://bugs.python.org/issue6792#</a></p>\n\n<p>Solution that worked for me..\nAdd this registry setting for 2.6+ versions of python:</p>\n\n<pre><code> [HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.6\\InstallPath]\n @=\"C:\\\\Python26\\\\\"\n</code></pre>\n\n<p>This is most likely the registry setting you will already have for Python 2.6+ </p>\n\n<pre><code> [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.6\\InstallPath]\n @=\"C:\\\\Python26\\\\\"\n</code></pre>\n\n<p>Clearly, you will need to replace the 2.6 version with whatever version of python you are running. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The best way I found so far, just two lines of code, </p>\n\n<pre><code>curl http://python-distribute.org/distribute_setup.py | python\ncurl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\n</code></pre>\n\n<p>Tested on Windows 8 with Powershell, Cmd, Git Bash (MinGW)</p>\n\n<p>And you probably want to add the path to your environment,  it's somewhere like <code>C:\\Python33\\Scripts</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://code.google.com/p/pythonxy/\">PythonXY</a> comes with <code>pip</code> included, among <a href=\"https://code.google.com/p/pythonxy/wiki/Welcome?tm=6\">others</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I wrote <a href=\"https://github.com/chrissimpkins/pip-installer\" rel=\"nofollow\">this pip install script</a> that wraps both the ez_setup.py and get-pip.py install scripts that were mentioned in Gringo Suave's answer (and runs a pip install --upgrade setuptools for the latest setuptools version once pip is installed).</p>\n\n<p>Clone the repository with:</p>\n\n<pre><code>git clone https://github.com/chrissimpkins/pip-installer.git\n</code></pre>\n\n<p>Or download a .zip archive:</p>\n\n<p><a href=\"https://github.com/chrissimpkins/pip-installer/archive/master.zip\" rel=\"nofollow\">https://github.com/chrissimpkins/pip-installer/archive/master.zip</a></p>\n\n<p>And then run the pipinstall.py script in the top level of the repository directory:</p>\n\n<pre><code>python pipinstall.py\n</code></pre>\n\n<p>This will give you the latest releases for both applications.  It's safe to remove the script repository after the install.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had some issues installing in different ways when I followed instructions here. I think it's very tricky to install in every Windows environment in the same way. In my case I need Python 2.6, 2.7 and 3.3 in the same machine for different purposes so that's why I think there're more problems.\nBut the following instructions worked perfectly for me, so might be depending on your environment you should try this one:</p>\n\n<p><a href=\"http://docs.python-guide.org/en/latest/starting/install/win/\" rel=\"nofollow\">http://docs.python-guide.org/en/latest/starting/install/win/</a></p>\n\n<p>Also, due to the different environments I found incredible useful to use Virtual Environments, I had websites that use different libraries and it's much better to encapsulate them into a single folder, check out the instructions, briefly if PIP is installed you just install VirtualEnv:</p>\n\n<pre><code>pip install virtualenv\n</code></pre>\n\n<p>Into the folder you have all your files run</p>\n\n<pre><code>virtualenv venv\n</code></pre>\n\n<p>And seconds later you have a virtual environment with everything in venv folder, to activate it run venv/Scripts/activate.bat (deactivate the environment is easy, use deactivate.bat). Every library you install will end up in venv\\Lib\\site-packages and it's easy to move your whole environment somewhere.</p>\n\n<p>The only downside I found is some code editors can't recognize this kind of environments, and you will see warnings in your code because imported libraries are not found. Of course there're tricky ways to do it but it would be nice editors keep in mind Virtual Environments are very normal nowadays.</p>\n\n<p>Hope it helps.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I actually use Anaconda from continuum.io on Windows and it works very well. There's a full feature command windows (shell) with all utilities (like pip, conda, etc.)</p>\n\n<p>It also comes with pandas, numpy, etc... pretty useful on Windows as it may be hard to compile everything separately.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Working as of Feb 04 2014 :):</p>\n\n<p>If you have tried installing pip through windows installer file from: <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\" rel=\"nofollow\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip</a> as suggested by @Colonel Panic you might have installed pip package manager successfully, but you might be unable to install any packages with pip. You might also got the same SSL error as i got when i tried to install beautifulsoup4 if you look in the pip.log file:</p>\n\n<pre><code>Downloading/unpacking beautifulsoup4\n  Getting page https://pypi.python.org/simple/beautifulsoup4/\n  Could not fetch URL https://pypi.python.org/simple/beautifulsoup4/: **connection error: [Errno 1] _ssl.c:504: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed**\n  Will skip URL https://pypi.python.org/simple/beautifulsoup4/ when looking for download links for beautifulsoup4\n</code></pre>\n\n<p>The problem is an issue with an old version of OpenSSL being incompatible with pip 1.3.1 and above versions. The easy workaround for now, is to install pip 1.2.1, which does not require SSL:</p>\n\n<p>Installing Pip on Windows:</p>\n\n<pre><code>1) Download pip 1.2.1 from https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz\n2) Extract pip-1.2.1.tar.gz file\n3) Change directory to the extracted folder: cd &lt;path to extracted folder&gt;/pip-1.2.1\n4) Run python setup.py install\n5) Now make sure  C:\\Python27\\Scripts is in PATH because pip is installed in C:\\Python27\\Scripts directory unlike C:\\Python27\\Lib\\site-packages where python packages are normally installed\n</code></pre>\n\n<p>Now try to install any package using pip. </p>\n\n<p>e.g. To install requests package using pip. Run from cmd:</p>\n\n<pre><code>pip install requests \n</code></pre>\n\n<p>Whola! requests will be successfully installed and you will get a success message.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alternatively, you can get pip-Win which is an all-in-one installer for pip and virtualenv on Windows and its GUI.</p>\n\n<ul>\n<li>switch from one python interpreter (i.e. version) to another (including py and pypy)</li>\n<li>see all installed packages, and whether they are up-to-date</li>\n<li>install or upgrade a package, or upgrade pip itself</li>\n<li>create and delete virtual environments, and switch between them</li>\n<li>run the IDLE or another python script, with the selected interpreter</li>\n</ul>\n\n<p><a href=\"https://sites.google.com/site/pydatalog/python/pip-for-windows\" rel=\"nofollow\">https://sites.google.com/site/pydatalog/python/pip-for-windows</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li>Download script: <a href=\"https://raw.github.com/pypa/pip/master/contrib/get-pip.py\" rel=\"nofollow\">https://raw.github.com/pypa/pip/master/contrib/get-pip.py</a></li>\n<li>Save it on drive somewhere like C:\\pip-script\\get-pip.py</li>\n<li>Navigate to that path from command prompt and run \" python get-pip.py \"</li>\n</ol>\n\n<p>Guide link: <a href=\"http://www.pip-installer.org/en/latest/installing.html#install-pip\" rel=\"nofollow\">http://www.pip-installer.org/en/latest/installing.html#install-pip</a></p>\n\n<p>Note: Make sure scripts path like this (C:\\Python27\\Scripts) is added int %PATH% environment variable as well.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just download setuptools-15.2.zip (md5), from here <a href=\"https://pypi.python.org/pypi/setuptools#windows-simplified\" rel=\"nofollow\">https://pypi.python.org/pypi/setuptools#windows-simplified</a> , and run ez_setup.py.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's very simple:</p>\n\n<pre><code>Step 1: wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\nStep 2: wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py\nStep 2: python ez_setup.py \nStep 3: python get-pip.py\n</code></pre>\n\n<p>(Make sure your python and python script directory (e.g. C:\\Python27 and C:\\Python27\\Scripts) are in the PATH.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How to install pip:</p>\n\n<ol>\n<li>Download and install <a href=\"http://www.activestate.com/activepython/downloads\" rel=\"nofollow\">ActivePython</a></li>\n<li>Open Command Prompt</li>\n<li>Type pypm install pip</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is also an issue with pip on <strong>64 bit Cygwin</strong>. After installation, output of the <code>pip</code> command is always empty, no matters what commands/options do you use (even <code>pip -V</code> doesn't produce any output).</p>\n\n<p>If it's your case, just install development version of Cygwin's package <em>libuuid</em> called <strong>libuuid-devel</strong>. Without that package using of <em>libuuid</em> causes a segfault. And pip uses that package, so the segfault is cause of an empty output of pip on Cygwin x64. On 32 bit Cygwin it's working fine even without that package.</p>\n\n<p>You can read some details there: <a href=\"https://github.com/kennethreitz/requests/issues/1547\" rel=\"nofollow\">https://github.com/kennethreitz/requests/issues/1547</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're just looking to iterate over a flattened version of the data structure and don't need an indexable sequence, consider <a href=\"http://docs.python.org/library/itertools.html#itertools.chain\">itertools.chain and company</a>.</p>\n\n<pre><code>&gt;&gt;&gt; list_of_menuitems = [['image00', 'image01'], ['image10'], []]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; chain = itertools.chain(*list_of_menuitems)\n&gt;&gt;&gt; print(list(chain))\n['image00', 'image01', 'image10']\n</code></pre>\n\n<p>It will work on anything that's iterable, which should include Django's iterable <code>QuerySet</code>s, which it appears that you're using in the question.</p>\n\n<p><strong>Edit:</strong> This is probably as good as a reduce anyway, because reduce will have the same overhead copying the items into the list that's being extended. <code>chain</code> will only incur this (same) overhead if you run <code>list(chain)</code> at the end.</p>\n\n<p><strong>Meta-Edit:</strong> Actually, it's less overhead than the question's proposed solution, because you throw away the temporary lists you create when you extend the original with the temporary.</p>\n\n<p><strong>Edit:</strong> As <a href=\"http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#411548\">J.F. Sebastian says</a> <code>itertools.chain.from_iterable</code> avoids the unpacking and you should use that to avoid <code>*</code> magic, but <a href=\"http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#408281\">the timeit app</a> shows negligible performance difference.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You almost have it! The <a href=\"http://docs.python.org/tutorial/datastructures.html#nested-list-comprehensions\">way to do nested list comprehensions</a> is to put the <code>for</code> statements in the same order as they would go in regular nested <code>for</code> statements.</p>\n\n<p>Thus, this</p>\n\n<pre><code>for inner_list in outer_list:\n    for item in inner_list:\n        ...\n</code></pre>\n\n<p>corresponds to</p>\n\n<pre><code>[... for inner_list in outer_list for item in inner_list]\n</code></pre>\n\n<p>So you want</p>\n\n<pre><code>[image for menuitem in list_of_menuitems for image in menuitem]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#406622\">@S.Lott</a>: You inspired me to write a timeit app.</p>\n\n<p>I figured it would also vary based on the number of partitions (number of iterators within the container list) -- your comment didn't mention how many partitions there were of the thirty items. This plot is flattening a thousand items in every run, with varying number of partitions. The items are evenly distributed among the partitions.</p>\n\n<p><img src=\"http://lh4.ggpht.com/_t58Xs7CN35o/SWFNN5Z_Q1I/AAAAAAAABPs/ewrRhthazfs/s400/Flatten%20with%20Itertools%20Iterable%201000%20Items.png\" alt=\"Flattening Comparison\"></p>\n\n<p>Code (Python 2.6):</p>\n\n<pre><code>#!/usr/bin/env python2.6\n\n\"\"\"Usage: %prog item_count\"\"\"\n\nfrom __future__ import print_function\n\nimport collections\nimport itertools\nimport operator\nfrom timeit import Timer\nimport sys\n\nimport matplotlib.pyplot as pyplot\n\ndef itertools_flatten(iter_lst):\n    return list(itertools.chain(*iter_lst))\n\ndef itertools_iterable_flatten(iter_iter):\n    return list(itertools.chain.from_iterable(iter_iter))\n\ndef reduce_flatten(iter_lst):\n    return reduce(operator.add, map(list, iter_lst))\n\ndef reduce_lambda_flatten(iter_lst):\n    return reduce(operator.add, map(lambda x: list(x), [i for i in iter_lst]))\n\ndef comprehension_flatten(iter_lst):\n    return list(item for iter_ in iter_lst for item in iter_)\n\nMETHODS = ['itertools', 'itertools_iterable', 'reduce', 'reduce_lambda',\n           'comprehension']\n\ndef _time_test_assert(iter_lst):\n    \"\"\"Make sure all methods produce an equivalent value.\n    :raise AssertionError: On any non-equivalent value.\"\"\"\n    callables = (globals()[method + '_flatten'] for method in METHODS)\n    results = [callable(iter_lst) for callable in callables]\n    if not all(result == results[0] for result in results[1:]):\n        raise AssertionError\n\ndef time_test(partition_count, item_count_per_partition, test_count=10000):\n    \"\"\"Run flatten methods on a list of :param:`partition_count` iterables.\n    Normalize results over :param:`test_count` runs.\n    :return: Mapping from method to (normalized) microseconds per pass.\n    \"\"\"\n    iter_lst = [[dict()] * item_count_per_partition] * partition_count\n    print('Partition count:    ', partition_count)\n    print('Items per partition:', item_count_per_partition)\n    _time_test_assert(iter_lst)\n    test_str = 'flatten(%r)' % iter_lst\n    result_by_method = {}\n    for method in METHODS:\n        setup_str = 'from test import %s_flatten as flatten' % method\n        t = Timer(test_str, setup_str)\n        per_pass = test_count * t.timeit(number=test_count) / test_count\n        print('%20s: %.2f usec/pass' % (method, per_pass))\n        result_by_method[method] = per_pass\n    return result_by_method\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        raise ValueError('Need a number of items to flatten')\n    item_count = int(sys.argv[1])\n    partition_counts = []\n    pass_times_by_method = collections.defaultdict(list)\n    for partition_count in xrange(1, item_count):\n        if item_count % partition_count != 0:\n            continue\n        items_per_partition = item_count / partition_count\n        result_by_method = time_test(partition_count, items_per_partition)\n        partition_counts.append(partition_count)\n        for method, result in result_by_method.iteritems():\n            pass_times_by_method[method].append(result)\n    for method, pass_times in pass_times_by_method.iteritems():\n        pyplot.plot(partition_counts, pass_times, label=method)\n    pyplot.legend()\n    pyplot.title('Flattening Comparison for %d Items' % item_count)\n    pyplot.xlabel('Number of Partitions')\n    pyplot.ylabel('Microseconds')\n    pyplot.show()\n</code></pre>\n\n<p><strong>Edit:</strong> Decided to make it community wiki.</p>\n\n<p><strong>Note:</strong> <code>METHODS</code> should probably be accumulated with a decorator, but I figure it'd be easier for people to read this way.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This solution works for arbitrary nesting depths - not just the \"list of lists\" depth that some (all?) of the other solutions are limited to:</p>\n\n<pre><code>def flatten(x):\n    result = []\n    for el in x:\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n</code></pre>\n\n<p>It's the recursion which allows for arbitrary depth nesting - until you hit the maximum recursion depth, of course...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>sum(list of lists, [])</code> would flatten it.</p>\n\n<pre><code>l = [['image00', 'image01'], ['image10'], []]\nprint sum(l,[]) # prints ['image00', 'image01', 'image10']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 2.6, using <a href=\"http://docs.python.org/library/itertools.html#itertools.itertools.chain.from_iterable\"><code>chain.from_iterable()</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; list(chain.from_iterable(mi.image_set.all() for mi in h.get_image_menu()))\n</code></pre>\n\n<p>It avoids creating of intermediate list.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Performance Results.  Revised.</p>\n\n<pre><code>import itertools\ndef itertools_flatten( aList ):\n    return list( itertools.chain(*aList) )\n\nfrom operator import add\ndef reduce_flatten1( aList ):\n    return reduce(add, map(lambda x: list(x), [mi for mi in aList]))\n\ndef reduce_flatten2( aList ):\n    return reduce(list.__add__, map(list, aList))\n\ndef comprehension_flatten( aList ):\n    return list(y for x in aList for y in x)\n</code></pre>\n\n<p>I flattened a 2-level list of 30 items 1000 times</p>\n\n<pre><code>itertools_flatten     0.00554\ncomprehension_flatten 0.00815\nreduce_flatten2       0.01103\nreduce_flatten1       0.01404\n</code></pre>\n\n<p>Reduce is always a poor choice.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There seems to be a confusion with operator.add! When you add two lists together, the correct term for that is concat, not add. operator.concat is what you need to use.</p>\n\n<p>If you're thinking functional, it is as easy as this::</p>\n\n<pre><code>&gt;&gt;&gt; list2d = ((1,2,3),(4,5,6), (7,), (8,9))\n&gt;&gt;&gt; reduce(operator.concat, list2d)\n(1, 2, 3, 4, 5, 6, 7, 8, 9)\n</code></pre>\n\n<p>You see reduce respects the sequence type, so when you supply a tuple, you get back a tuple. let's try with a list::</p>\n\n<pre><code>&gt;&gt;&gt; list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n&gt;&gt;&gt; reduce(operator.concat, list2d)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n<p>Aha, you get back a list.</p>\n\n<p>How about performance::</p>\n\n<pre><code>&gt;&gt;&gt; list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n&gt;&gt;&gt; %timeit list(itertools.chain.from_iterable(list2d))\n1000000 loops, best of 3: 1.36 \u00b5s per loop\n</code></pre>\n\n<p>from_iterable is pretty fast! But it's no comparison to reduce with concat.</p>\n\n<pre><code>&gt;&gt;&gt; list2d = ((1,2,3),(4,5,6), (7,), (8,9))\n&gt;&gt;&gt; %timeit reduce(operator.concat, list2d)\n1000000 loops, best of 3: 492 ns per loop\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Off the top of my head, you can eliminate the lambda:</p>\n\n<pre><code>reduce(list.__add__, map(list, [mi.image_set.all() for mi in list_of_menuitems]))\n</code></pre>\n\n<p>Or even eliminate the map, since you've already got a list-comp:</p>\n\n<pre><code>reduce(list.__add__, [list(mi.image_set.all()) for mi in list_of_menuitems])\n</code></pre>\n\n<p>You can also just express this as a sum of lists:</p>\n\n<pre><code>sum([list(mi.image_set.all()) for mi in list_of_menuitems], [])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is the correct solution using list comprehensions (they're backward in the question):</p>\n\n<pre><code>&gt;&gt;&gt; join = lambda it: (y for x in it for y in x)\n&gt;&gt;&gt; list(join([[1,2],[3,4,5],[]]))\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p>In your case it would be</p>\n\n<pre><code>[image for menuitem in list_of_menuitems for image in menuitem.image_set.all()]\n</code></pre>\n\n<p>or you could use <code>join</code> and say</p>\n\n<pre><code>join(menuitem.image_set.all() for menuitem in list_of_menuitems)\n</code></pre>\n\n<p>In either case, the gotcha was the nesting of the <code>for</code> loops.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From my experience, the most efficient way to flatten a list of lists is:</p>\n\n<pre><code>flat_list = []\nmap(flat_list.extend, list_of_list)\n</code></pre>\n\n<p>Some timeit comparisons with the other proposed methods:</p>\n\n<pre><code>list_of_list = [range(10)]*1000\n%timeit flat_list=[]; map(flat_list.extend, list_of_list)\n#10000 loops, best of 3: 119 \u00b5s per loop\n%timeit flat_list=list(itertools.chain.from_iterable(list_of_list))\n#1000 loops, best of 3: 210 \u00b5s per loop\n%timeit flat_list=[i for sublist in list_of_list for i in sublist]\n#1000 loops, best of 3: 525 \u00b5s per loop\n%timeit flat_list=reduce(list.__add__,list_of_list)\n#100 loops, best of 3: 18.1 ms per loop\n</code></pre>\n\n<p>Now, the efficiency gain appears better when processing longer sublists:</p>\n\n<pre><code>list_of_list = [range(1000)]*10\n%timeit flat_list=[]; map(flat_list.extend, list_of_list)\n#10000 loops, best of 3: 60.7 \u00b5s per loop\n%timeit flat_list=list(itertools.chain.from_iterable(list_of_list))\n#10000 loops, best of 3: 176 \u00b5s per loop\n</code></pre>\n\n<p>And this methods also works with any iterative object:</p>\n\n<pre><code>class SquaredRange(object):\n    def __init__(self, n): \n        self.range = range(n)\n    def __iter__(self):\n        for i in self.range: \n            yield i**2\n\nlist_of_list = [SquaredRange(5)]*3\nflat_list = []\nmap(flat_list.extend, list_of_list)\nprint flat_list\n#[0, 1, 4, 9, 16, 0, 1, 4, 9, 16, 0, 1, 4, 9, 16]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What about:</p>\n\n<pre><code>from operator import add\nreduce(add, map(lambda x: list(x.image_set.all()), [mi for mi in list_of_menuitems]))\n</code></pre>\n\n<p>But, Guido is recommending against performing too much in a single line of code since it reduces readability. There is minimal, if any, performance gain by performing what you want in a single line vs. multiple lines.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>have you tried flatten?\nFrom <a href=\"http://matplotlib.org/api/cbook_api.html\" rel=\"nofollow\">matplotlib.cbook.flatten(seq, scalarp=)</a> ?</p>\n\n<pre><code>l=[[1,2,3],[4,5,6], [7], [8,9]]*33\n\nrun(\"list(flatten(l))\")\n         3732 function calls (3303 primitive calls) in 0.007 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.007    0.007 &lt;string&gt;:1(&lt;module&gt;)\n      429    0.001    0.000    0.001    0.000 cbook.py:475(iterable)\n      429    0.002    0.000    0.003    0.000 cbook.py:484(is_string_like)\n      429    0.002    0.000    0.006    0.000 cbook.py:565(is_scalar_or_string)\n  727/298    0.001    0.000    0.007    0.000 cbook.py:605(flatten)\n      429    0.000    0.000    0.001    0.000 core.py:5641(isMaskedArray)\n      858    0.001    0.000    0.001    0.000 {isinstance}\n      429    0.000    0.000    0.000    0.000 {iter}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*66\n\nrun(\"list(flatten(l))\")\n         7461 function calls (6603 primitive calls) in 0.007 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.007    0.007 &lt;string&gt;:1(&lt;module&gt;)\n      858    0.001    0.000    0.001    0.000 cbook.py:475(iterable)\n      858    0.002    0.000    0.003    0.000 cbook.py:484(is_string_like)\n      858    0.002    0.000    0.006    0.000 cbook.py:565(is_scalar_or_string)\n 1453/595    0.001    0.000    0.007    0.000 cbook.py:605(flatten)\n      858    0.000    0.000    0.001    0.000 core.py:5641(isMaskedArray)\n     1716    0.001    0.000    0.001    0.000 {isinstance}\n      858    0.000    0.000    0.000    0.000 {iter}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*99\n\nrun(\"list(flatten(l))\")\n         11190 function calls (9903 primitive calls) in 0.010 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.010    0.010 &lt;string&gt;:1(&lt;module&gt;)\n     1287    0.002    0.000    0.002    0.000 cbook.py:475(iterable)\n     1287    0.003    0.000    0.004    0.000 cbook.py:484(is_string_like)\n     1287    0.002    0.000    0.009    0.000 cbook.py:565(is_scalar_or_string)\n 2179/892    0.001    0.000    0.010    0.000 cbook.py:605(flatten)\n     1287    0.001    0.000    0.001    0.000 core.py:5641(isMaskedArray)\n     2574    0.001    0.000    0.001    0.000 {isinstance}\n     1287    0.000    0.000    0.000    0.000 {iter}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*132\n\nrun(\"list(flatten(l))\")\n         14919 function calls (13203 primitive calls) in 0.013 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.013    0.013 &lt;string&gt;:1(&lt;module&gt;)\n     1716    0.002    0.000    0.002    0.000 cbook.py:475(iterable)\n     1716    0.004    0.000    0.006    0.000 cbook.py:484(is_string_like)\n     1716    0.003    0.000    0.011    0.000 cbook.py:565(is_scalar_or_string)\n2905/1189    0.002    0.000    0.013    0.000 cbook.py:605(flatten)\n     1716    0.001    0.000    0.001    0.000 core.py:5641(isMaskedArray)\n     3432    0.001    0.000    0.001    0.000 {isinstance}\n     1716    0.001    0.000    0.001    0.000 {iter}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler'\n</code></pre>\n\n<p><strong>UPDATE</strong>\nWhich gave me another idea:</p>\n\n<pre><code>l=[[1,2,3],[4,5,6], [7], [8,9]]*33\n\nrun(\"flattenlist(l)\")\n         564 function calls (432 primitive calls) in 0.000 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    133/1    0.000    0.000    0.000    0.000 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)\n      429    0.000    0.000    0.000    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*66\n\nrun(\"flattenlist(l)\")\n         1125 function calls (861 primitive calls) in 0.001 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    265/1    0.001    0.000    0.001    0.001 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)\n      858    0.000    0.000    0.000    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*99\n\nrun(\"flattenlist(l)\")\n         1686 function calls (1290 primitive calls) in 0.001 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    397/1    0.001    0.000    0.001    0.001 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)\n     1287    0.000    0.000    0.000    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*132\n\nrun(\"flattenlist(l)\")\n         2247 function calls (1719 primitive calls) in 0.002 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    529/1    0.001    0.000    0.002    0.002 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.000    0.000    0.002    0.002 &lt;string&gt;:1(&lt;module&gt;)\n     1716    0.001    0.000    0.001    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nl=[[1,2,3],[4,5,6], [7], [8,9]]*1320\n\nrun(\"flattenlist(l)\")\n         22443 function calls (17163 primitive calls) in 0.016 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n   5281/1    0.011    0.000    0.016    0.016 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.000    0.000    0.016    0.016 &lt;string&gt;:1(&lt;module&gt;)\n    17160    0.005    0.000    0.005    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n</code></pre>\n\n<p>So to test how effective it is when recursive gets deeper: How much deeper?</p>\n\n<pre><code>l=[[1,2,3],[4,5,6], [7], [8,9]]*1320\n\nnew=[l]*33\n\nrun(\"flattenlist(new)\")\n         740589 function calls (566316 primitive calls) in 0.418 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 174274/1    0.281    0.000    0.417    0.417 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.001    0.001    0.418    0.418 &lt;string&gt;:1(&lt;module&gt;)\n   566313    0.136    0.000    0.136    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nnew=[l]*66\n\nrun(\"flattenlist(new)\")\n         1481175 function calls (1132629 primitive calls) in 0.809 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 348547/1    0.542    0.000    0.807    0.807 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.002    0.002    0.809    0.809 &lt;string&gt;:1(&lt;module&gt;)\n  1132626    0.266    0.000    0.266    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nnew=[l]*99\n\nrun(\"flattenlist(new)\")\n         2221761 function calls (1698942 primitive calls) in 1.211 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 522820/1    0.815    0.000    1.208    1.208 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.002    0.002    1.211    1.211 &lt;string&gt;:1(&lt;module&gt;)\n  1698939    0.393    0.000    0.393    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nnew=[l]*132\n\nrun(\"flattenlist(new)\")\n         2962347 function calls (2265255 primitive calls) in 1.630 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 697093/1    1.091    0.000    1.627    1.627 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.003    0.003    1.630    1.630 &lt;string&gt;:1(&lt;module&gt;)\n  2265252    0.536    0.000    0.536    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n\nnew=[l]*1320\n\nrun(\"flattenlist(new)\")\n         29623443 function calls (22652523 primitive calls) in 16.103 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n6970921/1   10.842    0.000   16.069   16.069 &lt;ipython-input-55-39b139bad497&gt;:4(flattenlist)\n        1    0.034    0.034   16.103   16.103 &lt;string&gt;:1(&lt;module&gt;)\n 22652520    5.227    0.000    5.227    0.000 {isinstance}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n</code></pre>\n\n<p>I will bet \"flattenlist\" I am going to use this rather than matploblib for a long long time unless I want a yield generator and fast result as \"flatten\" uses in matploblib.cbook</p>\n\n<p>This, is fast. </p>\n\n<ul>\n<li><strong>And here is the code</strong></li>\n</ul>\n\n<p>:</p>\n\n<pre><code>typ=(list,tuple)\n\n\ndef flattenlist(d):\n    thelist = []\n    for x in d:\n        if not isinstance(x,typ):\n            thelist += [x]\n        else:\n            thelist += flattenlist(x)\n    return thelist\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This version is a generator.Tweak it if you want a list.</p>\n\n<pre><code>def list_or_tuple(l):\n    return isinstance(l,(list,tuple))\n## predicate will select the container  to be flattened\n## write your own as required\n## this one flattens every list/tuple\n\n\ndef flatten(seq,predicate=list_or_tuple):        \n    ## recursive generator \n    for i in seq:\n        if predicate(seq):\n            for j in flatten(i):\n                yield j\n        else:\n            yield i\n</code></pre>\n\n<p>You can add a predicate ,if want to flatten those which satisfy a condition</p>\n\n<p>Taken from python cookbook</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>pylab provides a flatten:\n <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flatten.html\" rel=\"nofollow\">link to numpy flatten</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a version working for multiple levels of list using <code>collectons.Iterable</code>:</p>\n\n<pre><code>import collections\n\ndef flatten(o):\n    result = []\n    for i in o:\n        if isinstance(i, collections.Iterable):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you have to flat more complicated list with not iterable elements or with depth more than 2 you can use following function:</p>\n\n<pre><code>def flat_list(list_to_flat):\n    if not isinstance(list_to_flat, list):\n        yield list_to_flat\n    else:\n        for item in list_to_flat:\n            yield from flat_list(item)\n</code></pre>\n\n<p>It will return generator object which you can convert to list with <code>list()</code> function. Notice that <code>yield from</code> syntax available from python3.3 but you can use explicit iteration instead.<br>\nExample:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, [2, 3], [1, [2, 3, [1, [2, 3]]]]]\n&gt;&gt;&gt; print(list(flat_list(a)))\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In <a href=\"http://www.python.org/dev/peps/pep-0448/\" rel=\"nofollow\">Python 3.4</a> you will be able to do:</p>\n\n<pre><code>[*innerlist for innerlist in outer_list]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If each item in the list is a string (and any strings inside those strings use \" \" rather than ' '), you can use regular expressions (<code>re</code> module)</p>\n\n<pre><code>&gt;&gt;&gt; flattener = re.compile(\"\\'.*?\\'\")\n&gt;&gt;&gt; flattener\n&lt;_sre.SRE_Pattern object at 0x10d439ca8&gt;\n&gt;&gt;&gt; stred = str(in_list)\n&gt;&gt;&gt; outed = flattener.findall(stred)\n</code></pre>\n\n<p>The above code converts in_list into a string, uses the regex to find all the substrings within quotes (i.e. each item of the list) and spits them out as a list.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're looking for a built-in, simple, one-liner you can use:</p>\n\n<pre><code>a = [[1, 2, 3], [4, 5, 6]\nb = [i[x] for i in a for x in range(len(i))]\nprint b\n</code></pre>\n\n<p>returns</p>\n\n<pre><code>[1, 2, 3, 4, 5, 6]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A simple alternative is to use <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html\" rel=\"nofollow\">numpy's concatenate</a> but it converts the contents to float:</p>\n\n<pre><code>import numpy as np\nprint np.concatenate([[1,2],[3],[5,89],[],[6]])\n# array([  1.,   2.,   3.,   5.,  89.,   6.])\nprint list(np.concatenate([[1,2],[3],[5,89],[],[6]]))\n# [  1.,   2.,   3.,   5.,  89.,   6.]\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use dictionaries to accomplish this. Dictionaries are stores of keys and values. </p>\n\n<pre><code>&gt;&gt;&gt; dct = {'x': 1, 'y': 2, 'z': 3}\n&gt;&gt;&gt; dct\n{'y': 2, 'x': 1, 'z': 3}\n&gt;&gt;&gt; dct[\"y\"]\n2\n</code></pre>\n\n<p>You can use variable key names to achieve the effect of variable variables without the security risk.</p>\n\n<pre><code>&gt;&gt;&gt; x = \"spam\"\n&gt;&gt;&gt; z = {x: \"eggs\"}\n&gt;&gt;&gt; z[\"spam\"]\n'eggs'\n</code></pre>\n\n<p>Make sense?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It can be easily accomplished with the built-in <a href=\"http://docs.python.org/library/functions.html#getattr\"><code>getattr</code></a>:</p>\n\n<pre><code>getattr(obj, 'foobar')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's not a good idea. If you are accessing a global variable you can use <a href=\"http://docs.python.org/library/functions.html#globals\">globals()</a></p>\n\n<pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; globals()['a']\n10\n</code></pre>\n\n<p>If you want to access a variable in the local scope you can use <a href=\"http://docs.python.org/library/functions.html#locals\">locals()</a></p>\n\n<p>A better solution is to use getattr or store your variables in a dictionary and then access them by name.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Whenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing</p>\n\n<pre><code>$foo = \"bar\"\n$$foo = \"baz\"\n</code></pre>\n\n<p>you write </p>\n\n<pre><code>mydict = {}\nfoo = \"bar\"\nmydict[foo] = \"baz\"\n</code></pre>\n\n<p>This way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different \"namespaces\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could also use exec and eval:</p>\n\n<pre><code>newvar = 'x'\nnewvalue = 12\nexec('%s=%d') % (newvar, newvalue)\n#this will print 12\nprint x\n#this will print 12 as well\nprint eval(newvar)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had the same issue.   Here's how I did it:</p>\n\n<pre><code>var = 'myvar'\nlocals().get(var)\n</code></pre>\n\n<p>locals() returns the variables defined locally in your function.  This is great for testing if a value is passed to a function without having to check each one individually:</p>\n\n<pre><code>def myFunc(test1, test2, test3):\n    for field in ['test1', 'test2', 'test3']:\n        if not locals().get(field):\n            print 'oh no!  You forgot to give a value for ' + field\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is more proof of concept than usable and/or good practice (don't use list comprehensions for this), but works:</p>\n\n<pre><code>values = {\n    'a': 1,\n    'b': 2,\n    'c': 3,\n    'd': 4\n}\n\nwhitelist = ['a', 'd']\n\n[locals().update({k: v}) for k, v in (values).items() if k in whitelist]\n\nprint a # 1\nprint b # undefined\nprint c # undefined\nprint d # 4\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>ignoring the haters for a moment - I needed to do a variable object name, because I needed to wrap ___import____ to import a list of modules.   </p>\n\n<p>found the answer buried in <a href=\"http://stackoverflow.com/a/68628/3692967\">http://stackoverflow.com/a/68628/3692967</a></p>\n\n<p>and it works out to:</p>\n\n<pre><code>    module = 'pycurl'\n    module_obj = __import__(module)\n    globals()[module] = module_obj\n    # and now this works\n    curl = pycurl.Curl()\n</code></pre>\n\n<p>works with 2.6 anyway.</p>\n\n<p>so the trick is to abuse globals(). :)</p>\n\n<p>ymmv</p>\n\n<p>while reviewing this before posting it I realized Nadia provided the answer, but the example was - for me - entirely unclear. <a href=\"http://stackoverflow.com/a/1373201/3692967\">http://stackoverflow.com/a/1373201/3692967</a></p>\n\n<p>to extend that example:</p>\n\n<pre><code> a = 'b'\n c = 'd'\n #now define a global named 'b' containing 'd'\n globals()[a] = c\n print b\n\n\n &gt;&gt;&gt; a = 'b'\n &gt;&gt;&gt; c = 'd'\n &gt;&gt;&gt; #now define a global named 'b' containing 'd'\n ... globals()[a] = c\n &gt;&gt;&gt; print b\n d\n</code></pre>\n\n<p>obviously this should work the same with locals()</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, a concise rule for Python Scope resolution, from <a href=\"http://rads.stackoverflow.com/amzn/click/0596513984\">Learning Python, 3rd. Ed.</a>. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply)</p>\n\n<p>LEGB Rule.</p>\n\n<p><strong>L</strong>, Local \u2014 Names assigned in any way within a function (<code>def</code> or <code>lambda</code>)), and not declared global in that function.</p>\n\n<p><strong>E</strong>, Enclosing function locals \u2014 Name in the local scope of any and all enclosing functions (<code>def</code> or <code>lambda</code>), from inner to outer.</p>\n\n<p><strong>G</strong>, Global (module) \u2014 Names assigned at the top-level of a module file, or declared global in a <code>def</code> within the file.</p>\n\n<p><strong>B</strong>, Built-in (Python) \u2014 Names preassigned in the built-in names module : <code>open</code>,<code>range</code>,<code>SyntaxError</code>,...</p>\n\n<p>So, in the case of</p>\n\n<pre><code>code1\nclass Foo:\n   code2\n   def spam.....\n      code3\n      for code4..:\n       code5\n       x()\n</code></pre>\n\n<p>The for loop does not have its own namespace. In LEGB order, the scopes would be </p>\n\n<p>L : local, in the current def.</p>\n\n<p>E : Enclosed function, any enclosing functions (if def spam was in another def)</p>\n\n<p>G : Global. Were there any declared globally in the module?</p>\n\n<p>B : Any builtin x() in Python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Essentially, the only thing in Python that introduces a new scope is a function definition.  Classes are a bit of a special case in that anything defined directly in the body is placed in the class's namespace, but they are not directly accessible from within the methods (or nested classes) they contain.</p>\n\n<p>In your example there are only 3 scopes where x will be searched in:</p>\n\n<ul>\n<li><p>spam's scope - containing everything defined in code3 and code5 (as well as code4, your loop variable)</p></li>\n<li><p>The global scope - containing everything defined in code1, as well as Foo (and whatever changes after it)</p></li>\n<li><p>The builtins namespace.  A bit of a special case - this contains the various Python builtin functions and types such as len() and str(). Generally this shouldn't be modified by any user code, so expect it to contain the standard functions and nothing else.</p></li>\n</ul>\n\n<p>More scopes only appear when you introduce a nested function (or lambda) into the picture.\nThese will behave pretty much as you'd expect however.  The nested function can access everything in the local scope, as well as anything in the enclosing function's scope. eg.</p>\n\n<pre><code>def foo():\n    x=4\n    def bar():\n        print x  # Accesses x from foo's scope\n    bar()  # Prints 4\n    x=5\n    bar()  # Prints 5\n</code></pre>\n\n<p><strong>Restrictions:</strong></p>\n\n<p>Variables in scopes other than the local function's variables can be accessed, but can't be rebound to new parameters without further syntax.  Instead, assignment will create a new <strong>local</strong> variable instead of affecting the variable in the parent scope.  For example:</p>\n\n<pre><code>global_var1 = []\nglobal_var2 = 1\n\ndef func():\n    # This is OK: It's just accessing, not rebinding\n    global_var1.append(4) \n\n    # This won't affect global_var2. Instead it creates a new variable\n    global_var2 = 2 \n\n    local1 = 4\n    def embedded_func():\n        # Again, this doen't affect func's local1 variable.  It creates a \n        # new local variable also called local1 instead.\n        local1 = 5\n        print local1\n\n    embedded_func() # Prints 5\n    print local1    # Prints 4\n</code></pre>\n\n<p>In order to actually modify the bindings of global variables from within a function scope, you need to specify that the variable is global with the global keyword.  Eg:</p>\n\n<pre><code>global_var = 4\ndef change_global():\n    global global_var\n    global_var = global_var + 1\n</code></pre>\n\n<p>Currently there is no way to do the same for variables in enclosing <em>function</em> scopes, but Python 3 introduces a new keyword, \"<code>nonlocal</code>\" which will act in a similar way to global, but for nested function scopes.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There was no thorough answer concerning Python3 time, so I made an answer here.</p>\n\n<p>As provided in other answers, there are 4 basic scopes, the LEGB, for Local, Enclosing, Global and Builtin. In addition to those, there is a special scope, the <strong>class body</strong>, which does not comprise an enclosing scope for methods defined within the class; any assignments within the class body make the variable from there on be bound in the class body.</p>\n\n<p>Especially, <strong>no</strong> block statement, besides <code>def</code> and <code>class</code>, create a variable scope. In Python 2 the list comprehension does not create a variable scope, however in Python 3 the loop variable is created in a new scope.</p>\n\n<p>To demonstrate the peculiarities of the class body</p>\n\n<pre><code>x = 0\nclass X(object):\n    y = x\n    x = x + 1 # x is now a variable \n    z = x\n\n    def method(self):\n        print(self.x) # -&gt; 1\n        print(x)      # -&gt; 0, the global x\n        print(y)      # -&gt; NameError: global name 'y' is not defined\n\ninst = X()\nprint(inst.x, inst.y, inst.z, x) # -&gt; (1, 0, 1, 0)\n</code></pre>\n\n<p>Thus unlike in function body, you can reassign the variable to the same name in class body, to get a class variable with the same name; further lookups on this name resolve \nto the class variable instead.</p>\n\n<hr>\n\n<p>One of the greater surprises to many newcomers to Python is that a <code>for</code> loop does not create a variable scope. In Python 2 the list comprehensions do not create a scope either (while generators and dict comprehensions do!) Instead they leak the value in the function or the global scope:</p>\n\n<pre><code>&gt;&gt;&gt; [ i for i in range(5) ]\n&gt;&gt;&gt; i\n4\n</code></pre>\n\n<p>The comprehensions can be used as a cunning (or awful if you will) way to make modifiable variables within lambda expressions in Python 2 - a lambda expression does create a variable scope, like the <code>def</code> statement would, but within lambda no statements are allowed. Assignment being a statement in Python means that no variable assignments in lambda are allowed, but a list comprehension is an expression...</p>\n\n<p>This behaviour has been fixed in Python 3 - no comprehension expressions or generators leak variables.</p>\n\n<hr>\n\n<p>The global really means the module scope; the main python module is the <code>__main__</code>; all imported modules are accessible through the <code>sys.modules</code> variable; to get access to <code>__main__</code> one can use <code>sys.modules['__main__']</code>, or <code>import __main__</code>; it is perfectly acceptable to access and assign attributes there; they will show up as variables in the global scope of the main module.</p>\n\n<hr>\n\n<p>If a name is ever assigned to in the current scope (except in the class scope), it will be considered belonging to that scope, otherwise it will be considered to belonging to any enclosing scope that assigns to the variable (it might not be assigned yet, or not at all), or finally the global scope. If the variable is considered local, but it is not set yet, or has been deleted, reading the variable value will result in <code>UnboundLocalError</code>, which is a subclass of <code>NameError</code>.</p>\n\n<pre><code>x = 5\ndef foobar()\n    print(x)  # UnboundLocalError!\n    x += 1    # assignment here makes x a local variable!\n</code></pre>\n\n<p>The scope can declare that it explicitly wants to modify the global (module scope) variable, with the global keyword:</p>\n\n<pre><code>x = 5\ndef foobar():\n    global x\n    print(x) # -&gt; 5\n    x += 1\n\nfoobar()\nprint(x) # -&gt; 6\n</code></pre>\n\n<p>This also is possible even if it was shadowed in enclosing scope:</p>\n\n<pre><code>x = 5\ny = 13\ndef make_closure():\n    x = 42\n    y = 911\n    def func():\n        global x # sees the global value\n        print(x, y)\n        x += 1\n\n    return func\n\nfunc = make_closure()\nfunc()      # -&gt; print 5 911\nprint(x, y) # -&gt; 6 13\n</code></pre>\n\n<p>In python 2 there is no easy way to modify the value in the enclosing scope; usually this is simulated by having a mutable value, such as a list with length of 1:</p>\n\n<pre><code>def make_closure():\n    value = [0]\n    def get_next_value():\n        value[0] += 1\n        return value[0]\n\n    return get_next_value\n\nget_next = make_closure()\nprint(get_next()) # -&gt; 1\nprint(get_next()) # -&gt; 2\n</code></pre>\n\n<p>However in python 3, the <code>nonlocal</code> comes to rescue:</p>\n\n<pre><code>def make_closure():\n    value = 0\n    def get_next_value():\n        nonlocal value\n        value += 1\n        return value\n    return get_next_value\n\nget_next = make_closure() # identical behavior to the previous example.\n</code></pre>\n\n<hr>\n\n<p>Any variable that is not deemed to be local to the current scope, or any enclosing scope, is a global variable. A global name is looked up in the module global dictionary; if not found, the global is then looked up from the builtins module; the name of the module was changed from python 2 to python 3; in python 2 it was <code>__builtin__</code> and in python 3 it is now called <code>builtins</code>. If you assign to an attribute of builtins module, it will be visible thereafter to any module as a readable global variable, unless that module shadows them with its own global variable with the same name.</p>\n\n<hr>\n\n<p>Reading the builtin module can also be useful; suppose that you want the python 3 style print function in some parts of file, but other parts of file still use the <code>print</code> statement, if your python version is &gt;= 2.6, you can get the new style function as:</p>\n\n<pre><code>import __builtin__\n\nprint3 = __builtin__.__dict__['print']\n</code></pre>\n\n<p>The <code>from __future__ import print_function</code> actually does not import the <code>print</code> function anywhere in Python 2 - instead it just disables the parsing rules for <code>print</code> statement in the current module, handling <code>print</code> like any other variable identifier, and thus allowing the <code>print</code> the function be looked up in the builtins.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The scoping rules for Python 2.x have been outlined already in other answers. The only thing I would add is that in Python 3.0, there is also the concept of a non-local scope (indicated by the 'nonlocal' keyword). This allows you to access outer scopes directly, and opens up the ability to do some neat tricks, including lexical closures (without ugly hacks involving mutable objects).</p>\n\n<p>EDIT: Here's the <a href=\"http://www.python.org/dev/peps/pep-3104/\">PEP</a> with more information on this.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>Where is x found?</p>\n</blockquote>\n\n<p>x is not found as you haven't defined it. :-) It could be found in code1 (global) or code3 (local) if you put it there.</p>\n\n<p>code2 (class members) aren't visible to code inside methods of the same class\u2009\u2014\u2009you would usually access them using self. code4/code5 (loops) live in the same scope as code3, so if you wrote to x in there you would be changing the x instance defined in code3, not making a new x.</p>\n\n<p>Python is statically scoped, so if you pass \u2018spam\u2019 to another function spam will still have access to globals in the module it came from (defined in code1), and any other containing scopes (see below). code2 members would again be accessed through self.</p>\n\n<p>lambda is no different to def. If you have a lambda used inside a function, it's the same as defining a nested function. In Python 2.2 onwards, nested scopes are available. In this case you can bind x at any level of function nesting and Python will pick up the innermost instance:</p>\n\n<pre><code>x= 0\ndef fun1():\n    x= 1\n    def fun2():\n        x= 2\n        def fun3():\n            return x\n        return fun3()\n    return fun2()\nprint fun1(), x\n\n2 0\n</code></pre>\n\n<p>fun3 sees the instance x from the nearest containing scope, which is the function scope associated with fun2. But the other x instances, defined in fun1 and globally, are not affected.</p>\n\n<p>Before nested_scopes\u2009\u2014\u2009in Python pre-2.1, and in 2.1 unless you specifically ask for the feature using a from-future-import\u2009\u2014\u2009fun1 and fun2's scopes are not visible to fun3, so S.Lott's answer holds and you would get the global x:</p>\n\n<pre><code>0 0\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python resolves your variables with -- generally -- three namespaces available.  </p>\n\n<blockquote>\n  <p>At any time during execution, there\n  are at least three nested scopes whose\n  namespaces are directly accessible:\n  the innermost scope, which is searched\n  first, contains the local names; the\n  namespaces of any enclosing functions,\n  which are searched starting with the\n  nearest enclosing scope; the middle\n  scope, searched next, contains the\n  current module's global names; and the\n  outermost scope (searched last) is the\n  namespace containing built-in names.</p>\n</blockquote>\n\n<p>There are two functions: <code>globals</code> and <code>locals</code> which show you the contents two of these namespaces.</p>\n\n<p>Namespaces are created by packages, modules, classes, object construction and functions.  There aren't any other flavors of namespaces.  </p>\n\n<p>In this case, the call to a function named <code>x</code> has to be resolved in the local name space or the global namespace.</p>\n\n<p>Local in this case, is the body of the method function <code>Foo.spam</code>.</p>\n\n<p>Global is -- well -- global. </p>\n\n<p>The rule is to search the nested local spaces created by method functions (and nested function definitions), then search global.  That's it.</p>\n\n<p>There are no other scopes.  The <code>for</code> statement (and other compound statements like <code>if</code> and <code>try</code>) don't create new nested scopes.  Only definitions (packages, modules, functions, classes and object instances.)</p>\n\n<p>Inside a class definition, the names are part of the class namespace.  <code>code2</code>, for instance, must be qualified by the class name.  Generally <code>Foo.code2</code>.  However, <code>self.code2</code> will also work because Python objects look at the containing class as a fall-back.</p>\n\n<p>An object (an instance of a class) has instance variables.  These names are in the object's namespace.  They must be qualified by the object.  (<code>variable.instance</code>.)  </p>\n\n<p>From within a class method, you have locals and globals.  You say <code>self.variable</code> to pick the instance as the namespace.  You'll note that <code>self</code> is an argument to every class member function, making it part of the local namespace.</p>\n\n<p>See <a href=\"http://www.network-theory.co.uk/docs/pytut/PythonScopesandNameSpaces.html\" rel=\"nofollow\">Python Scope Rules</a>, <a href=\"http://stackoverflow.com/questions/146359/python-scope\">Python Scope</a>, <a href=\"http://showmedo.com/videos/video?name=2800020&amp;fromSeriesID=280\" rel=\"nofollow\">Variable Scope</a>.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>When the Python interpreter reads a source file, it executes all of the code found in it.  Before executing the code, it will define a few special variables.  For example, if the python interpreter is running that module (the source file) as the main program, it sets the special <code>__name__</code> variable to have a value <code>\"__main__\"</code>.  If this file is being imported from another module, <code>__name__</code> will be set to the module's name.</p>\n\n<p>In the case of your script, let's assume that it's executing as the main function, e.g. you said something like</p>\n\n<pre><code>python threading_example.py\n</code></pre>\n\n<p>on the command line.  After setting up the special variables, it will execute the <code>import</code> statement and load those modules.  It will then evaluate the <code>def</code> block, creating a function object and creating a variable called <code>myfunction</code> that points to the function object.  It will then read the <code>if</code> statement and see that <code>__name__</code> does equal <code>\"__main__\"</code>, so it will execute the block shown there.</p>\n\n<p>One of the reasons for doing this is that sometimes you write a module (a <code>.py</code> file) where it can be executed directly.  Alternatively, it can also be imported and used in another module.  By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.</p>\n\n<p>See <a href=\"http://ibiblio.org/g2swap/byteofpython/read/module-name.html\">this page</a> for some extra details.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When your script is run by passing it as a command to the Python interpreter,</p>\n\n<pre><code>python myscript.py\n</code></pre>\n\n<p>all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets ran.  Unlike other languages, there's no <code>main()</code> function that gets run automatically - the <code>main()</code> function is implicitly all the code at the top level.</p>\n\n<p>In this case, the top-level code is an <code>if</code> block.  <code>__name__</code> is a built-in variable which evaluate to the name of the current module.  However, if a module is being run directly (as in <code>myscript.py</code> above), then <code>__name__</code> instead is set to the string <code>\"__main__\"</code>.  Thus, you can test whether your script is being run directly or being imported by something else by testing</p>\n\n<pre><code>if __name__ == \"__main__\":\n    ...\n</code></pre>\n\n<p>If that code is being imported into another module, the various function and class definitions will be imported, but the <code>main()</code> code won't get run.  As a basic example, consider the following two scripts:</p>\n\n<pre><code># file one.py\ndef func():\n    print(\"func() in one.py\")\n\nprint(\"top-level in one.py\")\n\nif __name__ == \"__main__\":\n    print(\"one.py is being run directly\")\nelse:\n    print(\"one.py is being imported into another module\")\n\n# file two.py\nimport one\n\nprint(\"top-level in two.py\")\none.func()\n\nif __name__ == \"__main__\":\n    print(\"two.py is being run directly\")\nelse:\n    print(\"two.py is being imported into another module\")\n</code></pre>\n\n<p>Now, if you invoke the interpreter as</p>\n\n<pre><code>python one.py\n</code></pre>\n\n<p>The output will be</p>\n\n<pre><code>top-level in one.py\none.py is being run directly\n</code></pre>\n\n<p>If you run <code>two.py</code> instead:</p>\n\n<pre><code>python two.py\n</code></pre>\n\n<p>You get</p>\n\n<pre><code>top-level in one.py\none.py is being imported into another module\ntop-level in two.py\nfunc() in one.py\ntwo.py is being run directly\n</code></pre>\n\n<p>Thus, when module <code>one</code> gets loaded, its <code>__name__</code> equals <code>\"one\"</code> instead of <code>__main__</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The simplest explanation for the <code>__name__</code> variable (imho) is the following:</p>\n\n<p>Create the following files.</p>\n\n<pre><code># a.py\nimport b\n</code></pre>\n\n<p>and</p>\n\n<pre><code># b.py\nprint \"Hello World from %s!\" % __name__\n\nif __name__ == '__main__':\n    print \"Hello World again from %s!\" % __name__\n</code></pre>\n\n<p>Running them will get you this output:</p>\n\n<pre><code>$ python a.py\nHello World from b!\n</code></pre>\n\n<p>As you can see, when a module is imported, Python sets <code>globals()['__name__']</code> in this module to the module's name.</p>\n\n<pre><code>$ python b.py\nHello World from __main__!\nHello World again from __main__!\n</code></pre>\n\n<p>As you can see, when a file is executed, Python sets <code>globals()['__name__']</code> in this file to <code>\"__main__\"</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>I'm attempting to answer the primary question here with as thorough an explanation as I can.</strong></p>\n\n<h2>Developing and Testing Your Code</h2>\n\n<p>Say you're writing a Python script designed to be used as a module:</p>\n\n<pre><code>def do_important():\n    '''This function does something very important'''\n</code></pre>\n\n<p>You <em>could</em> test the module by adding this call of the function to the bottom:</p>\n\n<pre><code>do_important()\n</code></pre>\n\n<p>and running it (on a command prompt) with something like:</p>\n\n<pre><code>~$ python important.py\n</code></pre>\n\n<h2>The Problem</h2>\n\n<p>However, if you want to import the module to another script:</p>\n\n<pre><code>import important\n</code></pre>\n\n<p>On import, the <code>do_important</code> function would be called, so you'd probably comment out your call of the function at the bottom. And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.</p>\n\n<h2>A Better Way</h2>\n\n<p>The <code>__name__</code> variable points to the namespace wherever the Python interpreter happens to be at the moment. Inside an imported module, it's the name of that module. But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its <code>\"__main__\"</code>.</p>\n\n<p>So if you check before executing:</p>\n\n<pre><code>if __name__ == \"__main__\":\n    do_important()\n</code></pre>\n\n<p>With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script). </p>\n\n<h2>An Even Better Way</h2>\n\n<p>There's a Pythonic way to improve on this, though. </p>\n\n<p>What if we want to run this business process from outside the module? Also, <a href=\"http://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function\">Python code can run faster in a function</a> (see the link for how and why); so if we put the code we want to exercise as we develop and test in a function like this and then do our check for <code>'__main__'</code> immediately after:</p>\n\n<pre><code>def main():\n    '''business logic for when running this module as the primary one!'''\n    setup()\n    foo = do_important()\n    bar = do_even_more_important(foo)\n    for baz in bar:\n        do_super_important(baz)\n    teardown()\n\n# Here's our payoff idiom!\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>We now have a final function for the end of our module that will run if we run the module as the primary module. It will allow the module and its functions and classes to be imported into other scripts (in the most efficient way, if efficiency matters) without running the <code>main</code> function, and will also allow the module (and its functions and classes) to be called when running from a different <code>'__main__'</code> module, i.e.</p>\n\n<pre><code>import important\nimportant.main()\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/__main__.html\">This idiom can also be found (deep) in the Python documentation in an explanation of the <code>__main__</code> module.</a> That text states:</p>\n\n<blockquote>\n  <p>This module represents the (otherwise anonymous) scope in which the\n  interpreter\u2019s main program executes \u2014 commands read either from\n  standard input, from a script file, or from an interactive prompt. It\n  is this environment in which the idiomatic \u201cconditional script\u201d stanza\n  causes a script to run:</p>\n</blockquote>\n\n<pre><code>if __name__ == '__main__':\n    main()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>if __name__ == \"__main__\"</code> is the part that runs when the script is run from (say) the command line using a command like <code>python myscript.py</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When there are certain statements in our module (<code>M.py</code>), we want to be executed when it 'll be running as main (not imported), in that case we can place those statements (test-cases, print statements) under this if block. As by default (when module running as main, not imported) the <code>__name__</code> variable is set to <code>\"__main__\"</code>, and when it'll be imported the <code>__name__</code> variable 'll get a different value, most probably the name of the module (<code>'M'</code>).\nThis is helpful in running different variants of a modules together, and seperating their specific input &amp; output statements and also if any test-cases.</p>\n\n<p><strong>In short</strong> , use this '<code>if __name__ == \"main\"</code> ' block to prevent (certain) code from being run when  the module is imported.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>A Terse Academic Canonical Answer:</strong></p>\n\n<p><code>__name__</code> is a global variable (in Python, global actually means on the <a href=\"https://docs.python.org/tutorial/modules.html#modules\">module level</a>) that exists in all namespaces. It is typically the module's name (as a <code>str</code> type).</p>\n\n<p>As the only special case, however, in whatever Python process you run, as in mycode.py:</p>\n\n<pre><code>python mycode.py\n</code></pre>\n\n<p>the otherwise anonymous global namespace is assigned the value of <code>'__main__'</code> to its <code>__name__</code>. </p>\n\n<p>Thus, including <a href=\"https://docs.python.org/library/__main__.html\">the final lines</a></p>\n\n<pre><code>if __name__ == '__main__':\n    main()\n</code></pre>\n\n<ul>\n<li>at the end of your mycode.py script,</li>\n<li>when it is the primary, entry-point module that is run by a Python process, </li>\n</ul>\n\n<p>will cause your script's uniquely defined <code>main</code> function to run. </p>\n\n<p>Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:</p>\n\n<pre><code>import mycode\n# ... any amount of other code\nmycode.main()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you run Python interactively the local <code>__name__</code> variable is assigned a value of <code>__main__</code>. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its <code>__name__</code> attribute is assigned a value of <code>__main__</code>, rather than the actual name of the module. In this way, modules can look at their own <code>__name__</code> value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:</p>\n\n<pre><code>if __name__ == '__main__':\n    # Do something appropriate here, like calling a\n    # main() function defined elsewhere in this module.\n    main()\nelse:\n    # Do nothing. This module has been imported by another\n    # module that wants to make use of the functions,\n    # classes and other useful bits it has defined.\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let's look at the answer in a more abstract way:</p>\n\n<p>Suppose we have this code in x.py:</p>\n\n<pre><code>...\n&lt;Block A&gt;\nif __name__ == '__main__':\n    &lt;Block B&gt;\n...\n</code></pre>\n\n<p>Blocks A and B are run when we are running \"x.py\".</p>\n\n<p>But just block A (and not B) is run when we are running another module, \"y.py\" for example, in which x.y is imported and the code is run from there (like when a function in \"x.py\" is called from y.py).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is a special for when a Python file is called from the command line. This is typically used to call a \"main()\" function or execute other appropriate startup code, like commandline arguments handling for instance.</p>\n\n<p>It could be written in several ways, another is:</p>\n\n<pre><code>def main():\n    dosomething()\n\n\n__name__ == '__main__' and main()\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=\"http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions\" rel=\"nofollow\">more on defining functions</a> in the Python documentation.</p>\n\n<p>The <code>*args</code> will give you all function parameters <a href=\"https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists\" rel=\"nofollow\">as a tuple</a>:</p>\n\n<pre><code>In [1]: def foo(*args):\n   ...:     for a in args:\n   ...:         print a\n   ...:         \n   ...:         \n\nIn [2]: foo(1)\n1\n\n\nIn [4]: foo(1,2,3)\n1\n2\n3\n</code></pre>\n\n<p>The <code>**kwargs</code> will give you all \n<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>\n\n<pre><code>In [5]: def bar(**kwargs):\n   ...:     for a in kwargs:\n   ...:         print a, kwargs[a]\n   ...:         \n   ...:         \n\nIn [6]: bar(name='one', age=27)\nage 27\nname one\n</code></pre>\n\n<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>\n\n<pre><code>def foo(kind, *args, **kwargs):\n   pass\n</code></pre>\n\n<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>\n\n<pre><code>In [9]: def foo(bar, lee):\n   ...:     print bar, lee\n   ...:     \n   ...:     \n\nIn [10]: l = [1,2]\n\nIn [11]: foo(*l)\n1 2\n</code></pre>\n\n<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=\"http://www.python.org/dev/peps/pep-3132/\" rel=\"nofollow\">Extended Iterable Unpacking</a>):</p>\n\n<pre><code>first, *rest = [1,2,3,4]\nfirst, *l, last = [1,2,3,4]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:</p>\n\n<pre><code>def foo(x,y,z):\n    print \"x=\" + str(x)\n    print \"y=\" + str(y)\n    print \"z=\" + str(z)\n</code></pre>\n\n<p>You can do things like:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1,2,3]\n&gt;&gt;&gt; foo(*mylist)\nx=1\ny=2\nz=3\n\n&gt;&gt;&gt; mydict = {'x':1,'y':2,'z':3}\n&gt;&gt;&gt; foo(**mydict)\nx=1\ny=2\nz=3\n\n&gt;&gt;&gt; mytuple = (1, 2, 3)\n&gt;&gt;&gt; foo(*mytuple)\nx=1\ny=2\nz=3\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The single * means that there can be any number of extra positional arguments. <code>foo()</code> can be invoked like <code>foo(1,2,3,4,5)</code>. In the body of foo() param2 is a sequence containing 2-5.</p>\n\n<p>The double ** means there can be any number of extra named parameters. <code>bar()</code> can be invoked like <code>bar(1, a=2, b=3)</code>. In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }</p>\n\n<p>With the following code:</p>\n\n<pre><code>def foo(param1, *param2):\n    print param1\n    print param2\n\ndef bar(param1, **param2):\n    print param1\n    print param2\n\nfoo(1,2,3,4,5)\nbar(1,a=2,b=3)\n</code></pre>\n\n<p>the output is</p>\n\n<pre><code>1\n(2, 3, 4, 5)\n1\n{'a': 2, 'b': 3}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><code>*args</code> and <code>**kwargs</code> notation</strong></p>\n\n<p><code>*args</code> (typically said \"star-args\") and <code>**kwargs</code> (stars can be implied by saying \"kwargs\", but be explicit with \"double-star kwargs\") are common idioms of Python for using the <code>*</code> and <code>**</code> notation. These specific variable names aren't required (e.g. you could use <code>*foos</code> and <code>**bars</code>), but a departure from convention is likely to enrage your fellow Python coders. </p>\n\n<p>We typically use these when we don't know what our function is going to receive or how many arguments we may be passing, and sometimes even when naming every variable separately would get very messy and redundant (but this is a case where usually explicit is better than implicit).</p>\n\n<p><strong>Example 1</strong></p>\n\n<p>The following function describes how they can be used, and demonstrates behavior. Note the named <code>b</code> argument will be consumed by the second positional argument before :</p>\n\n<pre><code>def foo(a, b=10, *args, **kwargs):\n    '''\n    this function takes required argument a, not required keyword argument b\n    and any number of unknown positional arguments and keyword arguments after\n    '''\n    print('a is a required argument, and its value is {0}'.format(a))\n    print('b not required, its default value is 10, actual value: {0}'.format(b))\n    # we can inspect the unknown arguments we were passed:\n    #  - args:\n    print('args is of type {0} and length {1}'.format(type(args), len(args)))\n    for arg in args:\n        print('unknown arg: {0}'.format(arg))\n    #  - kwargs:\n    print('kwargs is of type {0} and length {1}'.format(type(kwargs),\n                                                        len(kwargs)))\n    for kw, arg in kwargs.items():\n        print('unknown kwarg - kw: {0}, arg: {1}'.format(kw, arg))\n    # But we don't have to know anything about them \n    # to pass them to other functions.\n    print('Args or kwargs can be passed without knowing what they are.')\n    # max can take two or more positional args: max(a, b, c...)\n    print('e.g. max(a, b, *args) \\n{0}'.format(\n      max(a, b, *args))) \n    kweg = 'dict({0})'.format( # named args same as unknown kwargs\n      ', '.join('{k}={v}'.format(k=k, v=v) \n                             for k, v in sorted(kwargs.items())))\n    print('e.g. dict(**kwargs) (same as {kweg}) returns: \\n{0}'.format(\n      dict(**kwargs), kweg=kweg))\n</code></pre>\n\n<p>We can check the online help for the function's signature, with <code>help(foo)</code>, which tells us </p>\n\n<pre><code>foo(a, b=10, *args, **kwargs)\n</code></pre>\n\n<p>Let's call this function with <code>foo(1, 2, 3, 4, e=5, f=6, g=7)</code> </p>\n\n<p>which prints:</p>\n\n<pre><code>a is a required argument, and its value is 1\nb not required, its default value is 10, actual value: 2\nargs is of type &lt;type 'tuple'&gt; and length 2\nunknown arg: 3\nunknown arg: 4\nkwargs is of type &lt;type 'dict'&gt; and length 3\nunknown kwarg - kw: e, arg: 5\nunknown kwarg - kw: g, arg: 7\nunknown kwarg - kw: f, arg: 6\nArgs or kwargs can be passed without knowing what they are.\ne.g. max(a, b, *args) \n4\ne.g. dict(**kwargs) (same as dict(e=5, f=6, g=7)) returns: \n{'e': 5, 'g': 7, 'f': 6}\n</code></pre>\n\n<p><strong>Example 2</strong></p>\n\n<p>We can also call it using another function, into which we just provide <code>a</code>:</p>\n\n<pre><code>def bar(a):\n    b, c, d, e, f = 2, 3, 4, 5, 6\n    # dumping every local variable into foo as a keyword argument \n    # by expanding the locals dict:\n    foo(**locals()) \n</code></pre>\n\n<p><code>bar(100)</code> prints:</p>\n\n<pre><code>a is a required argument, and its value is 100\nb not required, its default value is 10, actual value: 2\nargs is of type &lt;type 'tuple'&gt; and length 0\nkwargs is of type &lt;type 'dict'&gt; and length 4\nunknown kwarg - kw: c, arg: 3\nunknown kwarg - kw: e, arg: 5\nunknown kwarg - kw: d, arg: 4\nunknown kwarg - kw: f, arg: 6\nArgs or kwargs can be passed without knowing what they are.\ne.g. max(a, b, *args) \n100\ne.g. dict(**kwargs) (same as dict(c=3, d=4, e=5, f=6)) returns: \n{'c': 3, 'e': 5, 'd': 4, 'f': 6}\n</code></pre>\n\n<p><strong>Example 3: practical usage in decorators</strong></p>\n\n<p>OK, so maybe we're not seeing the utility yet. So imagine you have several functions with redundant code before and/or after the differentiating code. The following named functions are just pseudo-code for illustrative purposes.</p>\n\n<pre><code>def foo(a, b, c, d=0, e=100):\n    # imagine this is much more code than a simple function call\n    preprocess() \n    differentiating_process_foo(a,b,c,d,e)\n    # imagine this is much more code than a simple function call\n    postprocess()\n\ndef bar(a, b, c=None, d=0, e=100, f=None):\n    preprocess()\n    differentiating_process_bar(a,b,c,d,e,f)\n    postprocess()\n\ndef baz(a, b, c, d, e, f):\n    ... and so on\n</code></pre>\n\n<p>We might be able to handle this differently, but we can certainly extract the redundancy with a decorator, and so our below example demonstrates how <code>*args</code> and <code>**kwargs</code> can be very useful:</p>\n\n<pre><code>def decorator(function):\n    '''function to wrap other functions with a pre- and postprocess'''\n    @functools.wraps(function) # applies module, name, and docstring to wrapper\n    def wrapper(*args, **kwargs):\n        # again, imagine this is complicated, but we only write it once!\n        preprocess()\n        function(*args, **kwargs)\n        postprocess()\n    return wrapper\n</code></pre>\n\n<p>And now every wrapped function can be written much more succinctly, as we've factored out the redundancy:</p>\n\n<pre><code>@decorator\ndef foo(a, b, c, d=0, e=100):\n    differentiating_process_foo(a,b,c,d,e)\n\n@decorator\ndef bar(a, b, c=None, d=0, e=100, f=None):\n    differentiating_process_bar(a,b,c,d,e,f)\n\n@decorator\ndef baz(a, b, c=None, d=0, e=100, f=None, g=None):\n    differentiating_process_baz(a,b,c,d,e,f, g)\n\n@decorator\ndef quux(a, b, c=None, d=0, e=100, f=None, g=None, h=None):\n    differentiating_process_quux(a,b,c,d,e,f,g,h)\n</code></pre>\n\n<p>And by factoring out our code, which <code>*args</code> and <code>**kwargs</code> allows us to do, we reduce lines of code, improve readability and maintainability, and have sole canonical locations for the logic in our program. If we need to change any part of this structure, we have one place in which to make each change.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>*</code> and <code>**</code> have special usage in the function argument list. <code>*</code>\nimplies that the argument is a list and <code>**</code> implies that the argument\nis a dictionary. This allows functions to take arbitrary number of\narguments</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From the Python documentation:</p>\n\n<blockquote>\n  <p>If there are more positional arguments than there are formal parameter slots, a TypeError exception is raised, unless a formal parameter using the syntax \"*identifier\" is present; in this case, that formal parameter receives a tuple containing the excess positional arguments (or an empty tuple if there were no excess positional arguments). </p>\n  \n  <p>If any keyword argument does not correspond to a formal parameter name, a TypeError exception is raised, unless a formal parameter using the syntax \"**identifier\" is present; in this case, that formal parameter receives a dictionary containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding values), or a (new) empty dictionary if there were no excess keyword arguments. </p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In addition to function calls, *args and **kwargs are useful in class hierarchies and also avoid having to write <strong>init</strong> method in Python. Similar usage is seen in frameworks like Django code.</p>\n\n<p>For example,</p>\n\n<pre><code>def __init__(self, *args, **kwargs):\n    for attribute_name, value in zip(self._expected_attributes, args):\n        setattr(self, attribute_name, value)\n        if kwargs.has_key(attribute_name):\n            kwargs.pop(attribute_name)\n\n    for attribute_name in kwargs.viewkeys():\n        setattr(self, attribute_name, kwargs[attribute_name])\n</code></pre>\n\n<p>A subclass can then be</p>\n\n<pre><code>class RetailItem(Item):\n_expected_attributes = Item._expected_attributes + ['name', 'price',    \n                       'category', 'country_of_origin']\n\nclass FoodItem(RetailItem):\n_expected_attributes = RetailItem._expected_attributes +  ['expiry_date']\n</code></pre>\n\n<p>The subclass then be called as </p>\n\n<pre><code>food_item = FoodItem(name = 'Jam', \n                     price = 12.0, \n                     category = 'Foods', \n                     country_of_origin = 'US', \n                     expiry_date = datetime.datetime.now())\n</code></pre>\n\n<p>Also, a subclass with a new attribute which makes sense only to that subclass instance can call the Base class <strong>init</strong> to offload the attributes setting.\nThis is done through *args and **kwargs. kwargs mainly used so that code is readable using named arguments. For example,</p>\n\n<pre><code>class ElectronicAccessories(RetailItem):\n_expected_attributes = RetailItem._expected_attributes +  ['specifications']\n\"\"\"\nDepend on args and kwargs to populate the data as needed.\n\"\"\"\ndef __init__(self, specifications = None, *args, **kwargs):\n    self.specifications = specifications # Rest of attributes will make sense to parent class.\n    super(ElectronicAccessories, self).__init__(*args, **kwargs)\n</code></pre>\n\n<p>which can be instatiated as</p>\n\n<pre><code>usb_key = ElectronicAccessories(name = 'Sandisk', \n                                price = '$6.00', \n                                category = 'Electronics',\n                                country_of_origin = 'CN',\n                                specifications = '4GB USB 2.0/USB 3.0')\n</code></pre>\n\n<p>The complete code is <a href=\"http://harisankar-krishnaswamy.blogspot.sg/2015/08/using-args-and-kwargs-python-code-post.html\" rel=\"nofollow\">here</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using generator functions can make your example a little easier to read and probably boost the performance.</p>\n\n<pre><code>def flatten(l):\n    for el in l:\n        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):\n            for sub in flatten(el):\n                yield sub\n        else:\n            yield el\n</code></pre>\n\n<p>I used the <a href=\"http://docs.python.org/library/collections.html#abcs-abstract-base-classes\">Iterable ABC</a> added in 2.6.</p>\n\n<p>In Python 3, the <code>basestring</code> is no more, but you can use</p>\n\n<pre><code>basestring = (str, bytes)\n</code></pre>\n\n<p>to get the same effect there.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could simply use the flatten function in the <a href=\"http://docs.python.org/2/library/compiler.html#module-compiler.ast\"><code>compiler.ast</code></a> module.</p>\n\n<pre><code>&gt;&gt;&gt; from compiler.ast import flatten\n&gt;&gt;&gt; flatten([0, [1, 2], [3, 4, [5, 6]], 7])\n[0, 1, 2, 3, 4, 5, 6, 7]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Generator version of @unutbu's non-recursive solution, as requested by @Andrew in a comment:</p>\n\n<pre><code>def genflat(l, ltypes=collections.Sequence):\n    l = list(l)\n    i = 0\n    while i &lt; len(l):\n        while isinstance(l[i], ltypes):\n            if not l[i]:\n                l.pop(i)\n                i -= 1\n                break\n            else:\n                l[i:i + 1] = l[i]\n        yield l[i]\n        i += 1\n</code></pre>\n\n<p>Slightly simplified version of this generator:</p>\n\n<pre><code>def genflat(l, ltypes=collections.Sequence):\n    l = list(l)\n    while l:\n        while l and isinstance(l[0], ltypes):\n            l[0:1] = l[0]\n        if l: yield l.pop(0)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My solution:</p>\n\n<pre><code>def flatten(x):\n    if isinstance(x, collections.Iterable):\n        return [a for i in x for a in flatten(i)]\n    else:\n        return [x]\n</code></pre>\n\n<p>A little more concise, but pretty much the same.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This version of <code>flatten</code> avoids python's recursion limit (and thus works with arbitrarily deep, nested iterables). It is a generator which can handle strings and arbitrary iterables (even infinite ones).</p>\n\n<pre><code>import itertools as IT\nimport collections\n\ndef flatten(iterable, ltypes=collections.Iterable):\n    remainder = iter(iterable)\n    while True:\n        first = next(remainder)\n        if isinstance(first, ltypes) and not isinstance(first, basestring):\n            remainder = IT.chain(first, remainder)\n        else:\n            yield first\n</code></pre>\n\n<p>Here are some examples demonstrating its use:</p>\n\n<pre><code>print(list(IT.islice(flatten(IT.repeat(1)),10)))\n# [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\nprint(list(IT.islice(flatten(IT.chain(IT.repeat(2,3),\n                                       {10,20,30},\n                                       'foo bar'.split(),\n                                       IT.repeat(1),)),10)))\n# [2, 2, 2, 10, 20, 30, 'foo', 'bar', 1, 1]\n\nprint(list(flatten([[1,2,[3,4]]])))\n# [1, 2, 3, 4]\n\nseq = ([[chr(i),chr(i-32)] for i in xrange(ord('a'), ord('z')+1)] + range(0,9))\nprint(list(flatten(seq)))\n# ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H',\n# 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N', 'o', 'O', 'p', 'P',\n# 'q', 'Q', 'r', 'R', 's', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X',\n# 'y', 'Y', 'z', 'Z', 0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n\n<p>Although <code>flatten</code> can handle infinite generators, it can not handle infinite nesting:</p>\n\n<pre><code>def infinitely_nested():\n    while True:\n        yield IT.chain(infinitely_nested(), IT.repeat(1))\n\nprint(list(IT.islice(flatten(infinitely_nested()), 10)))\n# hangs\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is my functional version of recursive flatten which handles both tuples and lists, and lets you throw in any mix of positional arguments. Returns a generator which produces the entire sequence in order, arg by arg:</p>\n\n<pre><code>flatten = lambda *n: (e for a in n\n    for e in (flatten(*a) if isinstance(a, (tuple, list)) else (a,)))\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>l1 = ['a', ['b', ('c', 'd')]]\nl2 = [0, 1, (2, 3), [[4, 5, (6, 7, (8,), [9]), 10]], (11,)]\nprint list(flatten(l1, -2, -1, l2))\n['a', 'b', 'c', 'd', -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Generator using recursion and duck typing (updated for Python 3):</p>\n\n<pre><code>def flatten(L):\n    for item in L:\n        try:\n            yield from flatten(item)\n        except TypeError:\n            yield item\n\nlist(flatten([[[1, 2, 3], [4, 5]], 6]))\n&gt;&gt;&gt;[1, 2, 3, 4, 5, 6]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's another answer that is even more interesting...</p>\n\n<pre><code>import re\n\ndef Flatten(TheList):\n    a = str(TheList)\n    b,crap = re.subn(r'[\\[,\\]]', ' ', a)\n    c = b.split()\n    d = [int(x) for x in c]\n\n    return(d)\n</code></pre>\n\n<p>Basically, it converts the nested list to a string, uses a regex to strip out the nested syntax, and then converts the result back to a (flattened) list.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def flatten(xs):\n    res = []\n    def loop(ys):\n        for i in ys:\n            if isinstance(i, list):\n                loop(i)\n            else:\n                res.append(i)\n    loop(xs)\n    return res\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It was fun trying to create a function that could flatten irregular list in Python, but of course that is what Python is for (to make programming fun). The following generator works fairly well with some caveats:</p>\n\n<pre><code>def flatten(iterable):\n    try:\n        for item in iterable:\n            yield from flatten(item)\n    except TypeError:\n        yield iterable\n</code></pre>\n\n<p>It will flatten datatypes that you might want left alone (like <code>bytearray</code>, <code>bytes</code>, and <code>str</code> objects). Also, the code relies on the fact that requesting an iterator from a non-iterable raises a <code>TypeError</code>.</p>\n\n<pre><code>&gt;&gt;&gt; L = [[[1, 2, 3], [4, 5]], 6]\n&gt;&gt;&gt; def flatten(iterable):\n    try:\n        for item in iterable:\n            yield from flatten(item)\n    except TypeError:\n        yield iterable\n\n\n&gt;&gt;&gt; list(flatten(L))\n[1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>Edit:</strong></p>\n\n<p>I disagree with the previous implementation. The problem is that you should not be able to flatten something that is not an iterable. It is confusing and gives the wrong impression of the argument.</p>\n\n<pre><code>&gt;&gt;&gt; list(flatten(123))\n[123]\n&gt;&gt;&gt;\n</code></pre>\n\n<p>The following generator is almost the same as the first but does not have the problem of trying to flatten a non-iterable object. It fails as one would expect when an inappropriate argument is given to it.</p>\n\n<pre><code>def flatten(iterable):\n    for item in iterable:\n        try:\n            yield from flatten(item)\n        except TypeError:\n            yield item\n</code></pre>\n\n<p>Testing the generator works fine with the list that was provided. However, the new code will raise a <code>TypeError</code> when a non-iterable object is given to it. Example are shown below of the new behavior.</p>\n\n<pre><code>&gt;&gt;&gt; L = [[[1, 2, 3], [4, 5]], 6]\n&gt;&gt;&gt; list(flatten(L))\n[1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; list(flatten(123))\nTraceback (most recent call last):\n  File \"&lt;pyshell#32&gt;\", line 1, in &lt;module&gt;\n    list(flatten(123))\n  File \"&lt;pyshell#27&gt;\", line 2, in flatten\n    for item in iterable:\nTypeError: 'int' object is not iterable\n&gt;&gt;&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I prefer simple answers.  No generators.  No recursion or recursion limits.  Just iteration:</p>\n\n<pre><code>def flatten(TheList):\n    listIsNested = True\n\n    while listIsNested:                 #outer loop\n        keepChecking = False\n        Temp = []\n\n        for element in TheList:         #inner loop\n            if isinstance(element,list):\n                Temp.extend(element)\n                keepChecking = True\n            else:\n                Temp.append(element)\n\n        listIsNested = keepChecking     #determine if outer loop exits\n        TheList = Temp[:]\n\n    return TheList\n</code></pre>\n\n<p>This works with two lists: an inner for loop and an outer while loop.  </p>\n\n<p>The inner for loop iterates through the list.  If it finds a list element, it (1) uses list.extend() to flatten that part one level of nesting and (2) switches keepChecking to True.  keepchecking is used to control the outer while loop.  If the outer loop gets set to true, it triggers the inner loop for another pass.  </p>\n\n<p>Those passes keep happening until no more nested lists are found.  When a pass finally occurs where none are found, keepChecking never gets tripped to true, which means listIsNested stays false and the outer while loop exits.  </p>\n\n<p>The flattened list is then returned.</p>\n\n<p>Test-run   </p>\n\n<pre><code>flatten([1,2,3,4,[100,200,300,[1000,2000,3000]]])\n</code></pre>\n\n<p><code>[1, 2, 3, 4, 100, 200, 300, 1000, 2000, 3000]</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Although an elegant and very pythonic answer has been selected I would present my solution just for the review:</p>\n\n<pre><code>def flat(l):\n    ret = []\n    for i in l:\n        if isinstance(i, list) or isinstance(i, tuple):\n            ret.extend(flat(i))\n        else:\n            ret.append(i)\n    return ret\n</code></pre>\n\n<p>Please tell how good or bad this code is?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a simple function that flattens lists of arbitrary depth. No recursion, to avoid stack overflow.</p>\n\n<pre><code>from copy import deepcopy\n\ndef flatten_list(nested_list):\n    \"\"\"Flatten an arbitrarily nested list, without recursion (to avoid\n    stack overflows). Returns a new list, the original list is unchanged.\n\n    &gt;&gt; list(flatten_list([1, 2, 3, [4], [], [[[[[[[[[5]]]]]]]]]]))\n    [1, 2, 3, 4, 5]\n    &gt;&gt; list(flatten_list([[1, 2], 3]))\n    [1, 2, 3]\n\n    \"\"\"\n    nested_list = deepcopy(nested_list)\n\n    while nested_list:\n        sublist = nested_list.pop(0)\n\n        if isinstance(sublist, list):\n            nested_list = sublist + nested_list\n        else:\n            yield sublist\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's the <code>compiler.ast.flatten</code> implementation in 2.7.5:</p>\n\n<pre><code>def flatten(seq):\n    l = []\n    for elt in seq:\n        t = type(elt)\n        if t is tuple or t is list:\n            for elt2 in flatten(elt):\n                l.append(elt2)\n        else:\n            l.append(elt)\n    return l\n</code></pre>\n\n<p>There are better, faster methods (If you've reached here, you have seen them already)</p>\n\n<p>Also note:</p>\n\n<blockquote>\n  <p>Deprecated since version 2.6: The compiler package has been removed in Python 3.</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm new to python and come from a lisp background. This is what I came up with (check out the var names for lulz):</p>\n\n<pre><code>def flatten(lst):\n    if lst:\n        car,*cdr=lst\n        if isinstance(car,(list,tuple)):\n            if cdr: return flatten(car) + flatten(cdr)\n            return flatten(car)\n        if cdr: return [car] + flatten(cdr)\n        return [car]\n</code></pre>\n\n<p>Seems to work. Test:</p>\n\n<pre><code>flatten((1,2,3,(4,5,6,(7,8,(((1,2)))))))\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 1, 2]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>L2 = [o for k in [[j] if not isinstance(j,list) else j for j in [k for i in [[m] if not \nisinstance(m,list) else m for m in L] for k in i]] for o in k]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I don't see anything like this posted around here and just got here from a closed question on the same subject, but why not just do something like this(if you know the type of the list you want to split):</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 5, 10, [1, 25, 11, [1, 0]]]    \n&gt;&gt;&gt; g = str(a).replace('[', '').replace(']', '')    \n&gt;&gt;&gt; b = [int(x) for x in g.split(',') if x.strip()]\n</code></pre>\n\n<p>You would need to know the type of the elements but I think this can be generalised and in terms of speed I think it would be faster.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>totally hacky but I think it would work (depending on your data_type)</p>\n\n<pre><code>flat_list = ast.literal_eval(\"[%s]\"%re.sub(\"[\\[\\]]\",\"\",str(the_list)))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you like recursion, this might be a solution of interest to you:</p>\n\n<pre><code>def f(E):\n    if E==[]: \n        return []\n    elif type(E) != list: \n        return [E]\n    else:\n        a = f(E[0])\n        b = f(E[1:])\n        a.extend(b)\n        return a\n</code></pre>\n\n<p>I actually adapted this from some practice Scheme code that I had written a while back. </p>\n\n<p>Enjoy!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is another py2 approach, Im not sure if its the fastest or the most elegant nor safest ...</p>\n\n<pre><code>from collections import Iterable\nfrom itertools import imap, repeat, chain\n\n\ndef flat(seqs, ignore=(int, long, float, basestring)):\n    return repeat(seqs, 1) if any(imap(isinstance, repeat(seqs), ignore)) or not isinstance(seqs, Iterable) else chain.from_iterable(imap(flat, seqs))\n</code></pre>\n\n<p>It can ignore any specific (or derived) type you would like, it returns an iterator, so you can convert it to any specific container such as list, tuple, dict or simply consume it in order to reduce memory footprint, for better or worse it can handle initial non-iterable objects such as int ...</p>\n\n<p>Note most of the heavy lifting is done in C, since as far as I know thats how itertools are implemented, so while it is recursive, AFAIK it isn't bounded by python recursion depth since the function calls are happening in C, though this doesn't mean you are bounded by memory, specially in OS X where its stack size has a hard limit as of today (OS X Mavericks) ...</p>\n\n<p>there is a slightly faster approach, but less portable method, only use it if you can assume that the base elements of the input can be explicitly determined otherwise, you'll get an infinite recursion, and OS X with its limited stack size, will throw a segmentation fault fairly quickly ...</p>\n\n<pre><code>def flat(seqs, ignore={int, long, float, str, unicode}):\n    return repeat(seqs, 1) if type(seqs) in ignore or not isinstance(seqs, Iterable) else chain.from_iterable(imap(flat, seqs))\n</code></pre>\n\n<p>here we are using sets to check for the type so it takes O(1) vs O(number of types) to check whether or not an element should be ignored, though of course any value with derived type of the stated ignored types will fail, this is why its using <code>str</code>, <code>unicode</code> so use it with caution ...</p>\n\n<p>tests:</p>\n\n<pre><code>import random\n\ndef test_flat(test_size=2000):\n    def increase_depth(value, depth=1):\n        for func in xrange(depth):\n            value = repeat(value, 1)\n        return value\n\n    def random_sub_chaining(nested_values):\n        for values in nested_values:\n            yield chain((values,), chain.from_iterable(imap(next, repeat(nested_values, random.randint(1, 10)))))\n\n    expected_values = zip(xrange(test_size), imap(str, xrange(test_size)))\n    nested_values = random_sub_chaining((increase_depth(value, depth) for depth, value in enumerate(expected_values)))\n    assert not any(imap(cmp, chain.from_iterable(expected_values), flat(chain(((),), nested_values, ((),)))))\n\n&gt;&gt;&gt; test_flat()\n&gt;&gt;&gt; list(flat([[[1, 2, 3], [4, 5]], 6]))\n[1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt;  \n\n$ uname -a\nDarwin Samys-MacBook-Pro.local 13.3.0 Darwin Kernel Version 13.3.0: Tue Jun  3 21:27:35 PDT 2014; root:xnu-2422.110.17~1/RELEASE_X86_64 x86_64\n$ python --version\nPython 2.7.5\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Without using any library:</p>\n\n<pre><code>def flat(l):\n    def _flat(l, r):    \n        if type(l) is not list:\n            r.append(l)\n        else:\n            for i in l:\n                r = r + flat(i)\n        return r\n    return _flat(l, [])\n\n\n\n# example\ntest = [[1], [[2]], [3], [['a','b','c'] , [['z','x','y']], ['d','f','g']], 4]    \nprint flat(test) # prints [1, 2, 3, 'a', 'b', 'c', 'z', 'x', 'y', 'd', 'f', 'g', 4]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using <code>itertools.chain</code>:</p>\n\n<pre><code>import itertools\nfrom collections import Iterable\n\ndef list_flatten(lst):\n    flat_lst = []\n    for item in itertools.chain(lst):\n        if isinstance(item, Iterable):\n            item = list_flatten(item)\n            flat_lst.extend(item)\n        else:\n            flat_lst.append(item)\n    return flat_lst\n</code></pre>\n\n<p>Or without chaining:</p>\n\n<pre><code>def flatten(q, final):\n    if not q:\n        return\n    if isinstance(q, list):\n        if not isinstance(q[0], list):\n            final.append(q[0])\n        else:\n            flatten(q[0], final)\n        flatten(q[1:], final)\n    else:\n        final.append(q)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I used recursive to solve <strong><em>nested list with any depth</em></strong></p>\n\n<pre><code>def combine_nlist(nlist,init=0,combiner=lambda x,y: x+y):\n    '''\n    apply function: combiner to a nested list element by element(treated as flatten list)\n    '''\n    current_value=init\n    for each_item in nlist:\n        if isinstance(each_item,list):\n            current_value =combine_nlist(each_item,current_value,combiner)\n        else:\n            current_value = combiner(current_value,each_item)\n    return current_value\n</code></pre>\n\n<p>So after i define function combine_nlist, it is easy to use this function do flatting. Or you can combine it into one function. I like my solution because it can be applied to any nested list.</p>\n\n<pre><code>def flatten_nlist(nlist):\n    return combine_nlist(nlist,[],lambda x,y:x+[y])\n</code></pre>\n\n<p>result</p>\n\n<pre><code>In [379]: flatten_nlist([1,2,3,[4,5],[6],[[[7],8],9],10])\nOut[379]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Shamelessly taken from my own answer to <a href=\"http://stackoverflow.com/a/33109485/418374\">another question</a>.</p>\n\n<p>This function</p>\n\n<ul>\n<li>Does not use <code>isinstance</code>, because it's evil and breaks duck typing.</li>\n<li>Uses <code>reduce</code> recursively.  There has to be an answer using <code>reduce</code>.</li>\n<li>Works with arbitrary nested-lists whose elements are either nested-lists, or non-nested lists of atoms, or atoms (subjected to recursion limit).</li>\n<li>Does not LBYL.</li>\n<li>But not with nested-lists that contain strings as atoms.</li>\n</ul>\n\n<p>Code below:</p>\n\n<pre><code>def flattener(left, right):\n    try:\n        res = reduce(flattener, right, left)\n    except TypeError:\n        left.append(right)\n        res = left\n    return res\n\n\ndef flatten(seq):\n    return reduce(flattener, seq, [])\n\n\n&gt;&gt;&gt; nested_list = [0, [1], [[[[2]]]],\n                   [3, [], [4, 5]],\n                   [6, [7, 8],\n                    9, [[[]], 10,\n                        []]],\n                   11, [], [],\n                   [12]]\n&gt;&gt;&gt; flatten(nested_list)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm surprised no one has thought of this. Damn recursion I don't get the recursive answers that the advanced people here made. anyway here is my attempt on this. caveat is it's very specific to the OP's use case</p>\n\n<pre><code>import re\n\nL = [[[1, 2, 3], [4, 5]], 6]\nflattened_list = re.sub(\"[\\[\\]]\", \"\", str(L)).replace(\" \", \"\").split(\",\")\nnew_list = list(map(int, flattened_list))\nprint(new_list)\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>[1, 2, 3, 4, 5, 6]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is a little out of the box!</p>\n\n<pre><code>def flatten(l):\n    return eval('[' + repr(l).replace('[', '').replace(']', '') + ']')\n</code></pre>\n\n<p>You can even simplify it further with lambda! It works for a list of ANY nested depth! (Except if you have strings with characters '[' and ']' in them... but this works for everything else.)</p>\n\n<p>EDIT: It works for the list in the question!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This has worked for me (what I needed was to convert a list [of lists]* of strings into a whole string):</p>\n\n<pre><code>import itertools\n\ndef flatten(input_list):\n    try:\n        return \"\".join(itertools.chain(*input_list))\n    except TypeError:\n        return flatten(itertools.chain(*input_list))\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>[item for sublist in l for item in sublist]</code> is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>\n\n<p>For evidence, as always, you can use the <code>timeit</code> module in the standard library:</p>\n\n<pre><code>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n1000 loops, best of 3: 1.1 msec per loop\n</code></pre>\n\n<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So (for simplicity and without actual loss of generality) say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>\n\n<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <a href=\"http://docs.python.org/2/library/itertools.html#itertools.chain\"><code>itertools.chain()</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n&gt;&gt;&gt; merged = list(itertools.chain(*list2d))\n</code></pre>\n\n<p>or, on Python &gt;=2.6, use <a href=\"http://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable\"><code>itertools.chain.from_iterable()</code></a> which doesn't require unpacking the list:</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n&gt;&gt;&gt; merged = list(itertools.chain.from_iterable(list2d))\n</code></pre>\n\n<p>This approach is arguably more readable than <code>[item for sublist in l for item in sublist]</code> and appears to be faster too:</p>\n\n<pre><code>[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99;import itertools' 'list(itertools.chain.from_iterable(l))'\n10000 loops, best of 3: 24.2 usec per loop\n[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n10000 loops, best of 3: 45.2 usec per loop\n[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n1000 loops, best of 3: 488 usec per loop\n[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n1000 loops, best of 3: 522 usec per loop\n[me@home]$ python --version\nPython 2.7.3\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; sum(l, [])\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n<p>Note that only works on lists of lists. For lists of lists of lists, you'll need another solution.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>@Nadia: You have to use much longer lists. Then you see the difference quite strikingly!\nMy results for <code>len(l) = 1600</code></p>\n\n<pre><code>A took 14.323 ms\nB took 13.437 ms\nC took 1.135 ms\n</code></pre>\n\n<p>where:</p>\n\n<pre><code>A = reduce(lambda x,y: x+y,l)\nB = sum(l, [])\nC = [item for sublist in l for item in sublist]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; l = [[1,2,3],[4,5,6], [7], [8,9]]\n&gt;&gt;&gt; reduce(lambda x,y: x+y,l)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n<p>The <code>extend()</code> method in your example modifies <code>x</code> instead of returning a useful value (which <code>reduce()</code> expects).</p>\n\n<p>A faster way to do the <code>reduce</code> version would be</p>\n\n<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; l = [[1,2,3],[4,5,6], [7], [8,9]]\n&gt;&gt;&gt; reduce(operator.add, l)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>I take my statement back. sum is not the winner. Although it is faster when the list is small. But the performance degrades significantly with larger lists.</strong> </p>\n\n<pre><code>&gt;&gt;&gt; timeit.Timer(\n        '[item for sublist in l for item in sublist]',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10000'\n    ).timeit(100)\n2.0440959930419922\n</code></pre>\n\n<p>The sum version is still running for more than a minute and it hasn't done processing yet!</p>\n\n<p>For medium lists:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.Timer(\n        '[item for sublist in l for item in sublist]',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10'\n    ).timeit()\n20.126545906066895\n&gt;&gt;&gt; timeit.Timer(\n        'reduce(lambda x,y: x+y,l)',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10'\n    ).timeit()\n22.242258071899414\n&gt;&gt;&gt; timeit.Timer(\n        'sum(l, [])',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]] * 10'\n    ).timeit()\n16.449732065200806\n</code></pre>\n\n<p>Using small lists and timeit: number=1000000</p>\n\n<pre><code>&gt;&gt;&gt; timeit.Timer(\n        '[item for sublist in l for item in sublist]',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]'\n    ).timeit()\n2.4598159790039062\n&gt;&gt;&gt; timeit.Timer(\n        'reduce(lambda x,y: x+y,l)',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]'\n    ).timeit()\n1.5289170742034912\n&gt;&gt;&gt; timeit.Timer(\n        'sum(l, [])',\n        'l=[[1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]'\n    ).timeit()\n1.0598428249359131\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Why do you use extend?</p>\n\n<pre><code>reduce(lambda x, y: x+y, l)\n</code></pre>\n\n<p>This should work fine.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The reason your function didn't work: the extend extends array in-place and doesn't return it. You can still return x from lambda, using some trick:</p>\n\n<pre><code>reduce(lambda x,y: x.extend(y) or x, l)\n</code></pre>\n\n<p>Note: extend is more efficient than + on lists.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 3, <code>print</code> became a function. This means that you need to include parenthesis now.</p>\n\n<pre><code>print(\"Hello World\")\n</code></pre>\n\n<p><a href=\"http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function\">http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It looks like you're using Python 3.0, in which print has turned into a callable function rather than a statment.</p>\n\n<pre><code>print('Hello world!')\n</code></pre>\n\n<p><a href=\"http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function\">http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Because in Python 3, <code>print statement</code> has been replaced with a <code>print() function</code>, with keyword arguments to replace most of the special syntax of the old print statement. So you have to write it as </p>\n\n<pre><code>print(\"Hello World\")\n</code></pre>\n\n<p>But if you write this in a programme and some one using Python 2.x tries to run, they will get an error. To avoid this, it is a good practice to import print function</p>\n\n<pre><code>from __future__ import print_function\n</code></pre>\n\n<p>Now you code works on both 2.x &amp; 3.x</p>\n\n<p>Check out below examples also to get familiar with print() function.</p>\n\n<pre><code>Old: print \"The answer is\", 2*2\nNew: print(\"The answer is\", 2*2)\n\nOld: print x,           # Trailing comma suppresses newline\nNew: print(x, end=\" \")  # Appends a space instead of a newline\n\nOld: print              # Prints a newline\nNew: print()            # You must call the function!\n\nOld: print &gt;&gt;sys.stderr, \"fatal error\"\nNew: print(\"fatal error\", file=sys.stderr)\n\nOld: print (x, y)       # prints repr((x, y))\nNew: print((x, y))      # Not the same as print(x, y)!\n</code></pre>\n\n<p>Source: <a href=\"https://docs.python.org/3.0/whatsnew/3.0.html\">What\u2019s New In Python 3.0?</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 3.0, <code>print</code> is a regular function that requires ():</p>\n\n<pre><code>print(\"Hello world\")\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In python 3, it's <code>print(\"something\")</code> , not <code>print \"something\"</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It looks like you're using Python 3. In Python 3, print has been changed to a method instead of a statement. Try this:</p>\n\n<pre><code>print(\"hello World\")\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 2.X <code>print</code> is a keyword as you can see in this <a href=\"http://zetcode.com/lang/python/keywords/\" rel=\"nofollow\">link</a>. However, in Python 3.X <code>print</code> becomes a function, so the correct way to do it is <code>print(something)</code>.\nYou can get the list of keywords for each version by executing the following:</p>\n\n<pre><code>&gt;&gt;&gt; import keyword\n&gt;&gt;&gt; keyword.kwlist\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have to use bracket with print <code>print(\"Hello World\")</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In python 3 you must do<code>print('some code')</code> this is because in python 3 it has become a function. If you must you can use your python 2 code and convert it to python 3 code using \"2to3\" it is  a great built in program that comes with python. for more - <a href=\"https://www.youtube.com/watch?v=8qxKYnAsNuU&amp;list=PLQVvvaa0QuDe8XSftW-RAxdo6OmaeL85M&amp;index=60\" rel=\"nofollow\">https://www.youtube.com/watch?v=8qxKYnAsNuU&amp;list=PLQVvvaa0QuDe8XSftW-RAxdo6OmaeL85M&amp;index=60</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>2to3 is a Python program that reads Python 2.x source code and applies a series of fixers to transform it into valid Python 3.x code</p>\n\n<p>Further informations can be found here: </p>\n\n<p><a href=\"https://docs.python.org/2/library/2to3.html\" rel=\"nofollow\">Python Documentation: Automated Python 2 to 3 code translation </a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\n\n<p>While in Python you can use arbitrary callables for metaclasses (like <a href=\"http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037\">Jerub</a> shows), the more useful approach is actually to make it an actual class itself. '<code>type</code>' is the usual metaclass in Python. In case you're wondering, yes, '<code>type</code>' is itself a class, and it is its own type. You won't be able to recreate something like '<code>type</code>' purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass '<code>type</code>'.</p>\n\n<p>A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.</p>\n\n<p>When the '<code>class</code>' statement is executed, Python first executes the body of the '<code>class</code>' statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the '<code>__metaclass__</code>' global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\n\n<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the '<code>type</code>' metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\n\n<p>Here's an aggregated example of the bits and pieces:</p>\n\n<pre><code>def make_hook(f):\n    \"\"\"Decorator to turn 'foo' method into '__foo__'\"\"\"\n    f.is_hook = 1\n    return f\n\nclass MyType(type):\n    def __new__(cls, name, bases, attrs):\n\n        if name.startswith('None'):\n            return None\n\n        # Go over attributes and see if they should be renamed.\n        newattrs = {}\n        for attrname, attrvalue in attrs.iteritems():\n            if getattr(attrvalue, 'is_hook', 0):\n                newattrs['__%s__' % attrname] = attrvalue\n            else:\n                newattrs[attrname] = attrvalue\n\n        return super(MyType, cls).__new__(cls, name, bases, newattrs)\n\n    def __init__(self, name, bases, attrs):\n        super(MyType, self).__init__(name, bases, attrs)\n\n        # classregistry.register(self, self.interfaces)\n        print \"Would register class %s now.\" % self\n\n    def __add__(self, other):\n        class AutoClass(self, other):\n            pass\n        return AutoClass\n        # Alternatively, to autogenerate the classname as well as the class:\n        # return type(self.__name__ + other.__name__, (self, other), {})\n\n    def unregister(self):\n        # classregistry.unregister(self)\n        print \"Would unregister class %s now.\" % self\n\nclass MyObject:\n    __metaclass__ = MyType\n\n\nclass NoneSample(MyObject):\n    pass\n\n# Will print \"NoneType None\"\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n    def __init__(self, value):\n        self.value = value\n    @make_hook\n    def add(self, other):\n        return self.__class__(self.value + other.value)\n\n# Will unregister the class\nExample.unregister()\n\ninst = Example(10)\n# Will fail with an AttributeError\n#inst.unregister()\n\nprint inst + inst\nclass Sibling(MyObject):\n    pass\n\nExampleSibling = Example + Sibling\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n# content of its own) although it will believe it's called 'AutoClass'\nprint ExampleSibling\nprint ExampleSibling.__mro__\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Classes as objects</h1>\n\n<p>Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.</p>\n\n<p>In most languages, classes are just pieces of code that describe how to produce an object. That's kinda true in Python too:</p>\n\n<pre><code>&gt;&gt;&gt; class ObjectCreator(object):\n...       pass\n... \n\n&gt;&gt;&gt; my_object = ObjectCreator()\n&gt;&gt;&gt; print(my_object)\n&lt;__main__.ObjectCreator object at 0x8974f2c&gt;\n</code></pre>\n\n<p>But classes are more than that in Python. Classes are objects too.</p>\n\n<p>Yes, objects. </p>\n\n<p>As soon as you use the keyword <code>class</code>, Python executes it and creates\nan OBJECT. The instruction</p>\n\n<pre><code>&gt;&gt;&gt; class ObjectCreator(object):\n...       pass\n... \n</code></pre>\n\n<p>creates in memory an object with the name \"ObjectCreator\". </p>\n\n<p><strong>This object (the class) is itself capable of creating objects (the instances), \nand this is why it's a class</strong>. </p>\n\n<p>But still, it's an object, and therefore:</p>\n\n<ul>\n<li>you can assign it to a variable</li>\n<li>you can copy it</li>\n<li>you can add attributes to it</li>\n<li>you can pass it as a function parameter</li>\n</ul>\n\n<p>e.g.:</p>\n\n<pre><code>&gt;&gt;&gt; print(ObjectCreator) # you can print a class because it's an object\n&lt;class '__main__.ObjectCreator'&gt;\n&gt;&gt;&gt; def echo(o):\n...       print(o)\n... \n&gt;&gt;&gt; echo(ObjectCreator) # you can pass a class as a parameter\n&lt;class '__main__.ObjectCreator'&gt;\n&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))\nFalse\n&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' # you can add attributes to a class\n&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))\nTrue\n&gt;&gt;&gt; print(ObjectCreator.new_attribute)\nfoo\n&gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable\n&gt;&gt;&gt; print(ObjectCreatorMirror.new_attribute)\nfoo\n&gt;&gt;&gt; print(ObjectCreatorMirror())\n&lt;__main__.ObjectCreator object at 0x8997b4c&gt;\n</code></pre>\n\n<h1>Creating classes dynamically</h1>\n\n<p>Since classes are objects, you can create them on the fly, like any object.</p>\n\n<p>First, you can create a class in a function using <code>class</code>:</p>\n\n<pre><code>&gt;&gt;&gt; def choose_class(name):\n...     if name == 'foo':\n...         class Foo(object):\n...             pass\n...         return Foo # return the class, not an instance\n...     else:\n...         class Bar(object):\n...             pass\n...         return Bar\n...     \n&gt;&gt;&gt; MyClass = choose_class('foo') \n&gt;&gt;&gt; print(MyClass) # the function returns a class, not an instance\n&lt;class '__main__.Foo'&gt;\n&gt;&gt;&gt; print(MyClass()) # you can create an object from this class\n&lt;__main__.Foo object at 0x89c6d4c&gt;\n</code></pre>\n\n<p>But it's not so dynamic, since you still have to write the whole class yourself.</p>\n\n<p>Since classes are objects, they must be generated by something.</p>\n\n<p>When you use the <code>class</code> keyword, Python creates this object automatically. But as\nwith most things in Python, it gives you a way to do it manually.</p>\n\n<p>Remember the function <code>type</code>? The good old function that lets you know what \ntype an object is:</p>\n\n<pre><code>&gt;&gt;&gt; print(type(1))\n&lt;type 'int'&gt;\n&gt;&gt;&gt; print(type(\"1\"))\n&lt;type 'str'&gt;\n&gt;&gt;&gt; print(type(ObjectCreator))\n&lt;type 'type'&gt;\n&gt;&gt;&gt; print(type(ObjectCreator()))\n&lt;class '__main__.ObjectCreator'&gt;\n</code></pre>\n\n<p>Well, <a href=\"http://docs.python.org/2/library/functions.html#type\"><code>type</code></a> has a completely different ability, it can also create classes on \nthe fly. <code>type</code> can take the description of a class as parameters, \nand return a class.</p>\n\n<p>(I  know, it's silly that the same function can have two completely different uses\naccording to the parameters you pass to it. It's an issue due to backwards \ncompatibility in Python)</p>\n\n<p><code>type</code> works this way:</p>\n\n<pre><code>type(name of the class, \n     tuple of the parent class (for inheritance, can be empty), \n     dictionary containing attributes names and values)\n</code></pre>\n\n<p>e.g.:</p>\n\n<pre><code>&gt;&gt;&gt; class MyShinyClass(object):\n...       pass\n</code></pre>\n\n<p>can be created manually this way:</p>\n\n<pre><code>&gt;&gt;&gt; MyShinyClass = type('MyShinyClass', (), {}) # returns a class object\n&gt;&gt;&gt; print(MyShinyClass)\n&lt;class '__main__.MyShinyClass'&gt;\n&gt;&gt;&gt; print(MyShinyClass()) # create an instance with the class\n&lt;__main__.MyShinyClass object at 0x8997cec&gt;\n</code></pre>\n\n<p>You'll notice that we use \"MyShinyClass\" as the name of the class\nand as the variable to hold the class reference. They can be different,\nbut there is no reason to complicate things.</p>\n\n<p><code>type</code> accepts a dictionary to define the attributes of the class. So:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n...       bar = True\n</code></pre>\n\n<p>Can be translated to:</p>\n\n<pre><code>&gt;&gt;&gt; Foo = type('Foo', (), {'bar':True})\n</code></pre>\n\n<p>And used as a normal class:</p>\n\n<pre><code>&gt;&gt;&gt; print(Foo)\n&lt;class '__main__.Foo'&gt;\n&gt;&gt;&gt; print(Foo.bar)\nTrue\n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; print(f)\n&lt;__main__.Foo object at 0x8a9b84c&gt;\n&gt;&gt;&gt; print(f.bar)\nTrue\n</code></pre>\n\n<p>And of course, you can inherit from it, so:</p>\n\n<pre><code>&gt;&gt;&gt;   class FooChild(Foo):\n...         pass\n</code></pre>\n\n<p>would be:</p>\n\n<pre><code>&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {})\n&gt;&gt;&gt; print(FooChild)\n&lt;class '__main__.FooChild'&gt;\n&gt;&gt;&gt; print(FooChild.bar) # bar is inherited from Foo\nTrue\n</code></pre>\n\n<p>Eventually you'll want to add methods to your class. Just define a function\nwith the proper signature and assign it as an attribute.</p>\n\n<pre><code>&gt;&gt;&gt; def echo_bar(self):\n...       print(self.bar)\n... \n&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\n&gt;&gt;&gt; hasattr(Foo, 'echo_bar')\nFalse\n&gt;&gt;&gt; hasattr(FooChild, 'echo_bar')\nTrue\n&gt;&gt;&gt; my_foo = FooChild()\n&gt;&gt;&gt; my_foo.echo_bar()\nTrue\n</code></pre>\n\n<p>You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.</p>\n\n<p>This is what Python does when you use the keyword <code>class</code>, and it does so by using a metaclass.</p>\n\n<h1>What are metaclasses (finally)</h1>\n\n<p>Metaclasses are the 'stuff' that creates classes.</p>\n\n<p>You define classes in order to create objects, right?</p>\n\n<p>But we learned that Python classes are objects.</p>\n\n<p>Well, metaclasses are what create these objects. They are the classes' classes,\nyou can picture them this way:</p>\n\n<pre><code>MyClass = MetaClass()\nMyObject = MyClass()\n</code></pre>\n\n<p>You've seen that <code>type</code> lets you do something like this:</p>\n\n<pre><code>MyClass = type('MyClass', (), {})\n</code></pre>\n\n<p>It's because the function <code>type</code> is in fact a metaclass. <code>type</code> is the \nmetaclass Python uses to create all classes behind the scenes.</p>\n\n<p>Now you wonder why the heck is it written in lowercase, and not <code>Type</code>?</p>\n\n<p>Well, I guess it's a matter of consistency with <code>str</code>, the class that creates\nstrings objects, and <code>int</code> the class that creates integer objects. <code>type</code> is\njust the class that creates class objects.</p>\n\n<p>You see that by checking the <code>__class__</code> attribute. </p>\n\n<p>Everything, and I mean everything, is an object in Python. That includes ints, \nstrings, functions and classes. All of them are objects. And all of them have\nbeen created from a class:</p>\n\n<pre><code>&gt;&gt;&gt; age = 35\n&gt;&gt;&gt; age.__class__\n&lt;type 'int'&gt;\n&gt;&gt;&gt; name = 'bob'\n&gt;&gt;&gt; name.__class__\n&lt;type 'str'&gt;\n&gt;&gt;&gt; def foo(): pass\n&gt;&gt;&gt; foo.__class__\n&lt;type 'function'&gt;\n&gt;&gt;&gt; class Bar(object): pass\n&gt;&gt;&gt; b = Bar()\n&gt;&gt;&gt; b.__class__\n&lt;class '__main__.Bar'&gt;\n</code></pre>\n\n<p>Now, what is the <code>__class__</code> of any <code>__class__</code> ?</p>\n\n<pre><code>&gt;&gt;&gt; age.__class__.__class__\n&lt;type 'type'&gt;\n&gt;&gt;&gt; name.__class__.__class__\n&lt;type 'type'&gt;\n&gt;&gt;&gt; foo.__class__.__class__\n&lt;type 'type'&gt;\n&gt;&gt;&gt; b.__class__.__class__\n&lt;type 'type'&gt;\n</code></pre>\n\n<p>So, a metaclass is just the stuff that creates class objects.</p>\n\n<p>You can call it a 'class factory' if you wish.</p>\n\n<p><code>type</code> is the built-in metaclass Python uses, but of course, you can create your\nown metaclass.</p>\n\n<h1>The <a href=\"http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__\"><code>__metaclass__</code></a> attribute</h1>\n\n<p>You can add a <code>__metaclass__</code> attribute when you write a class:</p>\n\n<pre><code>class Foo(object):\n  __metaclass__ = something...\n  [...]\n</code></pre>\n\n<p>If you do so, Python will use the metaclass to create the class <code>Foo</code>.</p>\n\n<p>Careful, it's tricky.</p>\n\n<p>You write <code>class Foo(object)</code> first, but the class object <code>Foo</code> is not created\nin memory yet.</p>\n\n<p>Python will look for <code>__metaclass__</code> in the class definition. If it finds it,\nit will use it to create the object class <code>Foo</code>. If it doesn't, it will use\n<code>type</code> to create the class.</p>\n\n<p>Read that several times.</p>\n\n<p>When you do:</p>\n\n<pre><code>class Foo(Bar):\n  pass\n</code></pre>\n\n<p>Python does the following:</p>\n\n<p>Is there a <code>__metaclass__</code> attribute in <code>Foo</code>?</p>\n\n<p>If yes, create in memory a class object (I said a class object, stay with me here),\nwith the name <code>Foo</code> by using what is in <code>__metaclass__</code>.</p>\n\n<p>If Python can't find <code>__metaclass__</code>, it will look for a <code>__metaclass__</code> at the MODULE level, and try to do the same (but only for classes that don't inherit anything, basically old-style classes). </p>\n\n<p>Then if it can't find any <code>__metaclass__</code> at all, it will use the <code>Bar</code>'s (the first parent) own metaclass (which might be the default <code>type</code>) to create the class object.</p>\n\n<p>Be careful here that the <code>__metaclass__</code> attribute will not be inherited, the metaclass of the parent (<code>Bar.__class__</code>) will be. If <code>Bar</code> used a <code>__metaclass__</code> attribute that created <code>Bar</code> with <code>type()</code> (and not <code>type.__new__()</code>), the subclasses will not inherit that behavior.</p>\n\n<p>Now the big question is, what can you put in <code>__metaclass__</code> ?</p>\n\n<p>The answer is: something that can create a class.</p>\n\n<p>And what can create a class? <code>type</code>, or anything that subclasses or uses it.</p>\n\n<h1>Custom metaclasses</h1>\n\n<p>The main purpose of a metaclass is to change the class automatically,\nwhen it's created.</p>\n\n<p>You usually do this for APIs, where you want to create classes matching the\ncurrent context.</p>\n\n<p>Imagine a stupid example, where you decide that all classes in your module\nshould have their attributes written in uppercase. There are several ways to \ndo this, but one way is to set <code>__metaclass__</code> at the module level.</p>\n\n<p>This way, all classes of this module will be created using this metaclass, \nand we just have to tell the metaclass to turn all attributes to uppercase.</p>\n\n<p>Luckily, <code>__metaclass__</code> can actually be any callable, it doesn't need to be a\nformal class (I know, something with 'class' in its name doesn't need to be \na class, go figure... but it's helpful).</p>\n\n<p>So we will start with a simple example, by using a function.</p>\n\n<pre><code># the metaclass will automatically get passed the same argument\n# that you usually pass to `type`\ndef upper_attr(future_class_name, future_class_parents, future_class_attr):\n  \"\"\"\n    Return a class object, with the list of its attribute turned \n    into uppercase.\n  \"\"\"\n\n  # pick up any attribute that doesn't start with '__' and uppercase it\n  uppercase_attr = {}\n  for name, val in future_class_attr.items():\n      if not name.startswith('__'):\n          uppercase_attr[name.upper()] = val\n      else:\n          uppercase_attr[name] = val\n\n  # let `type` do the class creation\n  return type(future_class_name, future_class_parents, uppercase_attr)\n\n__metaclass__ = upper_attr # this will affect all classes in the module\n\nclass Foo(): # global __metaclass__ won't work with \"object\" though\n  # but we can define __metaclass__ here instead to affect only this class\n  # and this will work with \"object\" children\n  bar = 'bip'\n\nprint(hasattr(Foo, 'bar'))\n# Out: False\nprint(hasattr(Foo, 'BAR'))\n# Out: True\n\nf = Foo()\nprint(f.BAR)\n# Out: 'bip'\n</code></pre>\n\n<p>Now, let's do exactly the same, but using a real class for a metaclass:</p>\n\n<pre><code># remember that `type` is actually a class like `str` and `int`\n# so you can inherit from it\nclass UpperAttrMetaclass(type): \n    # __new__ is the method called before __init__\n    # it's the method that creates the object and returns it\n    # while __init__ just initializes the object passed as parameter\n    # you rarely use __new__, except when you want to control how the object\n    # is created.\n    # here the created object is the class, and we want to customize it\n    # so we override __new__\n    # you can do some stuff in __init__ too if you wish\n    # some advanced use involves overriding __call__ as well, but we won't\n    # see this\n    def __new__(upperattr_metaclass, future_class_name, \n                future_class_parents, future_class_attr):\n\n        uppercase_attr = {}\n        for name, val in future_class_attr.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        return type(future_class_name, future_class_parents, uppercase_attr)\n</code></pre>\n\n<p>But this is not really OOP. We call <code>type</code> directly and we don't override\nor call the parent <code>__new__</code>. Let's do it:</p>\n\n<pre><code>class UpperAttrMetaclass(type): \n\n    def __new__(upperattr_metaclass, future_class_name, \n                future_class_parents, future_class_attr):\n\n        uppercase_attr = {}\n        for name, val in future_class_attr.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        # reuse the type.__new__ method\n        # this is basic OOP, nothing magic in there\n        return type.__new__(upperattr_metaclass, future_class_name, \n                            future_class_parents, uppercase_attr)\n</code></pre>\n\n<p>You may have noticed the extra argument <code>upperattr_metaclass</code>. There is\nnothing special about it: a method always receives the current instance as\nfirst parameter. Just like you have <code>self</code> for ordinary methods.</p>\n\n<p>Of course, the names I used here are long for the sake of clarity, but like\nfor <code>self</code>, all the arguments have conventional names. So a real production\nmetaclass would look like this:</p>\n\n<pre><code>class UpperAttrMetaclass(type): \n\n    def __new__(cls, clsname, bases, dct):\n\n        uppercase_attr = {}\n        for name, val in dct.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        return type.__new__(cls, clsname, bases, uppercase_attr)\n</code></pre>\n\n<p>We can make it even cleaner by using <code>super</code>, which will ease inheritance (because\nyes, you can have metaclasses, inheriting from metaclasses, inheriting from type):</p>\n\n<pre><code>class UpperAttrMetaclass(type): \n\n    def __new__(cls, clsname, bases, dct):\n\n        uppercase_attr = {}\n        for name, val in dct.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)\n</code></pre>\n\n<p>That's it. There is really nothing more about metaclasses.</p>\n\n<p>The reason behind the complexity of the code using metaclasses is not because\nof metaclasses, it's because you usually use metaclasses to do twisted stuff\nrelying on introspection, manipulating inheritance, vars such as <code>__dict__</code>, etc.</p>\n\n<p>Indeed, metaclasses are especially useful to do black magic, and therefore\ncomplicated stuff. But by themselves, they are simple:</p>\n\n<ul>\n<li>intercept a class creation</li>\n<li>modify the class</li>\n<li>return the modified class</li>\n</ul>\n\n<h1>Why would you use metaclasses classes instead of functions?</h1>\n\n<p>Since <code>__metaclass__</code> can accept any callable, why would you use a class\nsince it's obviously more complicated?</p>\n\n<p>There are several reasons to do so:</p>\n\n<ul>\n<li>The intention is clear. When you read <code>UpperAttrMetaclass(type)</code>, you know\nwhat's going to follow</li>\n<li>You can use OOP. Metaclass can inherit from metaclass, override parent methods.\nMetaclasses can even use metaclasses.</li>\n<li>You can structure your code better. You never use metaclasses for something as\ntrivial as the above example. It's usually for something complicated. Having the\nability to make several methods and group them in one class is very useful\nto make the code easier to read.</li>\n<li>You can hook on <code>__new__</code>, <code>__init__</code> and <code>__call__</code>. Which will allow\nyou to do different stuff. Even if usually you can do it all in <code>__new__</code>, \nsome people are just more comfortable using <code>__init__</code>.</li>\n<li>These are called metaclasses, damn it! It must mean something!</li>\n</ul>\n\n<h1>Why the hell would you use metaclasses?</h1>\n\n<p>Now the big question. Why would you use some obscure error prone feature?</p>\n\n<p>Well, usually you don't:</p>\n\n<blockquote>\n  <p>Metaclasses are deeper magic than\n  99% of users should never worry about.\n  If you wonder whether you need them,\n  you don't (the people who actually\n  need them know with certainty that\n  they need them, and don't need an\n  explanation about why). </p>\n</blockquote>\n\n<p><em>Python Guru Tim Peters</em></p>\n\n<p>The main use case for a metaclass is creating an API. A typical example of this is the Django ORM.</p>\n\n<p>It allows you to define something like this:</p>\n\n<pre><code>class Person(models.Model):\n  name = models.CharField(max_length=30)\n  age = models.IntegerField()\n</code></pre>\n\n<p>But if you do this:</p>\n\n<pre><code>guy = Person(name='bob', age='35')\nprint(guy.age)\n</code></pre>\n\n<p>It won't return an <code>IntegerField</code> object. It will return an <code>int</code>, and can even take it directly from the database.</p>\n\n<p>This is possible because <code>models.Model</code> defines <code>__metaclass__</code> and \nit uses some magic that will turn the <code>Person</code> you just defined with simple statements\ninto a complex hook to a database field. </p>\n\n<p>Django makes something complex look simple by exposing a simple API\nand using metaclasses, recreating code from this API to do the real job\nbehind the scenes.</p>\n\n<h1>The last word</h1>\n\n<p>First, you know that classes are objects that can create instances.</p>\n\n<p>Well in fact, classes are themselves instances. Of metaclasses.</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object): pass\n&gt;&gt;&gt; id(Foo)\n142630324\n</code></pre>\n\n<p>Everything is an object in Python, and they are all either instances of classes\nor instances of metaclasses.</p>\n\n<p>Except for <code>type</code>.</p>\n\n<p><code>type</code> is actually its own metaclass. This is not something you could\nreproduce in pure Python, and is done by cheating a little bit at the implementation\nlevel.</p>\n\n<p>Secondly, metaclasses are complicated. You may not want to use them for \nvery simple class alterations. You can change classes by using two different techniques:</p>\n\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Monkey_patch\">monkey patching</a></li>\n<li>class decorators</li>\n</ul>\n\n<p>99% of the time you need class alteration, you are better off using these.</p>\n\n<p>But 99% of the time, you don't need class alteration at all.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>class type(object)\n  |  type(object) -&gt; the object's type\n  |  type(name, bases, dict) -&gt; a new type\n</code></pre>\n\n<p>Metaclasses take 3 args. '<strong>name</strong>', '<strong>bases</strong>' and '<strong>dict</strong>'</p>\n\n<p>Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.</p>\n\n<pre><code>class ThisIsTheName(Bases, Are, Here):\n    All_the_code_here\n    def doesIs(create, a):\n        dict\n</code></pre>\n\n<p>Lets define a metaclass that will demonstrate how '<strong>class:</strong>' calls it.</p>\n\n<pre><code>def test_metaclass(name, bases, dict):\n    print 'The Class Name is', name\n    print 'The Class Bases are', bases\n    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()\n\n    return \"yellow\"\n\nclass TestName(object, None, int, 1):\n    __metaclass__ = test_metaclass\n    foo = 1\n    def baz(self, arr):\n        pass\n\nprint 'TestName = ', repr(TestName)\n\n# output =&gt; \nThe Class Name is TestName\nThe Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)\nThe dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']\nTestName =  'yellow'\n</code></pre>\n\n<p>And now, an example that actually means something, this will automatically make the variables in the list \"attributes\" set on the class, and set to None.</p>\n\n<pre><code>def init_attributes(name, bases, dict):\n    if 'attributes' in dict:\n        for attr in dict['attributes']:\n            dict[attr] = None\n\n    return type(name, bases, dict)\n\nclass Initialised(object):\n    __metaclass__ = init_attributes\n    attributes = ['foo', 'bar', 'baz']\n\nprint 'foo =&gt;', Initialised.foo\n# output=&gt;\nfoo =&gt; None\n</code></pre>\n\n<p>Note that the magic behaviour that 'Initalised' gains by having the metaclass <code>init_attributes</code> is not passed onto a subclass of Initalised.</p>\n\n<p>Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:</p>\n\n<pre><code>class MetaSingleton(type):\n    instance = None\n    def __call__(cls, *args, **kw):\n        if cls.instance is None:\n            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)\n        return cls.instance\n\n class Foo(object):\n     __metaclass__ = MetaSingleton\n\n a = Foo()\n b = Foo()\n assert a is b\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One use for metaclasses is adding new properties and methods to an instance automatically.</p>\n\n<p>For example, if you look at <a href=\"http://docs.djangoproject.com/en/dev/topics/db/models/\">Django models</a>, their definition looks a bit confusing. It looks as if you are only defining class properties:</p>\n\n<pre><code>class Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n</code></pre>\n\n<p>However, at runtime the Person objects are filled with all sorts of useful methods. See the <a href=\"http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py\">source</a> for some amazing metaclassery.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Others have explained how metaclasses work and how they fit into the Python type system. Here's an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.</p>\n\n<pre><code>class MyMeta(type):\n\n    counter = 0\n\n    def __init__(cls, name, bases, dic):\n        type.__init__(cls, name, bases, dic)\n        cls._order = MyMeta.counter\n        MyMeta.counter += 1\n\nclass MyType(object):\n\n    __metaclass__ = MyMeta\n</code></pre>\n\n<p>Anything that's a subclass of <code>MyType</code> then gets a class attribute <code>_order</code> that records the order in which the classes were defined.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.</p>\n\n<p><a href=\"http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html\">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a></p>\n\n<p>In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.</p>\n\n<p>I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the <a href=\"http://www.djangoproject.com/\">Django framework</a>. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.</p>\n\n<ul>\n<li><a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3\">Creating a new model</a></li>\n<li><a href=\"http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25\">The metaclass enabling this</a></li>\n</ul>\n\n<p>The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The best metaclass explanation I have read is <a href=\"http://web.archive.org/web/20120503014702/http://cleverdevil.org/computing/78/\">\"Metaclasses Demystified\"</a>, which originally appeared in Python Magazine.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had a really complicated problem, that probably could have been solved differently, but I chose to solve it using a metaclass.  Because of the complexity, it is one of the few modules I have written where the comments in the module surpass the amount of code that has been written.  Here it is...</p>\n\n<pre><code>#!/usr/bin/env python\n\n# Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.\n\n# This requires some explaining.  The point of this metaclass excercise is to\n# create a static abstract class that is in one way or another, dormant until\n# queried.  I experimented with creating a singlton on import, but that did\n# not quite behave how I wanted it to.  See now here, we are creating a class\n# called GsyncOptions, that on import, will do nothing except state that its\n# class creator is GsyncOptionsType.  This means, docopt doesn't parse any\n# of the help document, nor does it start processing command line options.\n# So importing this module becomes really efficient.  The complicated bit\n# comes from requiring the GsyncOptions class to be static.  By that, I mean\n# any property on it, may or may not exist, since they are not statically\n# defined; so I can't simply just define the class with a whole bunch of\n# properties that are @property @staticmethods.\n#\n# So here's how it works:\n#\n# Executing 'from libgsync.options import GsyncOptions' does nothing more\n# than load up this module, define the Type and the Class and import them\n# into the callers namespace.  Simple.\n#\n# Invoking 'GsyncOptions.debug' for the first time, or any other property\n# causes the __metaclass__ __getattr__ method to be called, since the class\n# is not instantiated as a class instance yet.  The __getattr__ method on\n# the type then initialises the class (GsyncOptions) via the __initialiseClass\n# method.  This is the first and only time the class will actually have its\n# dictionary statically populated.  The docopt module is invoked to parse the\n# usage document and generate command line options from it.  These are then\n# paired with their defaults and what's in sys.argv.  After all that, we\n# setup some dynamic properties that could not be defined by their name in\n# the usage, before everything is then transplanted onto the actual class\n# object (or static class GsyncOptions).\n#\n# Another piece of magic, is to allow command line options to be set in\n# in their native form and be translated into argparse style properties.\n#\n# Finally, the GsyncListOptions class is actually where the options are\n# stored.  This only acts as a mechanism for storing options as lists, to\n# allow aggregation of duplicate options or options that can be specified\n# multiple times.  The __getattr__ call hides this by default, returning the\n# last item in a property's list.  However, if the entire list is required,\n# calling the 'list()' method on the GsyncOptions class, returns a reference\n# to the GsyncListOptions class, which contains all of the same properties\n# but as lists and without the duplication of having them as both lists and\n# static singlton values.\n#\n# So this actually means that GsyncOptions is actually a static proxy class...\n#\n# ...And all this is neatly hidden within a closure for safe keeping.\ndef GetGsyncOptionsType():\n    class GsyncListOptions(object):\n        __initialised = False\n\n    class GsyncOptionsType(type):\n        def __initialiseClass(cls):\n            if GsyncListOptions._GsyncListOptions__initialised: return\n\n            from docopt import docopt\n            from libgsync.options import doc\n            from libgsync import __version__\n\n            options = docopt(\n                doc.__doc__ % __version__,\n                version = __version__,\n                options_first = True\n            )\n\n            paths = options.pop('&lt;path&gt;', None)\n            setattr(cls, \"destination_path\", paths.pop() if paths else None)\n            setattr(cls, \"source_paths\", paths)\n            setattr(cls, \"options\", options)\n\n            for k, v in options.iteritems():\n                setattr(cls, k, v)\n\n            GsyncListOptions._GsyncListOptions__initialised = True\n\n        def list(cls):\n            return GsyncListOptions\n\n        def __getattr__(cls, name):\n            cls.__initialiseClass()\n            return getattr(GsyncListOptions, name)[-1]\n\n        def __setattr__(cls, name, value):\n            # Substitut option names: --an-option-name for an_option_name\n            import re\n            name = re.sub(r'^__', \"\", re.sub(r'-', \"_\", name))\n            listvalue = []\n\n            # Ensure value is converted to a list type for GsyncListOptions\n            if isinstance(value, list):\n                if value:\n                    listvalue = [] + value\n                else:\n                    listvalue = [ None ]\n            else:\n                listvalue = [ value ]\n\n            type.__setattr__(GsyncListOptions, name, listvalue)\n\n    # Cleanup this module to prevent tinkering.\n    import sys\n    module = sys.modules[__name__]\n    del module.__dict__['GetGsyncOptionsType']\n\n    return GsyncOptionsType\n\n# Our singlton abstract proxy class.\nclass GsyncOptions(object):\n    __metaclass__ = GetGsyncOptionsType()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>What are metaclasses? What do you use them for?</strong></p>\n</blockquote>\n\n<p>A class is to an instance as a metaclass is to a class. </p>\n\n<p>Put another way, a class is an instance of a metaclass.</p>\n\n<p>Put a third way, a metaclass is a class's class.</p>\n\n<p>Still hopelessly confused? So was I, until I learned the following and demonstrated how one can actually use metaclasses:</p>\n\n<p><strong>You use a metaclass every time you create a class:</strong></p>\n\n<p>When you create a class definition, for example, like this,</p>\n\n<pre><code>class Foo(object): 'demo'\n</code></pre>\n\n<p>it's the same as functionally calling <code>type</code> with the appropriate arguments and assigning the result to a variable of that name:</p>\n\n<pre><code>name = 'Foo'\nbases = (object,)\nnamespace = {'__doc__': 'demo'}\nFoo = type(name, bases, namespace)\n</code></pre>\n\n<p>Note, some things automatically get added to the <code>__dict__</code>, i.e., the namespace:</p>\n\n<pre><code>&gt;&gt;&gt; Foo.__dict__\ndict_proxy({'__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;, '__doc__': 'demo'})\n</code></pre>\n\n<p>The <em>metaclass</em> of the object we created, in both cases, is <code>type</code>. </p>\n\n<p><strong>We can extend <code>type</code> just like any other class definition:</strong></p>\n\n<p>Here's the default <code>__repr__</code> of classes:</p>\n\n<pre><code>&gt;&gt;&gt; Foo\n&lt;class '__main__.Foo'&gt;\n</code></pre>\n\n<p>One of the most valuable things we can do by default in writing a Python object is to provide it with a good <code>__repr__</code>. When we call <code>help(repr)</code> we learn that there's a good test for a <code>__repr__</code> that also requires a test for equality - <code>obj == eval(repr(obj))</code>. The following simple implementation of <code>__repr__</code> and <code>__eq__</code> for class instances of our type class provides us with a demonstration that may improve on the default <code>__repr__</code> of classes:</p>\n\n<pre><code>class Type(type):\n    def __repr__(cls):\n        \"\"\"\n        &gt;&gt;&gt; Baz\n        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n        &gt;&gt;&gt; eval(repr(Baz))\n        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n        \"\"\"\n        metaname = type(cls).__name__\n        name = cls.__name__\n        parents = ', '.join(b.__name__ for b in cls.__bases__)\n        if parents:\n            parents += ','\n        namespace = ', '.join(': '.join(\n          (repr(k), repr(v) if not isinstance(v, type) else v.__name__))\n               for k, v in cls.__dict__.items())\n        return '{0}(\\'{1}\\', ({2}), {{{3}}})'.format(metaname, name, parents, namespace)\n    def __eq__(cls, other):\n        \"\"\"\n        &gt;&gt;&gt; Baz == eval(repr(Baz))\n        True            \n        \"\"\"\n        return (cls.__name__, cls.__bases__, cls.__dict__) == (\n                other.__name__, other.__bases__, other.__dict__)\n</code></pre>\n\n<p>So now when we create an object with this metaclass, the <code>__repr__</code> echoed on the command line provides a much less ugly sight than the default:</p>\n\n<pre><code>&gt;&gt;&gt; class Bar(object): pass\n&gt;&gt;&gt; Baz = Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n&gt;&gt;&gt; Baz\nType('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n</code></pre>\n\n<p>With a <code>__repr__</code> defined for the class instance, we have a stronger ability to debug our code.</p>\n\n<p><strong>An expected usage: <code>__prepare__</code> a namespace</strong></p>\n\n<p>If, for example, we want to know in what order a class's methods are created in, we could provide an ordered dict as the namespace of the class. We would do this with <code>__prepare__</code> which <a href=\"https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace\">returns the namespace dict for the class if it is implemented in Python 3</a>: </p>\n\n<pre><code>from collections import OrderedDict\n\nclass OrderedType(Type):\n    @classmethod\n    def __prepare__(metacls, name, bases, **kwargs):\n        return OrderedDict()\n    def __new__(cls, name, bases, namespace, **kwargs):\n        result = Type.__new__(cls, name, bases, dict(namespace))\n        result.members = tuple(namespace)\n        return result\n</code></pre>\n\n<p>And usage:</p>\n\n<pre><code>class OrderedMethodsObject(object, metaclass=OrderedType):\n    def method1(self): pass\n    def method2(self): pass\n    def method3(self): pass\n    def method4(self): pass\n</code></pre>\n\n<p>And now we have a record of the order in which these methods (and other class attributes) were created:</p>\n\n<pre><code>&gt;&gt;&gt; OrderedMethodsObject.members\n('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4')\n</code></pre>\n\n<p>Note, this example was adapted from the <a href=\"https://docs.python.org/3/reference/datamodel.html#metaclass-example\">docs</a>. </p>\n\n<p>So what we did was instantiate a metaclass by creating a class. We can also treat the metaclass as we would any other class. It has a method resolution order:</p>\n\n<pre><code>&gt;&gt;&gt; inspect.getmro(OrderedType)\n(&lt;class '__main__.OrderedType'&gt;, &lt;class '__main__.Type'&gt;, &lt;class 'type'&gt;, &lt;class 'object'&gt;)\n</code></pre>\n\n<p>And it has approximately the correct <code>repr</code> (which we can no longer eval unless we can find a way to represent our functions.):</p>\n\n<pre><code>&gt;&gt;&gt; OrderedMethodsObject\nOrderedType('OrderedMethodsObject', (object,), {'method1': &lt;function OrderedMethodsObject.method1 at 0x0000000002DB01E0&gt;, 'members': ('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4'), 'method3': &lt;function OrderedMet\nhodsObject.method3 at 0x0000000002DB02F0&gt;, 'method2': &lt;function OrderedMethodsObject.method2 at 0x0000000002DB0268&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'OrderedMethodsObject' objects&gt;, '__doc__': None, '__d\nict__': &lt;attribute '__dict__' of 'OrderedMethodsObject' objects&gt;, 'method4': &lt;function OrderedMethodsObject.method4 at 0x0000000002DB0378&gt;})\n</code></pre>\n\n<hr>\n\n<p>Thanks for reading! If you want me to demonstrate a specific usage, let me know in a comment below! Cheers!</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Look at the <a href=\"https://docs.python.org/2/library/subprocess.html\">subprocess module</a> in the stdlib:</p>\n\n<pre><code>from subprocess import call\ncall([\"ls\", \"-l\"])\n</code></pre>\n\n<p>The advantage of subprocess vs system is that it is more flexible (you can get the stdout, stderr, the \"real\" status code, better error handling, etc...). I think os.system is deprecated, too, or will be:</p>\n\n<p><a href=\"https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module\">https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module</a></p>\n\n<p>For quick/dirty/one time scripts, <code>os.system</code> is enough, though.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</p>\n\n<ol>\n<li><p><code>os.system(\"some_command with args\")</code> passes the command and arguments to your system's shell.  This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection.  For example,<br>\n<code>os.system(\"some_command &lt; input_file | another_command &gt; output_file\")</code><br>\nHowever, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc.  On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.<br>\n<a href=\"https://docs.python.org/2/library/os.html#os.system\">see documentation</a></p></li>\n<li><p><code>stream = os.popen(\"some_command with args\")</code> will do the same thing as <code>os.system</code> except that it gives you a file-like object that you can use to access standard input/output for that process.  There are 3 other variants of popen that all handle the i/o slightly differently.  If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything.<br>\n<a href=\"https://docs.python.org/2/library/os.html#os.popen\">see documentation</a></p></li>\n<li><p>The <code>Popen</code> class of the <code>subprocess</code> module.  This is intended as a replacement for <code>os.popen</code> but has the downside of being slightly more complicated by virtue of being so comprehensive.  For example, you'd say</p>\n\n<pre><code>print subprocess.Popen(\"echo Hello World\", shell=True, stdout=subprocess.PIPE).stdout.read()\n</code></pre>\n\n<p>instead of  </p>\n\n<pre><code>print os.popen(\"echo Hello World\").read()\n</code></pre>\n\n<p>but it is nice to have all of the options there in one unified class instead of 4 different popen functions.<br>\n<a href=\"https://docs.python.org/2/library/subprocess.html#popen-constructor\">see documentation</a></p></li>\n<li><p>The <code>call</code> function from the <code>subprocess</code> module.  This is basically just like the <code>Popen</code> class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code.  For example:</p>\n\n<pre><code>return_code = subprocess.call(\"echo Hello World\", shell=True)  \n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/subprocess.html#subprocess.call\">see documentation</a></p></li>\n<li><p>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</p></li>\n</ol>\n\n<p>The <code>subprocess</code> module should probably be what you use.</p>\n\n<p>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it <strong>there are serious security implications if</strong> any part of the string that you pass can not be fully trusted (for example if a user is entering some/any part of the string). If unsure only use these methods with constants. To give you a hint of the implications consider this code</p>\n\n<pre><code>print subprocess.Popen(\"echo %s \" % user_input, stdout=PIPE).stdout.read()\n</code></pre>\n\n<p>and imagine that the user enters \"my mama didnt love me &amp;&amp; rm -rf /\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I typically use:</p>\n\n<pre><code>import subprocess\n\np = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()\n</code></pre>\n\n<p>You are free to do what you want with the stdout data in the pipe.  In fact, you can simply omit those parameters (stdout= and stderr=) and it'll behave like os.system().</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some hints on detaching the child process from the calling one (starting the child process in background).</p>\n\n<p>Suppose you want to start a long task from a CGI-script, that is the child process should live longer than the CGI-script execution process.</p>\n\n<p>The classical example from the subprocess module docs is:</p>\n\n<pre><code>import subprocess\nimport sys\n\n# some code here\n\npid = subprocess.Popen([sys.executable, \"longtask.py\"]) # call subprocess\n\n# some more code here\n</code></pre>\n\n<p>The idea here is that you do not want to wait in the line 'call subprocess' until the longtask.py is finished. But it is not clear what happens after the line 'some more code here' from the example.</p>\n\n<p>My target platform was freebsd, but the development was on windows, so I faced the problem on windows first.</p>\n\n<p>On windows (win xp), the parent process will not finish until the longtask.py has finished its work. It is not what you want in CGI-script. The problem is not specific to Python, in PHP community the problems are the same.</p>\n\n<p>The solution is to pass DETACHED_PROCESS flag to the underlying CreateProcess function in win API.\nIf you happen to have installed pywin32 you can import the flag from the win32process module, otherwise you should define it yourself:</p>\n\n<pre><code>DETACHED_PROCESS = 0x00000008\n\npid = subprocess.Popen([sys.executable, \"longtask.py\"],\n                       creationflags=DETACHED_PROCESS).pid\n</code></pre>\n\n<p>/* <em>UPD 2015.10.27</em> @eryksun in a comment below notes, that the semantically correct flag is CREATE_NEW_CONSOLE (0x00000010) */</p>\n\n<p>On freebsd we have another problem: when the parent process is finished, it finishes the child processes as well. And that is not what you want in CGI-script either. Some experiments showed that the problem seemed to be in sharing sys.stdout. And the working solution was the following:</p>\n\n<pre><code>pid = subprocess.Popen([sys.executable, \"longtask.py\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n</code></pre>\n\n<p>I have not checked the code on other platforms and do not know the reasons of the behaviour on freebsd. If anyone knows, please share your ideas. Googling on starting background processes in Python does not shed any light yet.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer: <a href=\"http://docs.python.org/library/subprocess.html\">http://docs.python.org/library/subprocess.html</a></p>\n\n<pre><code>subprocess.call(['ping', 'localhost'])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Check \"pexpect\" python library, too.\nIt allows for interactive controlling of external programs/commands, even ssh, ftp, telnet etc. You can just type something like:</p>\n\n<pre><code>child = pexpect.spawn('ftp 192.168.0.24')\n\nchild.expect('(?i)name .*: ')\n\nchild.sendline('anonymous')\n\nchild.expect('(?i)password')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import os\ncmd = 'ls -al'\nos.system(cmd)\n</code></pre>\n\n<p>If you want to return the results of the command you need <a href=\"http://oreilly.com/catalog/lpython/chapter/ch09.html\">os.popen</a>:</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I always use <code>fabric</code> for this things like:</p>\n\n<pre><code>from fabric.operations import local\nresult = local('ls', capture=True)\nprint \"Content:/n%s\" % (result, )\n</code></pre>\n\n<p>But this seem to be a good tool: <a href=\"https://github.com/amoffat/sh\"><code>sh</code> (Python subprocess interface)</a>.</p>\n\n<p>Look an example:</p>\n\n<pre><code>from sh import vgdisplay\nprint vgdisplay()\nprint vgdisplay('-v')\nprint vgdisplay(v=True)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If what you need is the output from the command you are calling you can use subprocess.check_output since Python 2.7</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"])\n'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is how I run my commands. This code has everything you need pretty much</p>\n\n<pre><code>from subprocess import Popen, PIPE\ncmd = \"ls -l ~/\"\np = Popen(cmd , shell=True, stdout=PIPE, stderr=PIPE)\nout, err = p.communicate()\nprint \"Return code: \", p.returncode\nprint out.rstrip(), err.rstrip()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import os\nos.system(\"your command\")\n</code></pre>\n\n<p>Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant docs on the 'os' and 'sys' modules. There are a bunch of functions (exec* , spawn*) that will do similar things.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>without the output of result</p>\n\n<pre><code>import os\nos.system(\"your command here\")\n</code></pre>\n\n<p>with output of result</p>\n\n<pre><code>import commands\ncommands.getoutput(\"your command here\")\nor\ncommands.getstatusoutput(\"your command here\")\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In case <strong>you need to go only with standard library</strong>, use <a href=\"http://docs.python.org/2/library/subprocess.html\">subprocess module</a>:</p>\n\n<pre><code>from subprocess import call\ncall(['ls', '-l'])\n</code></pre>\n\n<p>It is the recommended standard way. However, more complicated tasks (pipes, output, input, etc.) can be tedious to construct and write.</p>\n\n<p><em>Note: <a href=\"https://docs.python.org/2/library/shlex.html#shlex.split\">shlex.split</a> can help you to parse the command for <code>call</code> and other <code>subprocess</code> functions in case you don't want (or you can't!) provide them in form of lists:</em></p>\n\n<pre><code>import shlex\nfrom subprocess import call\ncall(shlex.split('ls -l'))\n</code></pre>\n\n<hr>\n\n<p>If <strong>you do not mind external dependencies</strong>, install and use <a href=\"https://pypi.python.org/pypi/sh\">sh</a>:</p>\n\n<pre><code>from sh import ifconfig\nprint ifconfig('wlan0')\n</code></pre>\n\n<p>It is the best and the most developer-friendly <code>subprocess</code> wrapper I have seen. It is under active development, it has good documentation and you will be usually able to solve any of your tasks on just couple of lines and in a very readable form. The only thing you need to do to have it available is to type <code>pip install sh</code> in your terminal :-)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>os.system is OK, but kind of dated.  It's also not very secure.  Instead, try subprocess.  subprocess does not call sh directly and is therefore more secure than os.system.</p>\n\n<p>Get more information at <a href=\"https://docs.python.org/library/subprocess.html\" rel=\"nofollow\">https://docs.python.org/library/subprocess.html</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://docs.python.org/2/library/subprocess.html\">https://docs.python.org/2/library/subprocess.html</a></p>\n\n<p>...or for a very simple command:</p>\n\n<pre><code>import os\nos.system('cat testfile')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Update:</h1>\n\n<p><code>subprocess.run</code> is the recommended approach <a href=\"https://docs.python.org/3.6/whatsnew/3.5.html#whatsnew-subprocess\" rel=\"nofollow\">as of Python 3.5</a> if your code does not need to maintain compatibility with earlier Python versions. It's more consistent and offers similar ease-of-use as Envoy. (Piping isn't as straightforward though. See <a href=\"http://stackoverflow.com/questions/7389662/link-several-popen-commands-with-pipes\">this question for how</a>.)</p>\n\n<p>Here's some examples from <a href=\"https://docs.python.org/3.6/library/subprocess.html#subprocess.run\" rel=\"nofollow\">the docs</a>.</p>\n\n<p>Run a process:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.run([\"ls\", \"-l\"])  # doesn't capture output\nCompletedProcess(args=['ls', '-l'], returncode=0)\n</code></pre>\n\n<p>Raise on failed run:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.run(\"exit 1\", shell=True, check=True)\nTraceback (most recent call last):\n  ...\nsubprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1\n</code></pre>\n\n<p>Capture output:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.run([\"ls\", \"-l\", \"/dev/null\"], stdout=subprocess.PIPE)\nCompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,\nstdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\\n')\n</code></pre>\n\n<h1>Original answer:</h1>\n\n<p>I recommend trying <a href=\"https://github.com/kennethreitz/envoy\" rel=\"nofollow\">Envoy</a>. It's a wrapper for subprocess, which in turn <a href=\"http://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">aims to replace</a> the older modules and functions. Envoy is subprocess for humans.</p>\n\n<p>Example usage from <a href=\"https://github.com/kennethreitz/envoy#readme\" rel=\"nofollow\">the readme</a>:</p>\n\n<pre><code>&gt;&gt;&gt; r = envoy.run('git config', data='data to pipe in', timeout=2)\n\n&gt;&gt;&gt; r.status_code\n129\n&gt;&gt;&gt; r.std_out\n'usage: git config [options]'\n&gt;&gt;&gt; r.std_err\n''\n</code></pre>\n\n<p>Pipe stuff around too:</p>\n\n<pre><code>&gt;&gt;&gt; r = envoy.run('uptime | pbcopy')\n\n&gt;&gt;&gt; r.command\n'pbcopy'\n&gt;&gt;&gt; r.status_code\n0\n\n&gt;&gt;&gt; r.history\n[&lt;Response 'uptime'&gt;]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>os.system has been superceeded by the subprocess module. Use subproccess instead.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>subprocess.check_call</code> is convenient if you don't want to test return values. It throws an exception on any error.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>os.system</code> does not allow you to store results, so if you want to store results in some list or something <code>subprocess.call</code> works.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is also <a href=\"http://plumbum.readthedocs.org/en/latest/\">Plumbum</a></p>\n\n<pre><code>&gt;&gt;&gt; from plumbum import local\n&gt;&gt;&gt; ls = local[\"ls\"]\n&gt;&gt;&gt; ls\nLocalCommand(&lt;LocalPath /bin/ls&gt;)\n&gt;&gt;&gt; ls()\nu'build.py\\ndist\\ndocs\\nLICENSE\\nplumbum\\nREADME.rst\\nsetup.py\\ntests\\ntodo.txt\\n'\n&gt;&gt;&gt; notepad = local[\"c:\\\\windows\\\\notepad.exe\"]\n&gt;&gt;&gt; notepad()                                   # Notepad window pops up\nu''                                             # Notepad window is closed by user, command returns\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import os \n\ncmd = 'ls -al'\n\nos.system(cmd)\n</code></pre>\n\n<p><strong>os - This module provides a portable way of using operating system dependent functionality</strong></p>\n\n<p>for the more os functions <a href=\"https://docs.python.org/2/library/os.html\">here</a> is the documentation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is another difference here which is not mentioned above.</p>\n\n<p>subprocess.Popen executes the  as a subprocess. In my case, I need to execute file  which needs to communicate with another program . </p>\n\n<p>I tried subprocess, execution was successful. However  could not comm w/ .\neverything normal when I run both from the terminal.</p>\n\n<p>One more: \n(NOTE: kwrite behaves different from other apps. If you try below with firefox results will not be the same)</p>\n\n<p>If you try os.system(\"kwrite\"), program flow freezes until user closes kwrite. To overcome that I tried instead os.system(konsole -e kwrite). This time program continued to flow but kwrite became the subprocess of the konsole.</p>\n\n<p>Anyone runs the kwrite not being a subprocess (i.e. at the system monitor it must be appear at the leftmost edge of the tree)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I tend to use <a href=\"https://docs.python.org/2/library/subprocess.html\">subprocess</a> together with <a href=\"https://docs.python.org/2/library/shlex.html\">shlex</a> (to handle escaping of quoted strings):</p>\n\n<pre><code>&gt;&gt;&gt; import subprocess, shlex\n&gt;&gt;&gt; command = 'ls -l \"/your/path/with spaces/\"'\n&gt;&gt;&gt; call_params = shlex.split(command)\n&gt;&gt;&gt; print call_params\n[\"ls\", \"-l\", \"/your/path/with spaces/\"]\n&gt;&gt;&gt; subprocess.call(call_params)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>you can use Popen, then you can check procedure's status</p>\n\n<pre><code>from subprocess import Popen\n\nproc = Popen(['ls', '-l'])\nif proc.poll() is None:\n    proc.kill()\n</code></pre>\n\n<p>Check this out <a href=\"http://docs.python.org/library/subprocess.html#popen-objects\" rel=\"nofollow\">subprocess.Popen</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are a lot of different ways to run external commands in python, \nand all of them have their own plus sides and drawbacks.</p>\n\n<p>My colleagues and me have been writing python sysadmin tools, so we need to \nrun a lot of external commands, and sometimes you want them to block or run asynchronously,\ntime-out, update every second...</p>\n\n<p>There are also different ways of handling the return code and errors,\nand you might want to parse the output, and provide new input (in an <a href=\"http://en.wikipedia.org/wiki/Expect\" rel=\"nofollow\">expect</a> kind of style)\nOr you will need to redirect stdin, stdout and stderr to run in a different tty (e.g., when using screen)</p>\n\n<p>So you will probably have to write a lot of wrappers around the external command.\nSo here is a python module which we have written which can handle\nalmost anything you would want, and if not, it's very flexible so you can easily extend it:</p>\n\n<p><a href=\"https://github.com/hpcugent/vsc-base/blob/master/lib/vsc/utils/run.py\" rel=\"nofollow\">https://github.com/hpcugent/vsc-base/blob/master/lib/vsc/utils/run.py</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Shameless plug, I wrote a library for this :P\n<a href=\"https://github.com/houqp/shell.py\" rel=\"nofollow\">https://github.com/houqp/shell.py</a></p>\n\n<p>It's basically a wrapper for popen and shlex for now. It also supports piping commands so you can chain commands easier in Python. So you can do things like:</p>\n\n<pre><code>ex('echo hello shell.py') | \"awk '{print $2}'\"\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just to add to the discussion, if you include using a Python console, you can call external commands from ipython. While in the ipython prompt, you can call call shell commands by prefixing '!'. You can also combine python code with shell, and assign the output of shell scripts to python variables. </p>\n\n<p>For instance: </p>\n\n<pre><code>In [9]: mylist = !ls\n\nIn [10]: mylist\nOut[10]:\n['file1',\n 'file2',\n 'file3',]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Very simplest way to run any command and get result back:</p>\n\n<pre><code>from commands import getstatusoutput\n\ntry:\n    return getstatusoutput(\"ls -ltr\")\nexcept Exception, e:\n    return None\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I quite like <a href=\"http://shell-command.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">shell_command</a> for its simplicity.  It's built on top of the subprocess module.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>After some research, I have the following code which works very well for me. It basically prints both stdout and stderr in real time. Hope it helps someone else who needs it.</p>\n\n<pre><code>stdout_result = 1\nstderr_result = 1\n\n\ndef stdout_thread(pipe):\n    global stdout_result\n    while True:\n        out = pipe.stdout.read(1)\n        stdout_result = pipe.poll()\n        if out == '' and stdout_result is not None:\n            break\n\n        if out != '':\n            sys.stdout.write(out)\n            sys.stdout.flush()\n\n\ndef stderr_thread(pipe):\n    global stderr_result\n    while True:\n        err = pipe.stderr.read(1)\n        stderr_result = pipe.poll()\n        if err == '' and stderr_result is not None:\n            break\n\n        if err != '':\n            sys.stdout.write(err)\n            sys.stdout.flush()\n\n\ndef exec_command(command, cwd=None):\n    if cwd is not None:\n        print '[' + ' '.join(command) + '] in ' + cwd\n    else:\n        print '[' + ' '.join(command) + ']'\n\n    p = subprocess.Popen(\n        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd\n    )\n\n    out_thread = threading.Thread(name='stdout_thread', target=stdout_thread, args=(p,))\n    err_thread = threading.Thread(name='stderr_thread', target=stderr_thread, args=(p,))\n\n    err_thread.start()\n    out_thread.start()\n\n    out_thread.join()\n    err_thread.join()\n\n    return stdout_result + stderr_result\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before generators come <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use <code>\"for... in...\"</code> on is an iterable: <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, but <strong>you can only iterate over them once</strong>. It's because they do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you can not perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>Yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will be run each time the <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>\n\n<p>The generator is considered empty once the function runs but does not hit yield anymore. It can be because the loop had come to an end, or because you do not satisfy a <code>\"if/else\"</code> anymore.</p>\n\n<h2>Your code explained</h2>\n\n<p>Generator:</p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef node._get_child_candidates(self, distance, min_dist, max_dist):\n\n  # Here is the code that will be called each time you use the generator object:\n\n  # If there is still a child of the node object on its left\n  # AND if distance is ok, return the next child\n  if self._leftchild and distance - max_dist &lt; self._median:\n      yield self._leftchild\n\n  # If there is still a child of the node object on its right\n  # AND if distance is ok, return the next child\n  if self._rightchild and distance + max_dist &gt;= self._median:\n      yield self._rightchild\n\n  # If the function arrives here, the generator will be considered empty\n  # there is no more than two values: the left and the right children\n</code></pre>\n\n<p>Caller:</p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidates list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don't need to read the values twice.</li>\n<li>You can have a lot of children and you don't want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see a advanced use of generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n['$100', '$100', '$100', '$100', '$100']\n&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let's see the possible orders of arrival for a 4 horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>More about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\">how does the for loop work</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Shortcut to <a href=\"http://en.wikipedia.org/wiki/Grok\">Grokking</a> <code>yield</code></h2>\n\n<p>When you see a function with <code>yield</code> statements, apply this easy trick to understand what will happen:</p>\n\n<ol>\n<li>Insert a line <code>result = []</code> at the start of the function.</li>\n<li>Replace each <code>yield expr</code> with <code>result.append(expr)</code>.</li>\n<li>Insert a line <code>return result</code> at the bottom of the function.</li>\n<li>Yay - no more <code>yield</code> statements! Read and figure out code.</li>\n<li>Compare function to original definition.</li>\n</ol>\n\n<p>This trick may give you an idea of the logic behind the function, but what actually happens with <code>yield</code> is significantly different that what happens in the list based approach. In many cases the yield approach will be a lot more memory efficient and faster too. In other cases this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...</p>\n\n<h2>Don't confuse your Iterables, Iterators and Generators</h2>\n\n<p>First, the <strong>iterator protocol</strong> - when you write</p>\n\n<pre><code>for x in mylist:\n    ...loop body...\n</code></pre>\n\n<p>Python performs the following two steps:</p>\n\n<ol>\n<li><p>Gets an iterator for <code>mylist</code>:</p>\n\n<p>Call <code>iter(mylist)</code> -&gt; this returns an object with a <code>next()</code> method (or <code>__next__()</code> in Python 3).</p>\n\n<p>[This is the step most people forget to tell you about]</p></li>\n<li><p>Uses the iterator to loop over items:</p>\n\n<p>Keep calling the <code>next()</code> method on the iterator returned from step 1. The return value from <code>next()</code> is assigned to <code>x</code> and the loop body is executed. If an exception <code>StopIteration</code> is raised from within <code>next()</code>, it means there are no more values in the iterator and the loop is exited.</p></li>\n</ol>\n\n<p>The truth is Python performs the above two steps anytime it wants to <em>loop over</em> the contents of an object - so it could be a for loop, but it could also be code like <code>otherlist.extend(mylist)</code> (where <code>otherlist</code> is a Python list).</p>\n\n<p>Here <code>mylist</code> is an <em>iterable</em> because it implements the iterator protocol. In a user defined class, you can implement the <code>__iter__()</code> method to make instances of your class iterable. This method should return an <em>iterator</em>. An iterator is an object with a <code>next()</code> method. It is possible to implement both <code>__iter__()</code> and <code>next()</code> on the same class, and have <code>__iter__()</code> return <code>self</code>. This will work for simple cases, but not when you want two iterators looping over the same object at the same time.</p>\n\n<p>So that's the iterator protocol, many objects implement this protocol:</p>\n\n<ol>\n<li>Built-in lists, dictionaries, tuples, sets, files.</li>\n<li>User defined classes that implement <code>__iter__()</code>.</li>\n<li>Generators.</li>\n</ol>\n\n<p>Note that a <code>for</code> loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls <code>next()</code>. Built-in lists return their items one by one, dictionaries return the <em>keys</em> one by one, files return the <em>lines</em> one by one, etc. And generators return... well that's where <code>yield</code> comes in:</p>\n\n<pre><code>def f123():\n    yield 1\n    yield 2\n    yield 3\n\nfor item in f123():\n    print item\n</code></pre>\n\n<p>Instead of <code>yield</code> statements, if you had three <code>return</code> statements in <code>f123()</code> only the first would get executed, and the function would exit. But <code>f123()</code> is no ordinary function. When <code>f123()</code> is called, it <em>does not</em> return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the <code>for</code> loop tries to loop over the generator object, the function resumes from its suspended state, runs until the next <code>yield</code> statement and returns that as the next item. This happens until the function exits, at which point the generator raises <code>StopIteration</code>, and the loop exits. </p>\n\n<p>So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing <code>__iter__()</code> and <code>next()</code> methods to keep the <code>for</code> loop happy. At the other end however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.</p>\n\n<h2>Why Use Generators?</h2>\n\n<p>Usually you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class <code>SomethingIter</code> that keeps state in instance members and performs the next logical step in it's <code>next()</code> (or <code>__next__()</code> in Python 3) method. Depending on the logic, the code inside the <code>next()</code> method may end up looking very complex and be prone to bugs. Here generators provide a clean and easy solution.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Think of it this way:</p>\n\n<p>An iterator is just a fancy sounding term for an object that has a next() method.  So a yield-ed function ends up being something like this:</p>\n\n<p>Original version:</p>\n\n<pre><code>def some_function():\n    for i in xrange(4):\n        yield i\n\nfor i in some_function():\n    print i\n</code></pre>\n\n<p>This is basically what the python interpreter does with the above code:</p>\n\n<pre><code>class it:\n    def __init__(self):\n        #start at -1 so that we get 0 when we add 1 below.\n        self.count = -1\n    #the __iter__ method will be called once by the for loop.\n    #the rest of the magic happens on the object returned by this method.\n    #in this case it is the object itself.\n    def __iter__(self):\n        return self\n    #the next method will be called repeatedly by the for loop\n    #until it raises StopIteration.\n    def next(self):\n        self.count += 1\n        if self.count &lt; 4:\n            return self.count\n        else:\n            #a StopIteration exception is raised\n            #to signal that the iterator is done.\n            #This is caught implicitly by the for loop.\n            raise StopIteration \n\ndef some_func():\n    return it()\n\nfor i in some_func():\n    print i\n</code></pre>\n\n<p>For more insight as to what's happening behind the scenes, the for loop can be rewritten to this:</p>\n\n<pre><code>iterator = some_func()\ntry:\n    while 1:\n        print iterator.next()\nexcept StopIteration:\n    pass\n</code></pre>\n\n<p>Does that make more sense or just confuse you more?  :)</p>\n\n<p><strong>EDIT:</strong> I should note that this IS an oversimplification for illustrative purposes.  :)</p>\n\n<p><strong>EDIT 2:</strong> Forgot to throw the StopIteration exception</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>yield</code> keyword is reduced to two simple facts:</p>\n\n<ol>\n<li>If the compiler detects the <code>yield</code> keyword <em>anywhere</em> inside a function, that function no longer returns via the <code>return</code> statement. <strong><em>Instead</em></strong>, it <strong>immediately</strong> returns a <strong>lazy \"pending list\" object</strong> called a generator</li>\n<li>A generator is iterable. What is an <em>iterable</em>? It's anything like a <code>list</code> or <code>set</code> or <code>range</code> or dict-view, with a <em>built-in protocol for visiting each element in a certain order</em>.</li>\n</ol>\n\n<p>In a nutshell: <strong>a generator is a lazy, incrementally-pending list</strong>, and <strong><code>yield</code> statements allow you to use function notation to program the list values</strong> the generator should incrementally spit out.</p>\n\n<pre><code>generator = myYieldingFunction(...)\nx = list(generator)\n\n   generator\n       v\n[x[0], ..., ???]\n\n         generator\n             v\n[x[0], x[1], ..., ???]\n\n               generator\n                   v\n[x[0], x[1], x[2], ..., ???]\n\n                       StopIteration exception\n[x[0], x[1], x[2]]     done\n\nlist==[x[0], x[1], x[2]]\n</code></pre>\n\n<hr>\n\n<h2>Example</h2>\n\n<p>Let's define a function <code>makeRange</code> that's just like Python's <code>range</code>. Calling <code>makeRange(n)</code> RETURNS A GENERATOR:</p>\n\n<pre><code>def makeRange(n):\n    # return 0,1,2,...,n-1\n    i = 0\n    while i &lt; n:\n        yield i\n        i += 1\n\n&gt;&gt;&gt; makeRange(5)\n&lt;generator object makeRange at 0x19e4aa0&gt;\n</code></pre>\n\n<p>To force the generator to immediately return its pending values, you can pass it into <code>list()</code> (just like you could any iterable):</p>\n\n<pre><code>&gt;&gt;&gt; list(makeRange(5))\n[0, 1, 2, 3, 4]\n</code></pre>\n\n<hr>\n\n<h2>Comparing example to \"just returning a list\"</h2>\n\n<p>The above example can be thought of as merely creating a list which you append to and return:</p>\n\n<pre><code># list-version                   #  # generator-version\ndef makeRange(n):                #  def makeRange(n):\n    \"\"\"return [0,1,2,...,n-1]\"\"\" #~     \"\"\"return 0,1,2,...,n-1\"\"\"\n    TO_RETURN = []               #&gt;\n    i = 0                        #      i = 0\n    while i &lt; n:                 #      while i &lt; n:\n        TO_RETURN += [i]         #~         yield i\n        i += 1                   #      i += 1\n    return TO_RETURN             #&gt;\n\n&gt;&gt;&gt; makeRange(5)\n[0, 1, 2, 3, 4]\n</code></pre>\n\n<p>There is one major difference though; see the last section.</p>\n\n<hr>\n\n<h2>How you might use generators</h2>\n\n<p>An iterable is the last part of a list comprehension, and all generators are iterable, so they're often used like so:</p>\n\n<pre><code>#                   _ITERABLE_\n&gt;&gt;&gt; [x+10 for x in makeRange(5)]\n[10, 11, 12, 13, 14]\n</code></pre>\n\n<p>To get a better feel for generators, you can play around with the <code>itertools</code> module (be sure to use <code>chain.from_iterable</code> rather than <code>chain</code> when warranted). For example, you might even use generators to implement infinitely-long lazy lists like <code>itertools.count()</code>. You could implement your own <code>def enumerate(iterable): zip(count(), iterable)</code>, or alternatively do so with the <code>yield</code> keyword in a while-loop.</p>\n\n<p>Please note: generators can actually be used for many more things, such as <a href=\"http://www.dabeaz.com/coroutines/index.html\">implementing coroutines</a> or non-deterministic programming or other elegant things. However, the \"lazy lists\" viewpoint I present here is the most common use you will find.</p>\n\n<hr>\n\n<h2>Behind the scenes</h2>\n\n<p>This is how the \"Python iteration protocol\" works. That is, what is going on when you do <code>list(makeRange(5))</code>. This is what I describe earlier as a \"lazy, incremental list\".</p>\n\n<pre><code>&gt;&gt;&gt; x=iter(range(5))\n&gt;&gt;&gt; next(x)\n0\n&gt;&gt;&gt; next(x)\n1\n&gt;&gt;&gt; next(x)\n2\n&gt;&gt;&gt; next(x)\n3\n&gt;&gt;&gt; next(x)\n4\n&gt;&gt;&gt; next(x)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>The built-in function <code>next()</code> just calls the objects <code>.next()</code> function, which is a part of the \"iteration protocol\" and is found on all iterators. You can manually use the <code>next()</code> function (and other parts of the iteration protocol) to implement fancy things, usually at the expense of readability, so try to avoid doing that...</p>\n\n<hr>\n\n<h2>Minutiae</h2>\n\n<p>Normally, most people would not care about the following distinctions and probably want to stop reading here.</p>\n\n<p>In Python-speak, an <em>iterable</em> is any object which \"understands the concept of a for-loop\" like a list <code>[1,2,3]</code>, and an <em>iterator</em> is a specific instance of the requested for-loop like <code>[1,2,3].__iter__()</code>. A <em>generator</em> is exactly the same as any iterator, except for the way it was written (with function syntax).</p>\n\n<p>When you request an iterator from a list, it creates a new iterator. However, when you request an iterator from an iterator (which you would rarely do), it just gives you a copy of itself.</p>\n\n<p>Thus, in the unlikely event that you are failing to do something like this...</p>\n\n<pre><code>&gt; x = myRange(5)\n&gt; list(x)\n[0, 1, 2, 3, 4]\n&gt; list(x)\n[]\n</code></pre>\n\n<p>... then remember that a generator is an <em>iterator</em>; that is, it is one-time-use. If you want to reuse it, you should call <code>myRange(...)</code> again. If you need to use the result twice, convert the result to a list and store it in a variable <code>x = list(myRange(5))</code>. Those who absolutely need to clone a generator (for example, who are doing terrifyingly hackish metaprogramming) can use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.tee\"><code>itertools.tee</code></a> if absolutely necessary, since the copyable iterator Python <a href=\"http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development\">PEP</a> standards proposal has been deferred.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I feel like I post a link to this presentation every day:  David M. Beazly's <a href=\"http://www.dabeaz.com/generators/\">Generator Tricks for Systems Programmers</a>.  If you're a Python programmer and you're not extremely familiar with generators, you should read this.  It's a very clear explanation of what generators are, how they work, what the yield statement does, and it answers the question \"Do you really want to mess around with this obscure language feature?\"  </p>\n\n<p>SPOILER ALERT.  The answer is:  Yes.  Yes, you do.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's one extra thing to mention: a function that yields doesn't actually have to terminate. I've written code like this:</p>\n\n<pre><code>def fib():\n    last, cur = 0, 1\n    while True: \n        yield cur\n        last, cur = cur, last + cur\n</code></pre>\n\n<p>Then I can use it in other code like this:</p>\n\n<pre><code>for f in fib():\n    if some_condition: break\n    coolfuncs(f);\n</code></pre>\n\n<p>It really helps simplify some problems, and makes some things easier to work with. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>yield is just like return.  It returns whatever you tell it to.  The only difference is that the next time you call the function, execution starts from the last call to the yield statement.</p>\n\n<p>In the case of your code, the function <code>get_child_candidates</code> is acting like an iterator so that when you extend your list, it adds one element at a time to the new list.</p>\n\n<p>list.extend calls an iterator until it's exhausted.  In the case of the code sample you posted, it would be much clearer to just return a tuple and append that to the list.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yield gives you a generator. </p>\n\n<pre><code>def get_odd_numbers(i):\n    return range(1, i, 2)\ndef yield_odd_numbers(i):\n    for x in range(1, i, 2):\n       yield x\nfoo = get_odd_numbers(10)\nbar = yield_odd_numbers(10)\nfoo\n[1, 3, 5, 7, 9]\nbar\n&lt;generator object yield_odd_numbers at 0x1029c6f50&gt;\nbar.next()\n1\nbar.next()\n3\nbar.next()\n5\n</code></pre>\n\n<p>As you can see, in the first case foo holds the entire list in memory at once. It's not a big deal for a list with 5 elements, but what if you want a list of 5 million? Not only is this a huge memory eater, it also costs a lot of time to build at the time that the function is called. In the second case, bar just gives you a generator. A generator is an iterable--which means you can use it in a for loop, etc, but each value can only be accessed once. All the values are also not stored in memory at the same time; the generator object \"remembers\" where it was in the looping the last time you called it--this way, if you're using an iterable to (say) count to 50 billion, you don't have to count to 50 billion all at once and store the 50 billion numbers to count through. Again, this is a pretty contrived example, you probably would use itertools if you really wanted to count to 50 billion. :)</p>\n\n<p>This is the most simple use case of generators. As you said, it can be used to write efficient permutations, using yield to push things up through the call stack instead of using some sort of stack variable. Generators can also be used for specialized tree traversal, and all manner of other things.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For those who prefer a minimal working example, meditate on this interactive <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\">Python</a> session:</p>\n\n<pre><code>&gt;&gt;&gt; def f():\n...   yield 1\n...   yield 2\n...   yield 3\n... \n&gt;&gt;&gt; g = f()\n&gt;&gt;&gt; for i in g:\n...   print i\n... \n1\n2\n3\n&gt;&gt;&gt; for i in g:\n...   print i\n... \n&gt;&gt;&gt; # Note that this time nothing was printed\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's returning a generator. I'm not particularly familiar with Python, but I believe it's the same kind of thing as <a href=\"http://csharpindepth.com/Articles/Chapter11/StreamingAndIterators.aspx\">C#'s iterator blocks</a> if you're familiar with those.</p>\n\n<p>There's an <a href=\"http://www.ibm.com/developerworks/library/l-pycon.html\">IBM article</a> which explains it reasonably well (for Python) as far as I can see.</p>\n\n<p>The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - <em>as if the generator method was paused</em>. Now obviously you can't really \"pause\" a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An example in plain language. I will provide a correspondence between high-level human concepts to low-level python concepts.</p>\n\n<p>I want to operate on a sequence of numbers, but I don't want to bother my self with the creation of that sequence, I want only to focus on the operation I want to do. So, I do the following:</p>\n\n<ul>\n<li>I call you and tell you that I want a sequence of numbers which is produced in a specific way, and I let you know what the algorithm is.<br>\n<b>This step corresponds to <code>def</code>ining the generator function, i.e. the function containing a <code>yield</code>.</b></li>\n<li>Sometime later, I tell you, \"ok, get ready to tell me the sequence of numbers\".<br>\n<b>This step corresponds to calling the generator function which returns a generator object.</b> Note that you don't tell me any numbers yet, you just grab your paper and pencil.</li>\n<li>I ask you, \"tell me the next number\", and you tell me the first number; after that, you wait for me to ask you for the next number. It's your job to remember where you were, what numbers you have already said, what is the next number. I don't care about the details.<br>\n<b>This step corresponds to calling <code>.next()</code> on the generator object.</b></li>\n<li>\u2026 repeat previous step, until\u2026</li>\n<li>eventually, you might come to an end. You don't tell me a number, you just shout, \"hold your horses! I'm done! No more numbers!\"<br>\n<b>This step corresponds to the generator object ending its job, and raising a <code>StopIteration</code> exception</b> The generator function does not need to raise the exception, it's raised automatically when the function ends or issues a <code>return</code>.</li>\n</ul>\n\n<p>This is what a generator does (a function that contains a <code>yield</code>); it starts executing, pauses whenever it does a <code>yield</code>, and when asked for a <code>.next()</code> value it continues from the point it was last. It fits perfectly by design with the iterator protocol of python, which describes how to sequentially request for values.</p>\n\n<p>The most famous user of the iterator protocol is the <code>for</code> command in python. So, whenever you do a:</p>\n\n<pre><code>for item in sequence:\n</code></pre>\n\n<p>it doesn't matter if <code>sequence</code> is a list, a string, a dictionary or a generator <em>object</em> like described above; the result is the same: you read items off a sequence one by one.</p>\n\n<p>Note that <code>def</code>ining a function which contains a <code>yield</code> keyword is not the only way to create a generator; it's just the easiest way to create one.</p>\n\n<p>For more accurate information, read about <a href=\"http://docs.python.org/library/stdtypes.html#iterator-types\">iterator types</a>, the <a href=\"http://docs.python.org/reference/simple_stmts.html#yield\">yield statement</a> and <a href=\"http://docs.python.org/glossary.html#term-generator\">generators</a> in the Python documentation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is one type of answer that I don't feel has been given yet, among the many great answers that describe how to use generators.  Here is the PL theory answer:</p>\n\n<p>The <code>yield</code> statement in python returns a generator.  A generator in python is a function that returns <i>continuations</i> (and specifically a type of coroutine, but continuations represent the more general mechanism to understand what is going on).</p>\n\n<p>Continuations in programming languages theory are a much more fundamental kind of computation, but they are not often used because they are extremely hard to reason about and also very difficult to implement.  But the idea of what a continuation is, is straightforward: it is the state of a computation that has not yet finished. In this state are saved the current values of variables and the operations that have yet to be performed, and so on. Then at some point later in the program the continuation can be invoked, such that the program's variables are reset to that state and the operations that were saved are carried out.</p>\n\n<p>Continuations, in this more general form, can be implemented in two ways. In the <code>call/cc</code> way, the program's stack is literally saved and then when the continuation is invoked, the stack is restored.</p>\n\n<p>In continuation passing style (CPS), continuations are just normal functions (only in languages where functions are first class) which the programmer explicitly manages and passes around to subroutines. In this style, program state is represented by closures (and the variables that happen to be encoded in them) rather than variables that reside somewhere on the stack. Functions that manage control flow accept continuation as arguments (in some variations of CPS, functions may accept multiple continuations) and manipulate control flow by invoking them by simply calling them and returning afterwards. A very simple example of continuation passing style is as follows:</p>\n\n<pre><code>def save_file(filename):\n  def write_file_continuation():\n    write_stuff_to_file(filename)\n\n  check_if_file_exists_and_user_wants_to_overwrite( write_file_continuation )\n</code></pre>\n\n<p>In this (very simplistic) example, the programmer saves the operation of actually writing the file into a continuation (which can potentially be a very complex operation with many details to write out), and then passes that continuation (i.e, as a first-class closure) to another operator which does some more processing, and then calls it if necessary. (I use this design pattern a lot in actual GUI programming, either because it saves me lines of code or, more importantly, to manage control flow after GUI events trigger)</p>\n\n<p>The rest of this post will, without loss of generality, conceptualize continuations as CPS, because it is a hell of a lot easier to understand and read.</p>\n\n<p><br></p>\n\n<p>Now let's talk about generators in python. Generators are a specific subtype of continuation. Whereas <strong>continuations are able in general to save the state of a <em>computation</em></strong> (i.e., the program's call stack), <strong>generators are only able to save the state of iteration over an <em>iterator</em></strong>. Although, this definition is slightly misleading for certain use cases of generators. For instance:</p>\n\n<pre><code>def f():\n  while True:\n    yield 4\n</code></pre>\n\n<p>This is clearly a reasonable iterable whose behavior is well defined -- each time the generator iterates over it, it returns 4 (and does so forever). But it isn't probably the prototypical type of iterable that comes to mind when thinking of iterators (i.e., <code>for x in collection: do_something(x)</code>). This example illustrates the power of generators: if anything is an iterator, a generator can save the state of its iteration.</p>\n\n<p>To reiterate: Continuations can save the state of a program's stack and generators can save the state of iteration. This means that continuations are more a lot powerful than generators, but also that generators are a lot, lot easier. They are easier for the language designer to implement, and they are easier for the programmer to use (if you have some time to burn, try to read and understand <a href=\"http://www.madore.org/~david/computers/callcc.html\" rel=\"nofollow\">this page about continuations and call/cc</a>).</p>\n\n<p>But you could easily implement (and conceptualize) generators as a simple, specific case of continuation passing style: </p>\n\n<p>Whenever <code>yield</code> is called, it tells the function to return a continuation.  When the function is called again, it starts from wherever it left off. So, in pseudo-pseudocode  (i.e., not pseudocode but not code) the generator's <code>next</code> method is basically as follows: </p>\n\n<pre><code>class Generator():\n  def __init__(self,iterable,generatorfun):\n    self.next_continuation = lambda:generatorfun(iterable)\n\n  def next(self):\n    value, next_continuation = self.next_continuation()\n    self.next_continuation = next_continuation\n    return value\n</code></pre>\n\n<p>where <code>yield</code> keyword is actually syntactic sugar for the real generator function, basically something like:</p>\n\n<pre><code>def generatorfun(iterable):\n  if len(iterable) == 0:\n    raise StopIteration\n  else:\n    return (iterable[0], lambda:generatorfun(iterable[1:]))\n</code></pre>\n\n<p>Remember that this is just pseudocode and the actual implementation of generators in python is more complex. But as an exercise to understand what is going on, try to use continuation passing style to implement generator objects without use of the <code>yield</code> keyword.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>What does the <code>yield</code> keyword do in Python?</strong></p>\n</blockquote>\n\n<h2>Answer Outline/Summary</h2>\n\n<ul>\n<li><strong><code>yield</code></strong> makes a function definition that <strong>returns a generator.</strong></li>\n<li>Generators implement the <strong>iterator protocol</strong>, so you can iterate over them.</li>\n<li>The generator can also be <strong>sent information</strong>, making it conceptually a <strong>coroutine</strong>.</li>\n<li>In Python 3, you can <strong>delegate</strong> from one generator to another in both directions with <strong><code>yield from</code></strong>.</li>\n</ul>\n\n<h2>Generators:</h2>\n\n<p><strong><code>yield</code></strong> is only legal inside of a function definition, and <strong>the inclusion of <code>yield</code> in a function definition makes it return a generator.</strong></p>\n\n<p>The idea for generators comes from other languages (see footnote 1) with varying implementations. In Python's Generators, the execution of the code is <a href=\"https://docs.python.org/3.5/glossary.html#term-generator-iterator\" rel=\"nofollow\">frozen</a> at the point of the yield. When the generator is called (methods are discussed below) execution resumes and then freezes at the next yield.</p>\n\n<p><code>yield</code> provides an \neasy way of <a href=\"https://docs.python.org/2/library/stdtypes.html#generator-types\" rel=\"nofollow\">implementing the iterator protocol</a>, defined by the following two methods: \n<code>__iter__</code> and <code>next</code> (Python 2) or <code>__next__</code> (Python 3).  Both of those methods\nmake an object an iterator that you could type-check with the <code>Iterator</code> Abstract Base \nClass from the <code>collections</code> module.</p>\n\n<pre><code>&gt;&gt;&gt; def gen():\n...     yield 'I am'\n...     yield 'a generator!'\n... \n&gt;&gt;&gt; g = gen()\n&gt;&gt;&gt; hasattr(g, '__iter__')\nTrue\n&gt;&gt;&gt; hasattr(g, 'next')\nTrue \n&gt;&gt;&gt; import collections \n&gt;&gt;&gt; isinstance(g, collections.Iterator)\nTrue   \n</code></pre>\n\n<p>A feature of an <code>Iterator</code> <a href=\"https://docs.python.org/2/glossary.html#term-iterator\" rel=\"nofollow\">is that once exhausted</a>, you can't reuse or reset it:</p>\n\n<pre><code>&gt;&gt;&gt; list(g)\n['I am', 'a generator!']\n&gt;&gt;&gt; list(g)\n[]\n</code></pre>\n\n<p>You'll have to make another if you want to use its functionality again (see footnote 2):</p>\n\n<pre><code>&gt;&gt;&gt; list(gen())\n['I am', 'a generator!']\n</code></pre>\n\n<p>One can yield data programmatically, for example:</p>\n\n<pre><code>def gen(an_iterable):\n    for item in an_iterable:\n        yield item\n</code></pre>\n\n<p>The above simple generator is also equivalent to the below - as of Python 3.3 (and not available in Python 2), you can use <a href=\"https://www.python.org/dev/peps/pep-0380/\" rel=\"nofollow\"><code>yield from</code></a>:</p>\n\n<pre><code>def gen(an_iterable):\n    yield from an_iterable\n</code></pre>\n\n<p>However, <code>yield from</code> also allows for delegation to subgenerators, \nwhich will be explained in the following section on cooperative delegation with sub-coroutines.</p>\n\n<h2>Coroutines:</h2>\n\n<p><code>yield</code> forms an expression that allows data to be sent into the generator (see footnote 3)</p>\n\n<p>Here is an example, take note of the <code>received</code> variable, which will point to the data that is sent to the generator:</p>\n\n<pre><code>def bank_account(deposited, interest_rate):\n    while True:\n        calculated_interest = interest_rate * deposited \n        received = yield calculated_interest\n        if received:\n            deposited += received\n\n\n&gt;&gt;&gt; my_account = bank_account(1000, .05)\n</code></pre>\n\n<p>First, we must queue up the generator with the builtin function, <a href=\"https://docs.python.org/2/library/functions.html#next\" rel=\"nofollow\"><code>next</code></a>. It will \ncall the appropriate <code>next</code> or <code>__next__</code> method, depending on the version of\nPython you are using:</p>\n\n<pre><code>&gt;&gt;&gt; first_year_interest = next(my_account)\n&gt;&gt;&gt; first_year_interest\n50.0\n</code></pre>\n\n<p>And now we can send data into the generator. (<a href=\"https://www.python.org/dev/peps/pep-0342/\" rel=\"nofollow\">Sending <code>None</code> is \nthe same as calling <code>next</code></a>.) :</p>\n\n<pre><code>&gt;&gt;&gt; next_year_interest = my_account.send(first_year_interest + 1000)\n&gt;&gt;&gt; next_year_interest\n102.5\n</code></pre>\n\n<h3>Cooperative Delegation to Sub-Coroutine with <code>yield from</code></h3>\n\n<p>Now, recall that <code>yield from</code> is available in Python 3. This allows us to delegate\ncoroutines to a subcoroutine:</p>\n\n<pre><code>def money_manager(expected_rate):\n    under_management = yield     # must receive deposited value\n    while True:\n        try:\n            additional_investment = yield expected_rate * under_management \n            if additional_investment:\n                under_management += additional_investment\n        except GeneratorExit:\n            '''TODO: write function to send unclaimed funds to state'''\n        finally:\n            '''TODO: write function to mail tax info to client'''\n\n\ndef investment_account(deposited, manager):\n    '''very simple model of an investment account that delegates to a manager'''\n    next(manager) # must queue up manager\n    manager.send(deposited)\n    while True:\n        try:\n            yield from manager\n        except GeneratorExit:\n            return manager.close()\n</code></pre>\n\n<p>And now we can delegate functionality to a sub-generator and it can be used\nby a generator just as above:</p>\n\n<pre><code>&gt;&gt;&gt; my_manager = money_manager(.06)\n&gt;&gt;&gt; my_account = investment_account(1000, my_manager)\n&gt;&gt;&gt; first_year_return = next(my_account)\n&gt;&gt;&gt; first_year_return\n60.0\n&gt;&gt;&gt; next_year_return = my_account.send(first_year_return + 1000)\n&gt;&gt;&gt; next_year_return\n123.6\n</code></pre>\n\n<p>You can read more about the precise semantics of <code>yield from</code> in <a href=\"https://www.python.org/dev/peps/pep-0380/#formal-semantics\" rel=\"nofollow\">PEP 380.</a></p>\n\n<h3>Other Methods: close and throw</h3>\n\n<p>The <code>close</code> method raises <code>GeneratorExit</code> at the point the function \nexecution was frozen. This will also be called by <code>__del__</code> so you \ncan put any cleanup code where you handle the <code>GeneratorExit</code>:</p>\n\n<pre><code>&gt;&gt;&gt; my_account.close()\n</code></pre>\n\n<p>You can also throw an exception which can be handled in the generator\nor propagated back to the user:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; try:\n...     raise ValueError\n... except:\n...     my_manager.throw(*sys.exc_info())\n... \nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 4, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nValueError\n</code></pre>\n\n<h2>Conclusion</h2>\n\n<p>I believe I have covered all aspects of the following question:</p>\n\n<blockquote>\n  <p><strong>What does the <code>yield</code> keyword do in Python?</strong></p>\n</blockquote>\n\n<p>It turns out that <code>yield</code> does a lot. I'm sure I could add even more \nthorough examples to this. If you want more or have some constructive criticism, let me know by commenting\nbelow.</p>\n\n<hr>\n\n<h2>Appendix:</h2>\n\n<h3>Critique of the Top/Accepted Answer**</h3>\n\n<ul>\n<li>It is confused on what makes an <strong>iterable</strong>, just using a list as an example. See my references above, but in summary: an iterable has an <code>__iter__</code> method returning an <strong>iterator</strong>. An <strong>iterator</strong> provides a <code>.next</code> (Python 2 or <code>.__next__</code> (Python 3) method, which is implicitly called by <code>for</code> loops until it raises <code>StopIteration</code>, and once it does, it will continue to do so.</li>\n<li>It then uses a generator expression to describe what a generator is. Since a generator is simply a convenient way to create an <strong>iterator</strong>, it only confuses the matter, and we still have not yet gotten to the <code>yield</code> part.</li>\n<li>In <strong>Controlling a generator exhaustion</strong> he calls the <code>.next</code> method, when instead he should use the builtin function, <code>next</code>. It would be an appropriate layer of indirection, because his code does not work in Python 3.</li>\n<li>Itertools? This was not relevant to what <code>yield</code> does at all.</li>\n<li>No discussion of the methods that <code>yield</code> provides along with the new functionality <code>yield from</code> in Python 3. <strong>The top/accepted answer is a very incomplete answer.</strong></li>\n</ul>\n\n<h3>Footnotes</h3>\n\n<ol>\n<li><p><sub>The languages CLU, Sather, and Icon were referenced in the proposal\nto introduce the concept of generators to Python. The general idea is\nthat a function can maintain internal state and yield intermediate \ndata points on demand by the user. This promised to be <a href=\"https://www.python.org/dev/peps/pep-0255/\" rel=\"nofollow\">superior in performance \nto other approaches, including Python threading</a>, which isn't even available on some systems.</sub></p></li>\n<li><p><sub> This means, for example, that <code>xrange</code> objects (<code>range</code> in Python 3) aren't <code>Iterator</code>s, even though they are iterable, because they can be reused. Like lists, their <code>__iter__</code> methods return iterator objects.</sub></p></li>\n<li><p><sub> \n<code>yield</code> was originally introduced as a statement, meaning that it \ncould only appear at the beginning of a line in a code block. \nNow <code>yield</code> creates a yield expression. \n<a href=\"https://docs.python.org/2/reference/simple_stmts.html#grammar-token-yield_stmt\" rel=\"nofollow\">https://docs.python.org/2/reference/simple_stmts.html#grammar-token-yield_stmt</a> \nThis change was <a href=\"https://www.python.org/dev/peps/pep-0342/\" rel=\"nofollow\">proposed</a> to allow a user to send data into the generator just as\none might receive it. To send data, one must be able to assign it to something, and\nfor that, a statement just won't work.</sub></p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While a lot of answers show why you'd use a <code>yield</code> to create a generator, there are more uses for <code>yield</code>.  It's quite easy to make a coroutine, which enables the passing of information between two blocks of code.  I won't repeat any of the fine examples that have already been given about using <code>yield</code> to create a generator.</p>\n\n<p>To help understand what a <code>yield</code> does in the following code, you can use your finger to trace the cycle through any code that has a <code>yield</code>.  Every time your finger hits the <code>yield</code>, you have to wait for a <code>next</code> or a <code>send</code> to be entered.  When a <code>next</code> is called, you trace through the code until you hit the <code>yield</code>\u2026 the code on the right of the <code>yield</code> is evaluated and returned to the caller\u2026 then you wait.  When <code>next</code> is called again, you perform another loop through the code.  However, you'll note that in a coroutine, <code>yield</code> can also be used with a <code>send</code>\u2026 which will send a value from the caller <em>into</em> the yielding function. If a <code>send</code> is given, then <code>yield</code> receives the value sent, and spits it out the left hand side\u2026 then the trace through the code progresses until you hit the <code>yield</code> again (returning the value at the end, as if <code>next</code> was called).</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; def coroutine():\n...     i = -1\n...     while True:\n...         i += 1\n...         val = (yield i)\n...         print(\"Received %s\" % val)\n...\n&gt;&gt;&gt; sequence = coroutine()\n&gt;&gt;&gt; sequence.next()\n0\n&gt;&gt;&gt; sequence.next()\nReceived None\n1\n&gt;&gt;&gt; sequence.send('hello')\nReceived hello\n2\n&gt;&gt;&gt; sequence.close()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I was going to post \"read page 19 of Beazley's 'Python: Essential Reference' for a quick description of generators\", but so many others have posted good descriptions already.</p>\n\n<p>Also, note that <code>yield</code> can be used in coroutines as the dual of their use in generator functions.  Although it isn't the same use as your code snippet, <code>(yield)</code> can be used as an expression in a function.  When a caller sends a value to the method using the <code>send()</code> method, then the coroutine will execute until the next <code>(yield)</code> statement is encountered.</p>\n\n<p>Generators and coroutines are a cool way to set up data-flow type applications.  I thought it would be worthwhile knowing about the other use of the <code>yield</code> statement in functions.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here are some <a href=\"https://github.com/dustingetz/sandbox/blob/master/etc/lazy.py\">Python examples of how to actually implement generators</a> as if Python did not provide syntactic sugar for them (or in a language without native syntax, like <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>). Snippets from that link is below.</p>\n\n<p><strong>As a Python generator:</strong></p>\n\n<pre><code>from itertools import islice\n\ndef fib_gen():\n    a, b = 1, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nassert [1, 1, 2, 3, 5] == list(islice(fib_gen(), 5))\n</code></pre>\n\n<p><strong>Using lexical closures instead of generators</strong></p>\n\n<pre><code>def ftake(fnext, last):\n    return [fnext() for _ in xrange(last)]\n\ndef fib_gen2():\n    #funky scope due to python2.x workaround\n    #for python 3.x use nonlocal\n    def _():\n        _.a, _.b = _.b, _.a + _.b\n        return _.a\n    _.a, _.b = 0, 1\n    return _\n\nassert [1,1,2,3,5] == ftake(fib_gen2(), 5)\n</code></pre>\n\n<p><strong>Using object closures instead of generators</strong> (because <a href=\"http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent\">ClosuresAndObjectsAreEquivalent</a>)</p>\n\n<pre><code>class fib_gen3:\n    def __init__(self):\n        self.a, self.b = 1, 1\n\n    def __call__(self):\n        r = self.a\n        self.a, self.b = self.b, self.a + self.b\n        return r\n\nassert [1,1,2,3,5] == ftake(fib_gen3(), 5)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is another yield use and meaning (since python 3.3):</p>\n\n<pre><code>yield from &lt;expr&gt;\n</code></pre>\n\n<p><a href=\"http://legacy.python.org/dev/peps/pep-0380/\" rel=\"nofollow\">http://legacy.python.org/dev/peps/pep-0380/</a></p>\n\n<blockquote>\n  <p>A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing 'yield' to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.</p>\n  \n  <p>The new syntax also opens up some opportunities for optimisation when one generator re-yields values produced by another.</p>\n</blockquote>\n\n<p>moreover <a href=\"https://www.python.org/dev/peps/pep-0492/\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0492/</a> will introduce (since python 3.5):</p>\n\n<pre><code>async def new_coroutine(data):\n   ...\n   await blocking_action()\n</code></pre>\n\n<p>to avoid confuse coroutines with regular generator (today <code>yield</code> is used in both).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>here is simple example with result:</p>\n\n<pre><code>def isPrimeNumber(n):\n        print \"isPrimeNumber({}) call\".format(n)\n        if n==1:\n            return False\n        for x in range(2,n):\n            if n % x == 0:\n                return False\n        return True\n\n\ndef primes (n=1):\n        while(True):\n            print \"loop step ---------------- {}\".format(n)\n            if isPrimeNumber(n): yield n\n            n += 1\n\nfor n in primes():\n        if n&gt; 10:break\n        print \"wiriting result {}\".format(n)   \n</code></pre>\n\n<p>output :</p>\n\n<pre><code>loop step ---------------- 1\nisPrimeNumber(1) call\nloop step ---------------- 2\nisPrimeNumber(2) call\nloop step ---------------- 3\nisPrimeNumber(3) call\nwiriting result 3\nloop step ---------------- 4\nisPrimeNumber(4) call\nloop step ---------------- 5\nisPrimeNumber(5) call\nwiriting result 5\nloop step ---------------- 6\nisPrimeNumber(6) call\nloop step ---------------- 7\nisPrimeNumber(7) call\nwiriting result 7\nloop step ---------------- 8\nisPrimeNumber(8) call\nloop step ---------------- 9\nisPrimeNumber(9) call\nloop step ---------------- 10\nisPrimeNumber(10) call\nloop step ---------------- 11\nisPrimeNumber(11) call\n</code></pre>\n\n<p>I am not an python developer but it looks to me \"yield\"  holds the position of program flow and next time  loop start from \"yield\" position. Seems like waiting at that position and just before that returning value outside and next time continue to work.</p>\n\n<p>Seems to me interesting and nice ability :D </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a mental image of what <code>yield</code> does.</p>\n\n<p>I like to think of a thread as having a stack (even if it's not implemented that way).</p>\n\n<p>When a normal function is called, it puts its local variables on the stack, does some computation, returns and clears the stack. The values of its local variables are never seen again.</p>\n\n<p>With a <code>yield</code> function, when it's called first, it similarly adds its local variables to the stack, but then takes its local variables to a special hideaway instead of clearing them, when it returns via <code>yield</code>. A possible place to put them would be somewhere in the heap.</p>\n\n<p>Note that it's not <em>the function</em> any more, it's a kind of an imprint or ghost of the function that the <code>for</code> loop is hanging onto.</p>\n\n<p>When it is called again, it retrieves its local variables from its special hideaway and puts them back on the stack and computes, then hides them again in the same way.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From a programming viewpoint, the iterators are implemented as <strong>thunks</strong> </p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Thunk_(functional_programming)\">http://en.wikipedia.org/wiki/Thunk_(functional_programming)</a></p>\n\n<p>To implement thunks (also called anonymous functions), one uses messages sent to a closure object, which has a dispatcher, and the dispatcher answers to \"messages\".</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Message_passing\">http://en.wikipedia.org/wiki/Message_passing</a></p>\n\n<p>\"<em>next</em>\" is a message sent to a closure, created by \"<em>iter</em>\" call.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>yield</code> is like a return element for a function. The difference is, that the <code>yield</code> element turns a function into a generator. A generator behaves just like a function until something is 'yielded'. The generator stops until it is next called, and continues from exactly the same point as it started. You can get a sequence of all the 'yielded' values in one, by calling <code>list(generator())</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Like every answer suggests, yield is used for creating a sequence generator. It's used for generating some sequence dynamically. Eg. while reading a file line by line on a network, you can use the yield function as follows :-</p>\n\n<pre><code>def getNextLines():\n   while con.isOpen():\n       yield con.read()\n</code></pre>\n\n<p>You can use it in your code as follows :</p>\n\n<pre><code>for line in getNextLines():\n    doSomeThing(line)\n</code></pre>\n\n<p><strong><em>Execution Control Transfer gotcha</em></strong></p>\n\n<p>The execution control will be transferred from getNextLines() to the for loop, when yield is executed. Thus every time getNextLines() is invoked, execution begin from the point where it was paused last time.</p>\n\n<p>Thus in short, a function with the following code</p>\n\n<pre><code>def simpleYield():\n    yield \"first time\"\n    yield \"second time\"\n    yield \"third time\"\n    yield \"Now some useful value {}\".format(12)\n\nfor i in simpleYield():\n    print i\n</code></pre>\n\n<p>will print </p>\n\n<pre><code>\"first time\"\n\"second time\"\n\"third time\"\n\"Now some useful value 12\"\n</code></pre>\n\n<p>Hope, it helps you.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Yield is Object</strong></p>\n\n<p>a <code>return</code> in function will return single value.</p>\n\n<p>if you want <strong>function to return huge set of values</strong> use <code>Yield</code></p>\n\n<p>more importantly <code>Yield</code> is a <strong>barrier</strong> </p>\n\n<blockquote>\n  <p>like Barrier in Cuda Language. will not transfer control until it gets\n  completed.</p>\n</blockquote>\n\n<p>i.e</p>\n\n<p>it will run the code in your function from the beginning until it hits <code>yield</code>. then it\u2019ll return the first value of the loop. \nThen, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have various possibilities:</p>\n\n<ul>\n<li><p>You can slice it: </p>\n\n<pre><code>new_list = old_list[:]\n</code></pre>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Alex_Martelli\">Alex Martelli's</a> opinion (at least <a href=\"https://www.youtube.com/watch?v=g7V89K8QfgQ\">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>\n<li><p>You can use the built in <a href=\"https://docs.python.org/2/library/functions.html#list\"><code>list()</code></a> function:</p>\n\n<pre><code>new_list = list(old_list)\n</code></pre></li>\n<li><p>You can use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.copy\"><code>copy.copy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.copy(old_list)\n</code></pre>\n\n<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>\n<li><p>If the list contains objects and you want to copy them as well, use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.deepcopy\"><code>copy.deepcopy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.deepcopy(old_list)\n</code></pre>\n\n<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>import copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return str(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a[:]\nc = list(a)\nd = copy.copy(a)\ne = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\n slice: %r\\n list(): %r\\n copy: %r\\n deepcopy: %r'\n      % (a, b, c, d, e))\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>original: ['foo', 5, 'baz']\nslice: ['foo', 5]\nlist(): ['foo', 5]\ncopy: ['foo', 5]\ndeepcopy: ['foo', 1]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:</p>\n\n<ol>\n<li>10.59 -  <a href=\"http://docs.python.org/library/copy.html#copy.deepcopy\"><code>copy.deepcopy(old_list)</code></a></li>\n<li>10.16 - pure python <code>Copy()</code> method copying classes with deepcopy</li>\n<li>1.488 - pure python <code>Copy()</code> method not copying classes (only dicts/lists/tuples)</li>\n<li>0.325 - <code>for item in old_list: new_list.append(item)</code></li>\n<li>0.217 - <code>[i for i in old_list]</code> (a <a href=\"http://docs.python.org/tutorial/datastructures.html#list-comprehensions\">list comprehension</a>)</li>\n<li>0.186 - <a href=\"http://docs.python.org/library/copy.html#copy.copy\"><code>copy.copy(old_list)</code></a></li>\n<li>0.075 - <code>list(old_list)</code></li>\n<li>0.053 - <code>new_list = []; new_list.extend(old_list)</code></li>\n<li>0.039 - <code>old_list[:]</code> (<a href=\"http://docs.python.org/tutorial/introduction.html#lists\">list slicing</a>)</li>\n</ol>\n\n<p>So the fastest is list slicing. But be aware that <code>copy.copy()</code>, <code>list[:]</code> and <code>list(list)</code>, unlike <code>copy.deepcopy()</code> and the python version don't copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.</p>\n\n<p>(Here's the script if anyone's interested or wants to raise any issues:)</p>\n\n<pre><code>from copy import deepcopy\n\nclass old_class:\n    def __init__(self):\n        self.blah = 'blah'\n\nclass new_class(object):\n    def __init__(self):\n        self.blah = 'blah'\n\ndignore = {str: None, unicode: None, int: None, type(None): None}\n\ndef Copy(obj, use_deepcopy=True):\n    t = type(obj)\n\n    if t in (list, tuple):\n        if t == tuple:\n            # Convert to a list if a tuple to \n            # allow assigning to when copying\n            is_tuple = True\n            obj = list(obj)\n        else: \n            # Otherwise just do a quick slice copy\n            obj = obj[:]\n            is_tuple = False\n\n        # Copy each item recursively\n        for x in xrange(len(obj)):\n            if type(obj[x]) in dignore:\n                continue\n            obj[x] = Copy(obj[x], use_deepcopy)\n\n        if is_tuple: \n            # Convert back into a tuple again\n            obj = tuple(obj)\n\n    elif t == dict: \n        # Use the fast shallow dict copy() method and copy any \n        # values which aren't immutable (like lists, dicts etc)\n        obj = obj.copy()\n        for k in obj:\n            if type(obj[k]) in dignore:\n                continue\n            obj[k] = Copy(obj[k], use_deepcopy)\n\n    elif t in dignore: \n        # Numeric or string/unicode? \n        # It's immutable, so ignore it!\n        pass \n\n    elif use_deepcopy: \n        obj = deepcopy(obj)\n    return obj\n\nif __name__ == '__main__':\n    import copy\n    from time import time\n\n    num_times = 100000\n    L = [None, 'blah', 1, 543.4532, \n         ['foo'], ('bar',), {'blah': 'blah'},\n         old_class(), new_class()]\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L)\n    print 'Custom Copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L, use_deepcopy=False)\n    print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.copy(L)\n    print 'copy.copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.deepcopy(L)\n    print 'copy.deepcopy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        L[:]\n    print 'list slicing [:]:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        list(L)\n    print 'list(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        [i for i in L]\n    print 'list expression(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(L)\n    print 'list extend:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        for y in L:\n            a.append(y)\n    print 'list append:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(i for i in L)\n    print 'generator expression extend:', time()-t\n</code></pre>\n\n<p><strong>EDIT</strong>: Added new-style, old-style classes and dicts to the benchmarks, and made the python version much faster and added some more methods including list expressions and <code>extend()</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've <a href=\"http://mail.python.org/pipermail/python-ideas/2013-July/022368.html\">been told</a> that Python 3.3+ <a href=\"http://bugs.python.org/issue10516\">adds list.copy()</a> method, which should be as fast as slicing:</p>\n\n<p><code>newlist = old_list.copy()</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are many answers already that tell you how to make a proper copy, but none of them say why your original 'copy' failed. </p>\n\n<p>Python doesn't store values in variables; it binds names to objects. Your original assignment took the object referred to by <code>my_list</code> and bound it to <code>new_list</code> as well. No matter which name you use there is still only one list, so changes made when referring to it as <code>my_list</code> will persist when referring to it as <code>new_list</code>. Each of the other answers to this question give you different ways of creating a new object to bind to <code>new_list</code>. </p>\n\n<p>Each element of a list acts like a name, in that each element binds non-exclusively to an object. A shallow copy creates a new list whose elements bind to the same objects as before.</p>\n\n<pre><code>new_list = list(my_list)  # or my_list[:], but I prefer this syntax\n# is simply a shorter way of:\nnew_list = [element for element in my_list]\n</code></pre>\n\n<p>To take your list copy one step further, copy each object that your list refers to, and bind those element copies to a new list. </p>\n\n<pre><code>import copy  \n# each element must have __copy__ defined for this...\nnew_list = [copy.copy(element) for element in my_list]\n</code></pre>\n\n<p>This is not yet a deep copy, because each element of a list my refer to other objects, just like the list is an object that is bound to its elements. To recursively copy every element in the list, and then each other object referred to by each element, and so on: perform a deep copy. </p>\n\n<pre><code>import copy\n# each element must have __deepcopy__ defined for this...\nnew_list = copy.deepcopy(my_list)\n</code></pre>\n\n<p>See <a href=\"https://docs.python.org/2/library/copy.html\">the documentation</a> for more information about corner cases in copying. </p>\n\n<p>This answer is only for Python 2. I haven't upgraded to Python 3 yet. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>new_list = list(old_list)</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>What are the options to clone or copy a list in Python?</strong></p>\n</blockquote>\n\n<h2>Shallow list copy</h2>\n\n<p><strong>Python 2</strong></p>\n\n<p>A shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists. </p>\n\n<p>In Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original:</p>\n\n<pre><code>a_copy = a_list[:]\n</code></pre>\n\n<p>You can also accomplish the same thing by passing the list through the list constructor, </p>\n\n<pre><code>a_copy = list(a_list)\n</code></pre>\n\n<p>but using the constructor is less efficient:</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat('foo()', 'l = range(20) \\ndef foo():\\n  return l[:]'))\n0.2898108959197998\n&gt;&gt;&gt; min(timeit.repeat('foo()', 'l = range(20) \\ndef foo():\\n  return list(l)'))\n0.5998001098632812\n</code></pre>\n\n<p><strong>Python 3</strong></p>\n\n<p>In Python 3, lists get the <code>list.copy</code> method:</p>\n\n<pre><code>a_copy = a_list.copy()\n</code></pre>\n\n<blockquote>\n  <p><strong>Using new_list = my_list then modifies new_list every time my_list changes. Why is this?</strong></p>\n</blockquote>\n\n<p><code>my_list</code> is a pointer the actual list in memory. When you say <code>new_list = my_list</code> you're not making a copy, you're just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists. </p>\n\n<pre><code>&gt;&gt;&gt; l = [[], [], []]\n&gt;&gt;&gt; l_copy = l[:]\n&gt;&gt;&gt; l_copy\n[[], [], []]\n&gt;&gt;&gt; l_copy[0].append('foo')\n&gt;&gt;&gt; l_copy\n[['foo'], [], []]\n&gt;&gt;&gt; l\n[['foo'], [], []]\n</code></pre>\n\n<p>The list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy.</p>\n\n<h2>Deep copies</h2>\n\n<p>To make a <a href=\"https://docs.python.org/library/copy.html\">deep copy of a list, in Python 2 or 3, use <code>deepcopy</code> in the <code>copy</code> module</a>:</p>\n\n<pre><code>import copy\na_deep_copy = copy.deepcopy(a_list)\n</code></pre>\n\n<p>To demonstrate how this allows us to make new sub-lists:</p>\n\n<pre><code>&gt;&gt;&gt; import copy\n&gt;&gt;&gt; l\n[['foo'], [], []]\n&gt;&gt;&gt; l_deep_copy = copy.deepcopy(l)\n&gt;&gt;&gt; l_deep_copy[0].pop()\n'foo'\n&gt;&gt;&gt; l_deep_copy\n[[], [], []]\n&gt;&gt;&gt; l\n[['foo'], [], []]\n</code></pre>\n\n<p>And so we see that the deep copied list is an entirely different list from the original.</p>\n\n<h2>Don't use <code>eval</code></h2>\n\n<p>You may see this used as a way to deepcopy, but don't do it:</p>\n\n<pre><code>problematic_deep_copy = eval(repr(a_list))\n</code></pre>\n\n<ol>\n<li>It's dangerous, particularly if you're evaluating something from a source you don't trust.</li>\n<li>It's not reliable, if a subelement you're copying doesn't have a representation that can be eval'd to reproduce an equivalent element.</li>\n<li>It's also less performant. </li>\n</ol>\n\n<p>In 32 bit Python 2.7 on cygwin:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.repeat('copy.deepcopy(l)', 'import copy; l = range(10)')\n[15.912999868392944, 15.996999979019165, 15.919000148773193]\n&gt;&gt;&gt; timeit.repeat('eval(repr(l))', 'import copy; l = range(10)')\n[18.052000045776367, 18.0239999294281, 18.11900019645691]\n</code></pre>\n\n<p>on 64 bit Python 3.3:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.repeat('copy.deepcopy(l)', 'import copy; l = list(range(10))')\n[11.003985702905652, 10.972520866531227, 10.96550724891415]\n&gt;&gt;&gt; timeit.repeat('eval(repr(l))', 'import copy; l = list(range(10))')\n[22.22549739030643, 22.24779939634891, 22.17042170149432]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <code>thing[:]</code></p>\n\n<pre><code>&gt;&gt;&gt; a = [1,2]\n&gt;&gt;&gt; b = a[:]\n&gt;&gt;&gt; a += [3]\n&gt;&gt;&gt; a\n[1, 2, 3]\n&gt;&gt;&gt; b\n[1, 2]\n&gt;&gt;&gt; \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python's idiom for doing this is <code>newList = oldList[:]</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>All of the other contributors gave <strong>great</strong> answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only <code>copy.deepcopy()</code> works to clone/copy a list and not have it point to the nested <code>list</code> objects when you are working with multidimensional, nested lists (list of lists). While <a href=\"http://stackoverflow.com/users/218196/felix-kling\">Felix Kling</a> refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to <code>deepcopy</code>.</p>\n\n<p>While <code>new_list = old_list[:]</code>, <code>copy.copy(old_list)'</code> and for Py3k <code>old_list.copy()</code> work for single-leveled lists, they revert to pointing at the <code>list</code> objects nested within the <code>old_list</code> and the <code>new_list</code>, and changes to one of the <code>list</code> objects are perpetuated in the other. </p>\n\n<h1>Edit: New information brought to light</h1>\n\n<blockquote>\n  <p>As was pointed out by both <a href=\"http://stackoverflow.com/users/541136/aaron-hall\">Aaron Hall</a> and <a href=\"http://stackoverflow.com/users/4014959/pm-2ring\">PM 2Ring</a> <strong>using <code>eval()</code> is not only a bad idea, it is also much slower than <code>copy.deepcopy()</code>.</strong> </p>\n  \n  <p>This means that for multidimensional lists, the only option is <code>copy.deepcopy()</code>. With that being said, it really isn't an option as the performance goes way south when you try to use it on a moderately sized multidimensional array.  I tried to <code>timeit</code> using a 42x42 array, not unheard of or even that large for bioinformatics applications, and I gave up on waiting for a response and just started typing my edit to this post.</p>\n  \n  <p>It would seem that the only real option then is to initialize multiple lists and work on them independently. If anyone has any other suggestions, for how to handle multidimensional list copying, it would be appreciated.</p>\n</blockquote>\n\n<p>As others have stated, there <strike>can be</strike> <strong><em>are significant</em></strong> performance issues using the <code>copy</code> module and <code>copy.deepcopy</code> <strong><em>for multidimensional lists</em></strong>. <strike> Trying to work out a different way of copying the multidimensional list without using <code>deepcopy</code>, (I was working on a problem for a course that only allows 5 seconds for the entire algorithm to run in order to receive credit), I came up with a way of using built-in functions to make a copy of the nested list without having them point at one another or at the <code>list</code> objects nested within them. I used <code>eval()</code> and <code>repr()</code> in the assignment to make the copy of the old list into the new list without creating a link to the old list. It takes the form of:</strike></p>\n\n<pre><code>new_list = eval(repr(old_list))\n</code></pre>\n\n<p>Basically what this does is make a representation of <code>old_list</code> as a string and then evaluates the string as if it were the object that the string represents. By doing this, no link to the original <code>list</code> object is made. A new <code>list</code> object is created and each variable points to its own independent object. Here is an example using a 2 dimensional nested list.</p>\n\n<pre><code>old_list = [[0 for j in range(y)] for i in range(x)] # initialize (x,y) nested list\n\n# assign a copy of old_list to new list without them pointing to the same list object\nnew_list = eval(repr(old_list)) \n\n# make a change to new_list \nfor j in range(y):\n    for i in range(x):\n    new_list[i][j] += 1\n</code></pre>\n\n<p>If you then check the contents of each list, for example a 4 by 3 list, Python will return </p>\n\n<pre><code>&gt;&gt;&gt; new_list\n\n[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n&gt;&gt;&gt; old_list\n\n[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n</code></pre>\n\n<p>While this probably isn't the canonical or syntactically correct way to do it, it seems to work well. I haven't tested performance, but I am going to guess that <code>eval()</code> and <code>rep()</code> will have less overhead to run than <code>deepcopy</code> will. </p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Arguments are <a href=\"http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference\">passed by assignment</a>. The rationale behind this is twofold:</p>\n\n<ol>\n<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>\n<li>some data types are mutable, but others aren't</li>\n</ol>\n\n<p>So:</p>\n\n<ul>\n<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>\n<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>\n</ul>\n\n<p>To make it even more clear, let's have some examples. </p>\n\n<h2>List - a mutable type</h2>\n\n<p><strong>Let's try to modify the list that was passed to a method:</strong></p>\n\n<pre><code>def try_to_change_list_contents(the_list):\n    print 'got', the_list\n    the_list.append('four')\n    print 'changed to', the_list\n\nouter_list = ['one', 'two', 'three']\n\nprint 'before, outer_list =', outer_list\ntry_to_change_list_contents(outer_list)\nprint 'after, outer_list =', outer_list\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['one', 'two', 'three']\ngot ['one', 'two', 'three']\nchanged to ['one', 'two', 'three', 'four']\nafter, outer_list = ['one', 'two', 'three', 'four']\n</code></pre>\n\n<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>\n\n<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>\n\n<pre><code>def try_to_change_list_reference(the_list):\n    print 'got', the_list\n    the_list = ['and', 'we', 'can', 'not', 'lie']\n    print 'set to', the_list\n\nouter_list = ['we', 'like', 'proper', 'English']\n\nprint 'before, outer_list =', outer_list\ntry_to_change_list_reference(outer_list)\nprint 'after, outer_list =', outer_list\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['we', 'like', 'proper', 'English']\ngot ['we', 'like', 'proper', 'English']\nset to ['and', 'we', 'can', 'not', 'lie']\nafter, outer_list = ['we', 'like', 'proper', 'English']\n</code></pre>\n\n<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>\n\n<h2>String - an immutable type</h2>\n\n<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>\n\n<p><strong>Now, let's try to change the reference</strong></p>\n\n<pre><code>def try_to_change_string_reference(the_string):\n    print 'got', the_string\n    the_string = 'In a kingdom by the sea'\n    print 'set to', the_string\n\nouter_string = 'It was many and many a year ago'\n\nprint 'before, outer_string =', outer_string\ntry_to_change_string_reference(outer_string)\nprint 'after, outer_string =', outer_string\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_string = It was many and many a year ago\ngot It was many and many a year ago\nset to In a kingdom by the sea\nafter, outer_string = It was many and many a year ago\n</code></pre>\n\n<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>\n\n<p>I hope this clears things up a little.</p>\n\n<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, \"Is there something I can do to pass the variable by actual reference?\". Let's work on that.</p>\n\n<h2>How do we get around this?</h2>\n\n<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>\n\n<pre><code>def return_a_whole_new_string(the_string):\n    new_string = something_to_do_with_the_old_string(the_string)\n    return new_string\n\n# then you could call it like\nmy_string = return_a_whole_new_string(my_string)\n</code></pre>\n\n<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>\n\n<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\n    new_string = something_to_do_with_the_old_string(stuff_to_change[0])\n    stuff_to_change[0] = new_string\n\n# then you could call it like\nwrapper = [my_string]\nuse_a_wrapper_to_simulate_pass_by_reference(wrapper)\n\ndo_something_with(wrapper[0])\n</code></pre>\n\n<p>Although this seems a little cumbersome.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:</p>\n\n<pre><code>a = 1\na = 2\n</code></pre>\n\n<p>You believe that <code>a</code> is a memory location that stores the value <code>1</code>, then is updated to store the value <code>2</code>. That's not how things work in Python. Rather, <code>a</code> starts as a reference to an object with the value <code>1</code>, then gets reassigned as a reference to an object with the value <code>2</code>. Those two objects may continue to coexist even though <code>a</code> doesn't refer to the first one anymore; in fact they may be shared by any number of other references within the program.</p>\n\n<p>When you call a function with a parameter, a new reference is created that refers to the object passed in. This is separate from the reference that was used in the function call, so there's no way to update that reference and make it refer to a new object. In your example:</p>\n\n<pre><code>    self.variable = 'Original'\n    self.Change(self.variable)\n\ndef Change(self, var):\n    var = 'Changed'\n</code></pre>\n\n<p><code>self.variable</code> is a reference to the string object <code>'Original'</code>. When you call <code>Change</code> you create a second reference <code>var</code> to the object. Inside the function you reassign the reference <code>var</code> to a different string object <code>'Changed'</code>, but the reference <code>self.variable</code> is separate and does not change.</p>\n\n<p>The only way around this is to pass a mutable object. Because both references refer to the same object, any changes to the object are reflected in both places.</p>\n\n<pre><code>    self.variable = ['Original']\n    self.Change(self.variable)\n\ndef Change(self, var):\n    var[0] = 'Changed'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is neither pass-by-value or pass-by-reference - it is call-by-object. See this, by Fredrik Lundh: </p>\n\n<p><a href=\"http://effbot.org/zone/call-by-object.htm\">http://effbot.org/zone/call-by-object.htm</a></p>\n\n<p>Here is a significant quote:</p>\n\n<blockquote>\n  <p>\"...variables [names] are <em>not</em> objects; they cannot be denoted by other variables or referred to by objects.\"</p>\n</blockquote>\n\n<p>In your example, when the <code>Change</code> method is called--a <a href=\"http://docs.python.org/2/tutorial/classes.html#python-scopes-and-namespaces\">namespace</a> is created for it; and <code>var</code> becomes a name, within that namespace, for the string object <code>'Original'</code>. That object then has a name in two namespaces. Next, <code>var = 'Changed'</code> binds <code>var</code> to a new string object, and thus the method's namespace forgets about <code>'Original'</code>. Finally, that namespace is forgotten, and the string <code>'Changed'</code> along with it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Think of stuff being passed <strong>by assignment</strong> instead of by reference/by value. That way, it is allways clear, what is happening as long as you understand what happens during normal assignment.</p>\n\n<p>So, when passing a list to a function/method, the list is assigned to the parameter name. Appending to the list will result in the list being modified. Reassigning the list <em>inside</em> the function will not change the original list, since:</p>\n\n<pre><code>a = [1, 2, 3]\nb = a\nb.append(4)\nb = ['a', 'b']\nprint a, b      # prints [1, 2, 3, 4] ['a', 'b']\n</code></pre>\n\n<p>Since immutable types cannot be modified, they <em>seem</em> like being passed by value - passing an int into a function means assigning the int to the functions parameter. You can only ever reassign that, but it won't change the originial variables value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found the other answers long and complicated, so I created this simple diagram to explain the way Python treats variables and parameters.\n<img src=\"http://i.stack.imgur.com/hKDcu.png\" alt=\"Python pass by object\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Technically, <strong>Python always uses pass by reference values</strong>. I am going to repeat <a href=\"http://stackoverflow.com/a/12438316/1346705\">my other answer</a> to support my statement.</p>\n\n<p>Python always uses pass-by-reference values. There isn't any exception. Any variable assignment means copying the reference value. No exception. Any variable is the name bound to the reference value. Always.</p>\n\n<p>You can think about a reference value as the address of the target object. The address is automatically dereferenced when used. This way, working with the reference value, it seems you work directly with the target object. But there always is a reference in between, one step more to jump to the target.</p>\n\n<p>Here is the example that proves that Python uses passing by reference:</p>\n\n<p><img src=\"http://i.stack.imgur.com/uzXcP.png\" alt=\"Illustrated example of passing the argument\"></p>\n\n<p>If the argument was passed by value, the outer <code>lst</code> could not be modified. The green are the target objects (the black is the value stored inside, the red is the object type), the yellow is the memory with the reference value inside -- drawn as the arrow. The blue solid arrow is the reference value that was passed to the function (via the dashed blue arrow path). The ugly dark yellow is the internal dictionary. (It actually could be drawn also as a green ellipse. The colour and the shape only says it is internal.)</p>\n\n<p>You can use the <a href=\"http://docs.python.org/3.3/library/functions.html#id\"><code>id()</code></a> built-in function to learn what the reference value is (that is, the address of the target object).</p>\n\n<p>In compiled languages, a variable is a memory space that is able to capture the value of the type. In Python, a variable is a name (captured internally as a string) bound to the reference variable that holds the reference value to the target object. The name of the variable is the key in the internal dictionary, the value part of that dictionary item stores the reference value to the target.</p>\n\n<p>Reference values are hidden in Python. There isn't any explicit user type for storing the reference value. However, you can use a list element (or element in any other suitable container type) as the reference variable, because all containers do store the elements also as references to the target objects. In other words, elements are actually not contained inside the container -- only the references to elements are.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Effbot (aka Fredrik Lundh) has described Python's variable passing style as call-by-object:  <a href=\"http://effbot.org/zone/call-by-object.htm\">http://effbot.org/zone/call-by-object.htm</a></p>\n\n<p>Objects are allocated on the heap and pointers to them can be passed around anywhere.  </p>\n\n<ul>\n<li><p>When you make an assignment such as <code>x = 1000</code>, a dictionary entry is created that maps the string \"x\" in the current namespace to a pointer to the integer object containing one thousand.   </p></li>\n<li><p>When you update \"x\" with <code>x = 2000</code>, a new integer object is created and the dictionary is updated to point at the new object.  The old one thousand object is unchanged (and may or may not be alive depending on whether anything else refers to the object).</p></li>\n<li><p>When you do a new assignment such as <code>y = x</code>, a new dictionary entry \"y\" is created that points to the same object as the entry for \"x\".</p></li>\n<li><p>Objects like strings and integers are <em>immutable</em>.  This simply means that there are no methods that can change the object after it has been created.  For example, once the integer object one-thousand is created, it will never change.  Math is done by creating new integer objects.</p></li>\n<li><p>Objects like lists are <em>mutable</em>.  This means that the contents of the object can be changed by anything pointing to the object.  For example, <code>x = []; y = x; x.append(10); print y</code> will print <code>[10]</code>.  The empty list was created.  Both \"x\" and \"y\" point to the same list.  The <em>append</em> method mutates (updates) the list object (like adding a record to a database) and the result is visible to both \"x\" and \"y\" (just as a database update would be visible to every connection to that database).</p></li>\n</ul>\n\n<p>Hope that clarifies the issue for you. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>(edit - Blair has updated his enormously popular answer so that it is now accurate)</p>\n\n<p>I think it is important to note that the current post with the most votes (by Blair Conrad), while being correct with respect to its result, is misleading and is borderline incorrect based on its definitions.  While there are many languages (like C) that allow the user to either pass by reference or pass by value, Python is not one of them.</p>\n\n<p>David Cournapeau's answer points to the real answer and explains why the behavior in Blair Conrad's post seems to be correct while the definitions are not.</p>\n\n<p>To the extent that Python is pass by value, all languages are pass by value since some piece of data (be it a \"value\" or a \"reference\") must be sent. However, that does not mean that Python is pass by value in the sense that a C programmer would think of it.</p>\n\n<p>If you want the behavior, Blair Conrad's answer is fine.  But if you want to know the nuts and bolts of why Python is neither pass by value or pass by reference, read David Cournapeau's answer.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A simple trick I normally use is to just wrap it in a list:</p>\n\n<pre><code>def Change(self, var):\n    var[0] = 'Changed'\n\nvariable = ['Original']\nself.Change(variable)      \nprint variable[0]\n</code></pre>\n\n<p>(Yeah I know this can be inconvenient, but sometimes it is simple enough to do this.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You got some really good answers here.</p>\n\n<pre><code>x = [ 2, 4, 4, 5, 5 ]\nprint x  # 2, 4, 4, 5, 5\n\ndef go( li ) :\n  li = [ 5, 6, 7, 8 ]  # re-assigning what li POINTS TO, does not\n  # change the value of the ORIGINAL variable x\n\ngo( x ) \nprint x  # 2, 4, 4, 5, 5  [ STILL! ]\n\n\nraw_input( 'press any key to continue' )\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The key to understanding parameter passing is to stop thinking about \"variables\". <strong>There are no variables in Python.</strong></p>\n\n<ol>\n<li>Python has names and objects.</li>\n<li>Assignment binds a name to an object.</li>\n<li>Passing an argument into a function also binds a name (the parameter name of the function) to an object.</li>\n</ol>\n\n<p>That is all there is to it. Mutability is irrelevant for this question.</p>\n\n<p>Example: </p>\n\n<pre><code>a = 1\n</code></pre>\n\n<p>This binds the name <code>a</code> to an object of type integer that holds the value 1.</p>\n\n<pre><code>b = x\n</code></pre>\n\n<p>This binds the name <code>b</code> to the same object that the name <code>x</code> is currently bound to.\nAfterwards, the name <code>b</code> has nothing to do with the name <code>x</code> any more.</p>\n\n<p>See sections 3.1 and 4.1 in the Python 3 language reference.</p>\n\n<hr>\n\n<p>So in the code shown in the question, the statement <code>self.Change(self.variable)</code> binds the name <code>var</code> (in the scope of function <code>Change</code>) to the object that holds the value <code>'Original'</code> and the assignment <code>var = 'Changed'</code> (in the body of function <code>Change</code>) assigns that same name again: to some other object (that happens to hold a string as well but could have been something else entirely).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In this case the variable titled <code>var</code> in the method <code>Change</code> is assigned a reference to <code>self.variable</code>, and you immediately assign a string to <code>var</code>. It's no longer pointing to <code>self.variable</code>. The following code snippet shows what would happen if you modify the data structure pointed to by <code>var</code> and <code>self.variable</code>, in this case a list:</p>\n\n<pre><code>&gt;&gt;&gt; class PassByReference:\n...     def __init__(self):\n...         self.variable = ['Original']\n...         self.change(self.variable)\n...         print self.variable\n...         \n...     def change(self, var):\n...         var.append('Changed')\n... \n&gt;&gt;&gt; q = PassByReference()\n['Original', 'Changed']\n&gt;&gt;&gt;\n</code></pre>\n\n<p>I'm sure someone else could clarify this further.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>as you can state you need to have a mutable object, but let me suggest you to check over the global variables as they can help you or even solve this kind of issues !</p>\n\n<p><a href=\"http://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\">http://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python</a></p>\n\n<p>example:</p>\n\n<pre><code>&gt;&gt;&gt; def x(y):\n...     global z\n...     z = y\n...\n\n&gt;&gt;&gt; x\n&lt;function x at 0x00000000020E1730&gt;\n&gt;&gt;&gt; y\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'y' is not defined\n&gt;&gt;&gt; z\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'z' is not defined\n\n&gt;&gt;&gt; x(2)\n&gt;&gt;&gt; x\n&lt;function x at 0x00000000020E1730&gt;\n&gt;&gt;&gt; y\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'y' is not defined\n&gt;&gt;&gt; z\n2\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A lot of insights in answers here, but i think an additional point is not clearly mentioned here explicitly.   Quoting from python documentation <a href=\"https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\">https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python</a>  </p>\n\n<p>\"In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a new value anywhere within the function\u2019s body, it\u2019s assumed to be a local. If a variable is ever assigned a new value inside the function, the variable is implicitly local, and you need to explicitly declare it as \u2018global\u2019.\nThough a bit surprising at first, a moment\u2019s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you\u2019d be using global all the time. You\u2019d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.\"</p>\n\n<p>Even when passing a mutable object to a function this still applies. And to me clearly explains the reason for the difference in behavior between assigning to the object and operating on the object in the function.</p>\n\n<pre><code>def test(l):\n    print \"Received\", l , id(l)\n    l = [0, 0, 0]\n    print \"Changed to\", l, id(l)  # New local object created, breaking link to global l\n\nl= [1,2,3]\nprint \"Original\", l, id(l)\ntest(l)\nprint \"After\", l, id(l)\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>Original [1, 2, 3] 4454645632\nReceived [1, 2, 3] 4454645632\nChanged to [0, 0, 0] 4474591928\nAfter [1, 2, 3] 4454645632\n</code></pre>\n\n<p>The assignment to an global variable that is not declared global therefore creates a new local object and breaks the link to the original object.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python\u2019s pass-by-assignment scheme isn\u2019t quite the same as C++\u2019s reference parameters option, but it turns out to be very similar to the argument-passing model of the C language (and others) in practice:</p>\n\n<ul>\n<li>Immutable arguments are effectively passed \u201c<strong>by value</strong>.\u201d Objects such as integers and strings are passed by object reference instead of by copying, but because you can\u2019t change immutable objects in place anyhow, the effect is much like making a copy.</li>\n<li>Mutable arguments are effectively passed \u201c<strong>by pointer</strong>.\u201d Objects such as lists\nand dictionaries are also passed by object reference, which is similar to the way C\npasses arrays as pointers\u2014mutable objects can be changed in place in the function,\nmuch like C arrays.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is the simple (I hope) explanation of the concept <code>pass by object</code> used in Python.<br>\nWhenever you pass an object to the function, the object itself is passed (object in Python is actually what you'd call a value in other programming languages) not the reference to this object. In other words, when you call:</p>\n\n<pre><code>def change_me(list):\n   list = [1, 2, 3]\n\nmy_list = [0, 1]\nchange_me(my_list)\n</code></pre>\n\n<p>The actual object - [0, 1] (which would be called a value in other programming languages) is being passed. So in fact the function <code>change_me</code> will try to do something like:</p>\n\n<pre><code>[0, 1] = [1, 2, 3]\n</code></pre>\n\n<p>which obviously will not change the object passed to the function. If the function looked like this:</p>\n\n<pre><code>def change_me(list):\n   list.append(2)\n</code></pre>\n\n<p>Then the call would result in:</p>\n\n<pre><code>[0, 1].append(2)\n</code></pre>\n\n<p>which obviously will change the object. <a href=\"http://stackoverflow.com/a/534509/831531\">This answer</a> explains it well.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to <code>x</code>. When you then change <code>x</code> all three references are changed.</p>\n\n<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>\n\n<pre><code>[[1]*4 for n in range(3)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>size = 3\nmatrix_surprise = [[0] * size] * size\nmatrix = [[0]*size for i in range(size)]\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/uHuck.png\" alt=\"Frames and Objects\"></p>\n\n<p><a href=\"http://pythontutor.com/visualize.html#code=size+%3D+3%0Amatrix_surprise+%3D+%5B%5B0%5D+*+size%5D+*+size%0Amatrix+%3D+%5B%5B0%5D*size+for+i+in+range(size)%5D&amp;mode=display&amp;cumulative=false&amp;heapPrimitives=false&amp;drawParentPointers=false&amp;textReferences=false&amp;showOnlyOutputs=false&amp;py=2&amp;curInstr=6\">Live Python Tutor Visualize</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, this is exactly what you would expect. Let's decompose what is happening here:</p>\n\n<p>You write</p>\n\n<pre><code>lst = [[1] * 4] * 3\n</code></pre>\n\n<p>This is equivalent to:</p>\n\n<pre><code>lst1 = [1]*4\nlst = [lst1]*3\n</code></pre>\n\n<p>This means <code>lst</code> is a list with 3 elements all pointing to <code>lst1</code>. This means the two following lines are equivalent:</p>\n\n<pre><code>lst[0][0] = 5\nlst1[0] = 5\n</code></pre>\n\n<p>As <code>lst[0]</code> is nothing but <code>lst1</code>.</p>\n\n<p>To obtain the desired behavior, you can use list comprehension:</p>\n\n<pre><code>lst = [ [1]*4 for n in xrange(3) ]\n</code></pre>\n\n<p>In this case, the expression is re-evaluated for each n, leading to a different list.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code> [[1] * 4] * 3\n</code></pre>\n\n<p>or even</p>\n\n<pre><code> [[1, 1, 1, 1]] * 3\n</code></pre>\n\n<p>Creates a list that references the internal <code>[1,1,1,1]</code> 3 times - not three copies of the inner list, so any time you modify the list (in any position), you'll see the change three times.</p>\n\n<p>It's the same as this example:</p>\n\n<pre><code>&gt;&gt;&gt; inner = [1,1,1,1]\n&gt;&gt;&gt; outer = [inner]*3\n&gt;&gt;&gt; outer\n[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n&gt;&gt;&gt; inner[0] = 5\n&gt;&gt;&gt; outer\n[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]\n</code></pre>\n\n<p>where it's probably a little less surprising.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alongside the accepted answer that explained the problem correctly instead of creating a list with duplicated elements using following code :</p>\n\n<pre><code>[[1]*4 for n in range(3)]\n</code></pre>\n\n<p>That use the throwaway variable <code>n</code> and the <code>range()</code> function, if You are in python 2 use <code>xrange()</code> that returns a generator which is more efficient (<code>range()</code> in python 3 does the same job) and use <code>_</code> instead of <code>n</code>: </p>\n\n<pre><code>[[1]*4 for _ in xrange(3)]      # and in python3 [[1]*4 for _ in range(3)]\n</code></pre>\n\n<p>Also you can use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.repeat\" rel=\"nofollow\"><code>itertools.repeat()</code></a> that returns a generator of repeated elements :</p>\n\n<pre><code>&gt;&gt;&gt; a=list(repeat(1,4))\n[1, 1, 1, 1]\n&gt;&gt;&gt; a[0]=5\n&gt;&gt;&gt; a\n[5, 1, 1, 1]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, think it in another case. Assume that if your list is this;</p>\n\n<pre><code>[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n</code></pre>\n\n<p>and if you write <code>myList[0][0] = 5</code> output will be;</p>\n\n<pre><code>&gt;&gt;&gt; \n[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n&gt;&gt;&gt; \n</code></pre>\n\n<p>As you expected. But since you define your list variable like this;</p>\n\n<pre><code>[[1] * 4] * 3\n</code></pre>\n\n<p>Python will process your codes on this pattern. So if you write <code>myList[0][0]</code> and your list defined like above, Python will process it like <code>[1]*3</code>. That's why all of the lists first elements are changed.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let us rewrite your code in the following way:</p>\n\n<pre><code>x = 1\ny = [x]\nz = y * 4\n\nmyList = [z] * 3\n</code></pre>\n\n<p>Then having this, run the following code to make everything more clear. What the code does is basically print the <a href=\"https://docs.python.org/2/library/functions.html#id\" rel=\"nofollow\"><code>id</code></a>s of the obtained objects, which</p>\n\n<blockquote>\n  <p>Return the \u201cidentity\u201d of an object</p>\n</blockquote>\n\n<p>and will help us identify them and analyse what happens:</p>\n\n<pre><code>print(\"myList:\")\nfor i, subList in enumerate(myList):\n    print(\"\\t[{}]: {}\".format(i, id(subList)))\n    for j, elem in enumerate(subList):\n        print(\"\\t\\t[{}]: {}\".format(j, id(elem)))\n</code></pre>\n\n<p>And you will get the following output:</p>\n\n<pre><code>x: 1\ny: [1]\nz: [1, 1, 1, 1]\nmyList:\n    [0]: 4300763792\n        [0]: 4298171528\n        [1]: 4298171528\n        [2]: 4298171528\n        [3]: 4298171528\n    [1]: 4300763792\n        [0]: 4298171528\n        [1]: 4298171528\n        [2]: 4298171528\n        [3]: 4298171528\n    [2]: 4300763792\n        [0]: 4298171528\n        [1]: 4298171528\n        [2]: 4298171528\n        [3]: 4298171528\n</code></pre>\n\n<hr>\n\n<p>So now let us go step-by-step. You have <code>x</code> which is <code>1</code>, and a single element list <code>y</code> containing <code>x</code>. Your first step is <code>y * 4</code> which will get you a new list <code>z</code>, which is basically <code>[x, x, x, x]</code>, i.e. it creates a new list which will have 4 elements, which are references to the initial <code>x</code> object. The net step is pretty similar. You basically do <code>z * 3</code>, which is <code>[[x, x, x, x]] * 3</code> and returns <code>[[x, x, x, x], [x, x, x, x], [x, x, x, x]]</code>, for the same reason as for the first step.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a generator that yields the chunks you want:</p>\n\n<pre><code>def chunks(l, n):\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in xrange(0, len(l), n):\n        yield l[i:i+n]\n</code></pre>\n\n<hr>\n\n<pre><code>import pprint\npprint.pprint(list(chunks(range(10, 75), 10)))\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want something super simple:</p>\n\n<pre><code>def chunks(l, n):\n    n = max(1, n)\n    return [l[i:i + n] for i in range(0, len(l), n)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Directly from the (old) Python documentation (recipes for itertools):</p>\n\n<pre><code>from itertools import izip, chain, repeat\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip(*[chain(iterable, repeat(padvalue, n-1))]*n)\n</code></pre>\n\n<p>The current version, as suggested by J.F.Sebastian:</p>\n\n<pre><code>from itertools import izip_longest # for Python 2.x\n#from itertools import zip_longest # for Python 3.x\n#from six.moves import zip_longest # for both (uses the six compat library)\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip_longest(*[iter(iterable)]*n, fillvalue=padvalue)\n</code></pre>\n\n<p>I guess Guido's time machine works\u2014worked\u2014will work\u2014will have worked\u2014was working again.</p>\n\n<p>These solutions work because <code>[iter(iterable)]*n</code> (or the equivalent in the earlier version) creates <em>one</em> iterator, repeated <code>n</code> times in the list. <code>izip_longest</code> then effectively performs a round-robin of \"each\" iterator; because this is the same iterator, it is advanced by each such call, resulting in each such zip-roundrobin generating one tuple of <code>n</code> items.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a generator that work on arbitrary iterables:</p>\n\n<pre><code>def split_seq(iterable, size):\n    it = iter(iterable)\n    item = list(itertools.islice(it, size))\n    while item:\n        yield item\n        item = list(itertools.islice(it, size))\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint(list(split_seq(xrange(75), 10)))\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def chunk(input, size):\n    return map(None, *([iter(input)] * size))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know this is kind of old but I don't why nobody mentioned <code>numpy.array_split</code>:</p>\n\n<pre><code>lst = range(50)\nIn [26]: np.array_split(b,5)\nOut[26]: \n[array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),\n array([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]),\n array([30, 31, 32, 33, 34, 35, 36, 37, 38, 39]),\n array([40, 41, 42, 43, 44, 45, 46, 47, 48, 49])]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Simple yet elegant</p>\n\n<pre><code>l = range(1, 1000)\nprint [l[x:x+10] for x in xrange(0, len(l), 10)]\n</code></pre>\n\n<p>or if you prefer:</p>\n\n<pre><code>chunks = lambda l, n: [l[x: x+n] for x in xrange(0, len(l), n)]\nchunks(l, 10)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm surprised nobody has thought of using <code>iter</code>'s <a href=\"http://docs.python.org/2/library/functions.html#iter\">two-argument form</a>:</p>\n\n<pre><code>from itertools import islice\n\ndef chunk(it, size):\n    it = iter(it)\n    return iter(lambda: tuple(islice(it, size)), ())\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunk(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]\n</code></pre>\n\n<p>This works with any iterable and produces output lazily. It returns tuples rather than iterators, but I think it has a certain elegance nonetheless. It also doesn't pad; if you want padding, a simple variation on the above will suffice:</p>\n\n<pre><code>from itertools import islice, chain, repeat\n\ndef chunk_pad(it, size, padval=None):\n    it = chain(iter(it), repeat(padval))\n    return iter(lambda: tuple(islice(it, size)), (padval,) * size)\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunk_pad(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]\n&gt;&gt;&gt; list(chunk_pad(range(14), 3, 'a'))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]\n</code></pre>\n\n<p>Like the <code>izip_longest</code>-based solutions, the above <em>always</em> pads. As far as I know, there's no one- or two-line itertools recipe for a function that <em>optionally</em> pads. By combining the above two approaches, this one comes pretty close:</p>\n\n<pre><code>_no_padding = object()\n\ndef chunk(it, size, padval=_no_padding):\n    if padval == _no_padding:\n        it = iter(it)\n        sentinel = ()\n    else:\n        it = chain(iter(it), repeat(padval))\n        sentinel = (padval,) * size\n    return iter(lambda: tuple(islice(it, size)), sentinel)\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunk(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]\n&gt;&gt;&gt; list(chunk(range(14), 3, None))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]\n&gt;&gt;&gt; list(chunk(range(14), 3, 'a'))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]\n</code></pre>\n\n<p>I believe this is the shortest chunker proposed that offers optional padding. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://pythonhosted.org/more-itertools/api.html#more_itertools.chunked\">more-itertools has a chunks iterator.</a></p>\n\n<p>It also has a lot more things, including all the recipes in the itertools documentation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I like the Python doc's version proposed by tzot and J.F.Sebastian a lot,\n but it has two shortcomings:</p>\n\n<ul>\n<li>it is not very explicit</li>\n<li>I usually don't want a fill value in the last chunk</li>\n</ul>\n\n<p>I'm using this one a lot in my code:</p>\n\n<pre><code>from itertools import islice\n\ndef chunks(n, iterable):\n    iterable = iter(iterable)\n    while True:\n        yield tuple(islice(iterable, n)) or iterable.next()\n</code></pre>\n\n<p>UPDATE: A lazy chunks version:</p>\n\n<pre><code>from itertools import chain, islice\n\ndef chunks(n, iterable):\n   iterable = iter(iterable)\n   while True:\n       yield chain([next(iterable)], islice(iterable, n-1))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you had a chunk size of 3 for example, you could do:</p>\n\n<pre><code>zip(*[iterable[i::3] for i in range(3)]) \n</code></pre>\n\n<p>source:\n<a href=\"http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/\">http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/</a></p>\n\n<p>I would use this when my chunk size is fixed number I can type, e.g. '3', and would never change.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A generator expression:</p>\n\n<pre><code>def chunks(seq, n):\n    return (seq[i:i+n] for i in xrange(0, len(seq), n))\n</code></pre>\n\n<p>eg.</p>\n\n<pre><code>print list(chunks(range(1, 1000), 10))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Critique of other answers here:</h2>\n\n<p>None of these answers are evenly sized chunks, they all leave a runt chunk at the end, so they're not completely balanced. If you were using these functions to distribute work, you've built-in the prospect of one likely finishing well before the others, so it would sit around doing nothing while the others continued working hard.</p>\n\n<p>For example, the current top answer ends with:</p>\n\n<pre><code>[60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n[70, 71, 72, 73, 74]]\n</code></pre>\n\n<p>I just hate that runt at the end!</p>\n\n<p>Others, like <code>list(grouper(3, xrange(7)))</code>, and <code>chunk(xrange(7), 3)</code> both return: <code>[(0, 1, 2), (3, 4, 5), (6, None, None)]</code>. The <code>None</code>'s are just padding, and rather inelegant in my opinion. They are NOT evenly chunking the iterables.</p>\n\n<p>Why can't we divide these better?</p>\n\n<h2>My Solution(s)</h2>\n\n<p>Here's a balanced solution, adapted from a function I've used in production (Note in Python 3 to replace <code>xrange</code> with <code>range</code>):</p>\n\n<pre><code>def baskets_from(items, maxbaskets=25):\n    baskets = [[] for _ in xrange(maxbaskets)] # in Python 3 use range\n    for i, item in enumerate(items):\n        baskets[i % maxbaskets].append(item)\n    return filter(None, baskets) \n</code></pre>\n\n<p>And I created a generator that does the same if you put it into a list:</p>\n\n<pre><code>def iter_baskets_from(items, maxbaskets=3):\n    '''generates evenly balanced baskets from indexable iterable'''\n    item_count = len(items)\n    baskets = min(item_count, maxbaskets)\n    for x_i in xrange(baskets):\n        yield [items[y_i] for y_i in xrange(x_i, item_count, baskets)]\n</code></pre>\n\n<p>And finally, since I see that all of the above functions return elements in a contiguous order (as they were given):</p>\n\n<pre><code>def iter_baskets_contiguous(items, maxbaskets=3, item_count=None):\n    '''\n    generates balanced baskets from iterable, contiguous contents\n    provide item_count if providing a iterator that doesn't support len()\n    '''\n    item_count = item_count or len(items)\n    baskets = min(item_count, maxbaskets)\n    items = iter(items)\n    floor = item_count // baskets \n    ceiling = floor + 1\n    stepdown = item_count % baskets\n    for x_i in xrange(baskets):\n        length = ceiling if x_i &lt; stepdown else floor\n        yield [items.next() for _ in xrange(length)]\n</code></pre>\n\n<h2>Output</h2>\n\n<p>To test them out:</p>\n\n<pre><code>print(baskets_from(xrange(6), 8))\nprint(list(iter_baskets_from(xrange(6), 8)))\nprint(list(iter_baskets_contiguous(xrange(6), 8)))\nprint(baskets_from(xrange(22), 8))\nprint(list(iter_baskets_from(xrange(22), 8)))\nprint(list(iter_baskets_contiguous(xrange(22), 8)))\nprint(baskets_from('ABCDEFG', 3))\nprint(list(iter_baskets_from('ABCDEFG', 3)))\nprint(list(iter_baskets_contiguous('ABCDEFG', 3)))\nprint(baskets_from(xrange(26), 5))\nprint(list(iter_baskets_from(xrange(26), 5)))\nprint(list(iter_baskets_contiguous(xrange(26), 5)))\n</code></pre>\n\n<p>Which prints out:</p>\n\n<pre><code>[[0], [1], [2], [3], [4], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]\n[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19], [20, 21]]\n[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]\n[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]\n[['A', 'B', 'C'], ['D', 'E'], ['F', 'G']]\n[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]\n[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]\n[[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n</code></pre>\n\n<p>Notice that the contiguous generator provide chunks in the same length patterns as the other two, but the items are all in order, and they are as evenly divided as one may divide a list of discrete elements.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I saw the most awesome Python-ish answer in a <a href=\"http://stackoverflow.com/questions/23286254/convert-list-to-a-list-of-tuples-python\">duplicate</a> of this question:</p>\n\n<pre><code>l = range(1,15)\ni = iter(l)\nprint zip(i,i,i)\n</code></pre>\n\n<p>You can create n-tuple for any n.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you know list size:</p>\n\n<pre><code>def SplitList(list, chunk_size):\n    return [list[offs:offs+chunk_size] for offs in range(0, len(list), chunk_size)]\n</code></pre>\n\n<p>If you don't (an iterator):</p>\n\n<pre><code>def IterChunks(sequence, chunk_size):\n    res = []\n    for item in sequence:\n        res.append(item)\n        if len(res) &gt;= chunk_size:\n            yield res\n            res = []\n    if res:\n        yield res  # yield the last, incomplete, portion\n</code></pre>\n\n<p>In the latter case, it can be rephrased in a more beautiful way if you can be sure that the sequence always contains a whole number of chunks of given size (i.e. there is no incomplete last chunk).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Consider using <a href=\"http://matplotlib.sourceforge.net/\">matplotlib.cbook</a> pieces</p>\n\n<p>for example:</p>\n\n<pre><code>import matplotlib.cbook as cbook\nsegments = cbook.pieces(np.arange(20), 3)\nfor s in segments:\n     print s\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def split_seq(seq, num_pieces):\n    start = 0\n    for i in xrange(num_pieces):\n        stop = start + len(seq[i::num_pieces])\n        yield seq[start:stop]\n        start = stop\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor seq in split_seq(seq, 3):\n    print seq\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"https://github.com/pytoolz/toolz\" rel=\"nofollow\">toolz</a> library has the <code>partition</code> function for this:</p>\n\n<pre><code>from toolz.itertoolz.core import partition\n\nlist(partition(2, [1, 2, 3, 4]))\n[(1, 2), (3, 4)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>heh, one line version</p>\n\n<pre><code>In [48]: chunk = lambda ulist, step:  map(lambda i: ulist[i:i+step],  xrange(0, len(ulist), step))\n\nIn [49]: chunk(range(1,100), 10)\nOut[49]: \n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],\n [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],\n [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],\n [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],\n [91, 92, 93, 94, 95, 96, 97, 98, 99]]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; f = lambda x, n, acc=[]: f(x[n:], n, acc+[(x[:n])]) if x else acc\n&gt;&gt;&gt; f(\"Hallo Welt\", 3)\n['Hal', 'lo ', 'Wel', 't']\n&gt;&gt;&gt;\n</code></pre>\n\n<p>If you are into brackets - I picked up a book on Erlang :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I realise this question is old (stumbled over it on Google), but surely something like the following is far simpler and clearer than any of the huge complex suggestions and only uses slicing:</p>\n\n<pre><code>def chunker(iterable, chunksize):\n    for i,c in enumerate(iterable[::chunksize]):\n        yield iterable[i*chunksize:(i+1)*chunksize]\n\n&gt;&gt;&gt; for chunk in chunker(range(0,100), 10):\n...     print list(chunk)\n... \n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n... etc ...\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another more explicit version.</p>\n\n<pre><code>def chunkList(initialList, chunkSize):\n    \"\"\"\n    This function chunks a list into sub lists \n    that have a length equals to chunkSize.\n\n    Example:\n    lst = [3, 4, 9, 7, 1, 1, 2, 3]\n    print(chunkList(lst, 3)) \n    returns\n    [[3, 4, 9], [7, 1, 1], [2, 3]]\n    \"\"\"\n    finalList = []\n    for i in range(0, len(initialList), chunkSize):\n        finalList.append(initialList[i:i+chunkSize])\n    return finalList\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def chunks(iterable,n):\n    \"\"\"assumes n is an integer&gt;0\n    \"\"\"\n    iterable=iter(iterable)\n    while True:\n        result=[]\n        for i in range(n):\n            try:\n                a=next(iterable)\n            except StopIteration:\n                break\n            else:\n                result.append(a)\n        if result:\n            yield result\n        else:\n            break\n\ng1=(i*i for i in range(10))\ng2=chunks(g1,3)\nprint g2\n'&lt;generator object chunks at 0x0337B9B8&gt;'\nprint list(g2)\n'[[0, 1, 4], [9, 16, 25], [36, 49, 64], [81]]'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def chunk(lst):\n    out = []\n    for x in xrange(2, len(lst) + 1):\n        if not len(lst) % x:\n            factor = len(lst) / x\n            break\n    while lst:\n        out.append([lst.pop(0) for x in xrange(factor)])\n    return out\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ul>\n<li>Works with any iterable</li>\n<li>Inner data is generator object (not a list)</li>\n<li>One liner</li>\n</ul>\n\n<pre>\nIn [259]: get_in_chunks = lambda itr,n: ( (v for _,v in g) for _,g in itertools.groupby(enumerate(itr),lambda (ind,_): ind/n))\n\nIn [260]: list(list(x) for x in get_in_chunks(range(30),7))\nOut[260]:\n[[0, 1, 2, 3, 4, 5, 6],\n [7, 8, 9, 10, 11, 12, 13],\n [14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27],\n [28, 29]]\n</pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>See <a href=\"http://docs.python.org/3.3/library/functions.html?highlight=zip#zip\" rel=\"nofollow\">this reference</a></p>\n\n<pre><code>&gt;&gt;&gt; orange = range(1, 1001)\n&gt;&gt;&gt; otuples = list( zip(*[iter(orange)]*10))\n&gt;&gt;&gt; print(otuples)\n[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), ... (991, 992, 993, 994, 995, 996, 997, 998, 999, 1000)]\n&gt;&gt;&gt; olist = [list(i) for i in otuples]\n&gt;&gt;&gt; print(olist)\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ..., [991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]]\n&gt;&gt;&gt; \n</code></pre>\n\n<p>Python3</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>At this point, I think we need a <strong>recursive generator</strong>, just in case...</p>\n\n<p>In python 2:</p>\n\n<pre><code>def chunks(li, n):\n    if li == []:\n        return\n    yield li[:n]\n    for e in chunks(li[n:], n):\n        yield e\n</code></pre>\n\n<p>In python 3:</p>\n\n<pre><code>def chunks(li, n):\n    if li == []:\n        return\n    yield li[:n]\n    yield from chunks(li[n:], n)\n</code></pre>\n\n<p>Also, in case of massive Alien invasion, a <strong>decorated recursive generator</strong> might become handy:</p>\n\n<pre><code>def dec(gen):\n    def new_gen(li, n):\n        for e in gen(li, n):\n            if e == []:\n                return\n            yield e\n    return new_gen\n\n@dec\ndef chunks(li, n):\n    yield li[:n]\n    for e in chunks(li[n:], n):\n        yield e\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Without calling len() which is good for large lists:</p>\n\n<pre><code>def splitter(l, n):\n    i = 0\n    chunk = l[:n]\n    while chunk:\n        yield chunk\n        i += n\n        chunk = l[i:i+n]\n</code></pre>\n\n<p>And this is for iterables:</p>\n\n<pre><code>def isplitter(l, n):\n    l = iter(l)\n    chunk = list(islice(l, n))\n    while chunk:\n        yield chunk\n        chunk = list(islice(l, n))\n</code></pre>\n\n<p>The functional flavour of the above:</p>\n\n<pre><code>def isplitter2(l, n):\n    return takewhile(bool,\n                     (tuple(islice(start, n))\n                            for start in repeat(iter(l))))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I wrote a small library expressly for this purpose, available <a href=\"https://github.com/rectangletangle/iterlib\" rel=\"nofollow\">here</a>. The library's <code>chunked</code> function is particularly efficient because it's implemented as a <a href=\"https://wiki.python.org/moin/Generators\" rel=\"nofollow\">generator</a>, so a substantial amount of memory can be saved in certain situations. It also doesn't rely on the slice notation, so any arbitrary iterator can be used.</p>\n\n<pre><code>import iterlib\n\nprint list(iterlib.chunked(xrange(1, 1000), 10))\n# prints [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), ...]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Like @AaronHall I got here looking for roughly evenly sized chunks. There are different interpretations of that. In my case, if the desired size is N, I would like each group to be of size&gt;=N.\nThus, the orphans which are created in most of the above should be redistributed to other groups.</p>\n\n<p>This can be done using:</p>\n\n<pre><code>def nChunks(l, n):\n    \"\"\" Yield n successive chunks from l.\n    Works for lists,  pandas dataframes, etc\n    \"\"\"\n    newn = int(1.0 * len(l) / n + 0.5)\n    for i in xrange(0, n-1):\n        yield l[i*newn:i*newn+newn]\n    yield l[n*newn-newn:]\n</code></pre>\n\n<p>(from <a href=\"http://stackoverflow.com/questions/2130016/splitting-a-list-of-arbitrary-size-into-only-roughly-n-equal-parts\">splitting a list of arbitrary size into only roughly N-equal parts</a>) by simply calling it as nChunks(l,l/n)  or nChunks(l,floor(l/n))</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The simplest way to accomplish this would be to put the <code>input</code> method in a while loop. Use <a href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\"><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>\n\n<h2>When Your Input Might Raise an Exception</h2>\n\n<p>Use <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\">try and catch</a> to detect when the user enters data that can't be parsed.</p>\n\n<pre><code>while True:\n    try:\n        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input\n        age = int(input(\"Please enter your age: \"))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        #better try again... Return to the start of the loop\n        continue\n    else:\n        #age was successfully parsed!\n        #we're ready to exit the loop.\n        break\nif age &gt;= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n</code></pre>\n\n<h2>Implementing Your Own Validation Rules</h2>\n\n<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>\n\n<pre><code>while True:\n    data = input(\"Please enter a loud message (must be all caps): \")\n    if not data.isupper():\n        print(\"Sorry, your response was not loud enough.\")\n        continue\n    else:\n        #we're happy with the value given.\n        #we're ready to exit the loop.\n        break\n\nwhile True:\n    data = input(\"Pick an answer from A to D:\")\n    if data.lower() not in ('a', 'b', 'c', 'd'):\n        print(\"Not an appropriate choice.\")\n    else:\n        break\n</code></pre>\n\n<h2>Combining Exception Handling and Custom Validation</h2>\n\n<p>Both of the above techniques can be combined into one loop.</p>\n\n<pre><code>while True:\n    try:\n        age = int(input(\"Please enter your age: \"))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        continue\n\n    if age &lt; 0:\n        print(\"Sorry, your response must not be negative.\")\n        continue\n    else:\n        #age was successfully parsed, and we're happy with its value.\n        #we're ready to exit the loop.\n        break\nif age &gt;= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n</code></pre>\n\n<h2>Encapsulating it All in a Function</h2>\n\n<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>\n\n<pre><code>def get_non_negative_int(prompt):\n    while True:\n        try:\n            value = int(input(prompt))\n        except ValueError:\n            print(\"Sorry, I didn't understand that.\")\n            continue\n\n        if value &lt; 0:\n            print(\"Sorry, your response must not be negative.\")\n            continue\n        else:\n            break\n    return value\n\nage = get_non_negative_int(\"Please enter your age: \")\nkids = get_non_negative_int(\"Please enter the number of children you have: \")\nsalary = get_non_negative_int(\"Please enter your yearly earnings, in dollars: \")\n</code></pre>\n\n<h3>Putting it all together</h3>\n\n<p>You can extend this idea to make a very generic input function:</p>\n\n<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None): \n    if min_ is not None and max_ is not None and max_ &lt; min_: \n        raise ValueError(\"min_ must be less than or equal to max_.\") \n    while True: \n        ui = input(prompt) \n        if type_ is not None: \n            try: \n                ui = type_(ui) \n            except ValueError: \n                print(\"Input type must be {0}.\".format(type_.__name__)) \n                continue\n        if max_ is not None and ui &gt; max_: \n            print(\"Input must be less than or equal to {0}.\".format(max_)) \n        elif min_ is not None and ui &lt; min_: \n            print(\"Input must be greater than or equal to {0}.\".format(min_)) \n        elif range_ is not None and ui not in range_: \n            if isinstance(range_, range): \n                template = \"Input must be between {0.start} and {0.stop}.\"\n                print(template.format(range_)) \n            else: \n                template = \"Input must be {0}.\"\n                if len(range_) == 1: \n                    print(template.format(*range_)) \n                else: \n                    print(template.format(\" or \".join((\", \".join(map(str, \n                                                                     range_[:-1])), \n                                                       str(range_[-1]))))) \n        else: \n            return ui \n</code></pre>\n\n<p>With usage such as:</p>\n\n<pre><code>age = sanitised_input(\"Enter your age: \", int, 1, 101)\nanswer = sanitised_input(\"Enter your answer\", str.lower, range_=('a', 'b', 'c', 'd'))\n</code></pre>\n\n<h2>Common Pitfalls, and Why you Should Avoid Them</h2>\n\n<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>\n\n<p>This method works but is generally considered poor style:</p>\n\n<pre><code>data = input(\"Please enter a loud message (must be all caps): \")\nwhile not data.isupper():\n    print(\"Sorry, your response was not loud enough.\")\n    data = input(\"Please enter a loud message (must be all caps): \")\n</code></pre>\n\n<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>\n\n<h3>Recursion Will Blow Your Stack</h3>\n\n<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>\n\n<pre><code>def get_non_negative_int(prompt):\n    try:\n        value = int(input(prompt))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        return get_non_negative_int(prompt)\n\n    if value &lt; 0:\n        print(\"Sorry, your response must not be negative.\")\n        return get_non_negative_int(prompt)\n    else:\n        return value\n</code></pre>\n\n<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think \"no fool would make 1000 mistakes in a row\", but you're underestimating the ingenuity of fools!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) </p>\n\n<pre><code>f=lambda age: (age.isdigit() and ((int(age)&gt;=18  and \"Can vote\" ) or \"Cannot vote\")) or \\\nf(raw_input(\"invalid input. Try again\\nPlease enter your age: \"))\nprint f(raw_input(\"Please enter your age: \"))\n</code></pre>\n\n<p>P.S. This code is for python 2.x and can be exported to 3.x by changing the \nraw_input and print functions.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want a vaild, no number, response, I would do this:</p>\n\n<pre><code>age = input(\"Please enter your age: \")\nwhile age == '':\n    print(\"Sorry, I didn't understand that\")\n    age = input(\"Please enter your age: \")\nwhile not age.isalpha():\n    if age &gt;= 18: \n        print(\"You are able to vote in the United States!\")\n        break\n    elif age &lt; 18:\n        print(\"You are not able to vote in the United States.\")\n        break\n    else:\n        print(\"Sorry, I didn't understand that\")\n        age = int(input(\"Please enter your age: \"))\n    while age == type(float):\n        print(\"Sorry, I didn't understand that\")\n        age = input(\"Please enter your age: \")\n\nelse:\n    print(\"Sorry, I didn't understand that\")\n    age = input(\"Please enter your age: \")\n</code></pre>\n\n<p>This makes sure that the type of input isn't a float, and that it is a number. If they just press <code>enter</code> it will ask their input again.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>\n\n<pre><code>if x == 1 or y == 1 or z == 1:\n</code></pre>\n\n<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>\n\n<p>You can shorten that to:</p>\n\n<pre><code>if 1 in (x, y, z):\n</code></pre>\n\n<p>or better still:</p>\n\n<pre><code>if 1 in {x, y, z}:\n</code></pre>\n\n<p>using a <code>set</code> to take advantage of the constant-cost membership test (<code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>\n\n<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>\n\n<p>This is due to <a href=\"http://docs.python.org/2/reference/expressions.html#operator-precedence\">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>\n\n<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do. </p>\n\n<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href=\"http://docs.python.org/2/reference/expressions.html#boolean-operations\">boolean expressions</a> for details on what Python considers false in a boolean context).</p>\n\n<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your problem is more easily addressed with a dictionary structure like:</p>\n\n<pre><code>x == 0\ny == 1\nz == 3\nd = {0: 'c', 1:'d', 2:'e', 3:'f'}\nMyList = [d[k] for k in [x, y, z]]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The direct way to write <code>x or y or z == 0</code> is</p>\n\n<pre><code>if any(map((lambda value: value == 0), (x,y,z))):\n    pass # write your logic.\n</code></pre>\n\n<p>But I dont think, you like it. :)\nAnd this way is ugly.</p>\n\n<p>The other way (a better) is:</p>\n\n<pre><code>0 in (x, y, z)\n</code></pre>\n\n<p>BTW lots of <code>if</code>s could be written as something like this</p>\n\n<pre><code>my_cases = {\n    0: Mylist.append(\"c\"),\n    1: Mylist.append(\"d\")\n    # ..\n}\n\nfor key in my_cases:\n    if key in (x,y,z):\n        my_cases[key]()\n        break\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think this will handle it better:</p>\n\n<pre><code>my_dict = {0: \"c\", 1: \"d\", 2: \"e\", 3: \"f\"}\n\ndef validate(x, y, z):\n    for ele in [x, y, z]:\n        if ele in my_dict.keys():\n            return my_dict[ele]\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>print validate(0, 8, 9)\nc\nprint validate(9, 8, 9)\nNone\nprint validate(9, 8, 2)\ne\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to use if, else statements following is another solution:</p>\n\n<pre><code>    myList = []\n    aList = [0,1,3]\n\n    for l in aList:\n        if l==0:myList.append('c')\n        elif l==1:myList.append('d')\n        elif l==2:myList.append('e')\n        elif l==3:myList.append('f')\n\n    print(myList)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you ARE very very lazy, you can put the values inside an array. Such as</p>\n\n<pre><code>list = []\nlist.append(x)\nlist.append(y)\nlist.append(z)\nnums = [add numbers here]\nletters = [add corresponding letters here]\nfor index in range(len(nums)):\n    for obj in list:\n        if obj == num[index]:\n            MyList.append(letters[index])\n            break\n</code></pre>\n\n<p>You can also put the numbers and letters in a dictionary and do it, but this is probably a LOT more complicated than simply if statements. That's what you get for trying to be extra lazy :)</p>\n\n<p>One more thing, your </p>\n\n<pre><code>if x or y or z == 0:\n</code></pre>\n\n<p>will compile, but not in the way you want it to. When you simply put a variable in an if statement (example)</p>\n\n<pre><code>if b\n</code></pre>\n\n<p>the program will check if the variable is not null. Another way to write the above statement (which makes more sense) is </p>\n\n<pre><code>if bool(b)\n</code></pre>\n\n<p>Bool is an inbuilt function in python which basically does the command of verifying a boolean statement (If you don't know what that is, it is what you are trying to make in your if statement right now :))</p>\n\n<p>Another lazy way I found is :</p>\n\n<pre><code>if any([x==0, y==0, z==0])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To check if a value is contained within a set of variables you can use the inbuilt modules           <code>itertools</code> and <code>operator</code>.</p>\n\n<p>For example:</p>\n\n<p>Imports:</p>\n\n<pre><code>from itertools import repeat\nfrom operator import contains\n</code></pre>\n\n<p>Declare variables:</p>\n\n<pre><code>x = 0\ny = 1\nz = 3\n</code></pre>\n\n<p>Create mapping of values (in the order you want to check):</p>\n\n<pre><code>check_values = (0, 1, 3)\n</code></pre>\n\n<p>Use <code>itertools</code> to allow repetition of the variables:</p>\n\n<pre><code>check_vars = repeat((x, y, z))\n</code></pre>\n\n<p>Finally, use the <code>map</code> function to create an iterator:</p>\n\n<pre><code>checker = map(contains, check_vars, check_values)\n</code></pre>\n\n<p>Then, when checking for the values (in the original order), use <code>next()</code>:</p>\n\n<pre><code>if next(checker)  # Checks for 0\n    # Do something\n    pass\nelif next(checker)  # Checks for 1\n    # Do something\n    pass\n</code></pre>\n\n<p>etc...</p>\n\n<p>This has an advantage over the <code>lambda x: x in (variables)</code> because <code>operator</code> is an inbuilt module and is faster and more efficient than using <code>lambda</code> which has to create a custom in-place function.</p>\n\n<p>Another option for checking if there is a non-zero (or False) value in a list:</p>\n\n<pre><code>not (x and y and z)\n</code></pre>\n\n<p>Equivalent:</p>\n\n<pre><code>not all((x, y, z))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using a <a href=\"https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow\">list comprehension</a> is OK:</p>\n\n<pre><code>my_dict = {0: \"c\", 1: \"d\", 2: \"e\", 3: \"f\"}\nx, y, z = 0, 1, 3\nprint([my_dict[i] for i in range(4) if i in {x,y,z}])\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>['c', 'd', 'f']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>d = {0:'c', 1:'d', 2:'e', 3: 'f'}\nx, y, z = (0, 1, 3)\nprint [v for (k,v) in d.items() if x==k or y==k or z==k]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This code may be helpful</p>\n\n<pre><code>L ={x, y, z}\nT= ((0,\"c\"),(1,\"d\"),(2,\"e\"),(3,\"f\"),)\nList2=[]\nfor t in T :\nif t[0] in L :\n    List2.append(t[1])\n    break;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Previous Solution:</strong> As stated by Martijn Pieters, the correct, and fastest, format is:</p>\n\n<pre><code>if 1 in {x, y, z}:\n</code></pre>\n\n<p>The one major issue that does not seem to be addressed is that you want your output list to include each letter after a true if statement. <br><br>Using only Martijn Pieters' advice you would now have:</p>\n\n<pre><code>if 0 in {x, y, z}:\n    Mylist.append(\"c\")\nelif 1 in {x, y, z}:\n    Mylist.append(\"d\")\n...\n</code></pre>\n\n<p><strong>Problem:</strong> The first if statement would return true, and you would never get to the following elif statement. So your list would simply return:</p>\n\n<pre><code>[\"c\"]\n</code></pre>\n\n<p>What you want is to have separate if statements so that python will read each statement whether the former were true or false. Such as:</p>\n\n<pre><code>if 0 in {x, y, z}:\n    Mylist.append(\"c\")\nif 1 in {x, y, z}:\n    Mylist.append(\"d\")\nif 2 in {x, y, z}:\n    Mylist.append(\"e\")\n...\n</code></pre>\n\n<p>This will work, but 'if' you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a 'for' loop:</p>\n\n<pre><code>numToLetters = {0:\"c\", 1:\"d\", 2:\"e\", 3:\"f\"}\nfor number in numToLetters:\n    if number in {x, y, z}:\n        Mylist.append(numToLetters[number])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Set is the good approach here, because it orders the variables, what seems to be your goal here. <code>{z,y,x}</code> is <code>{0,1,3}</code> whatever the order of the parameters.</p>\n\n<pre><code>&gt;&gt;&gt;&gt;[chr(ord('c')+i) for i in {z,x,y}]\n['c', 'd', 'f']\n</code></pre>\n\n<p>the letter corresponding to a number is given here by <code>chr(ord('c')+i)</code> , where <code>chr</code> and <code>ord</code> are bridges between characters  and numeric codes.</p>\n\n<p>So the whole solution is O(n).</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's pretty simple really:</p>\n\n<pre><code>a[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array\n</code></pre>\n\n<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\n\n<pre><code>a[start:end:step] # start through not past end, by step\n</code></pre>\n\n<p>The key point to remember is that the <code>:end</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference beween <code>end</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\n\n<p>The other feature is that <code>start</code> or <code>end</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\n\n<pre><code>a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n</code></pre>\n\n<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The tutorial talks about it:</p>\n\n<p><a href=\"http://docs.python.org/tutorial/introduction.html#strings\">http://docs.python.org/tutorial/introduction.html#strings</a></p>\n\n<p>(Scroll down a bit until you get to the part about slicing.)  </p>\n\n<p>The ASCII art diagram is helpful too for remembering how slices work:</p>\n\n<pre><code> +---+---+---+---+---+\n | H | e | l | p | A |\n +---+---+---+---+---+\n 0   1   2   3   4   5\n-5  -4  -3  -2  -1\n</code></pre>\n\n<blockquote>\n  <p>\"One way to remember how slices work\n  is to think of the indices as pointing\n  <em>between</em> characters, with the left edge of the first character numbered\n  0.\"</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Enumerating the possibilities allowed by the grammar:</p>\n\n<pre><code>&gt;&gt;&gt; seq[:]                # [seq[0],   seq[1],          ..., seq[-1]    ]\n&gt;&gt;&gt; seq[low:]             # [seq[low], seq[low+1],      ..., seq[-1]    ]\n&gt;&gt;&gt; seq[:high]            # [seq[0],   seq[1],          ..., seq[high-1]]\n&gt;&gt;&gt; seq[low:high]         # [seq[low], seq[low+1],      ..., seq[high-1]]\n&gt;&gt;&gt; seq[::stride]         # [seq[0],   seq[stride],     ..., seq[-1]    ]\n&gt;&gt;&gt; seq[low::stride]      # [seq[low], seq[low+stride], ..., seq[-1]    ]\n&gt;&gt;&gt; seq[:high:stride]     # [seq[0],   seq[stride],     ..., seq[high-1]]\n&gt;&gt;&gt; seq[low:high:stride]  # [seq[low], seq[low+stride], ..., seq[high-1]]\n</code></pre>\n\n<p>Of course, if <code>(high-low)%stride != 0</code>, then the end point will be a little lower than <code>high-1</code>.</p>\n\n<p>Extended slicing (with commas and ellipses) are mostly used only by special data structures (like Numpy); the basic sequences don't support them.</p>\n\n<pre><code>&gt;&gt;&gt; class slicee:\n...     def __getitem__(self, item):\n...         return `item`\n...\n&gt;&gt;&gt; slicee()[0, 1:2, ::5, ...]\n'(0, slice(1, 2, None), slice(None, None, 5), Ellipsis)'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answers above don't discuss slice assignment:</p>\n\n<pre><code>&gt;&gt;&gt; r=[1,2,3,4]\n&gt;&gt;&gt; r[1:1]\n[]\n&gt;&gt;&gt; r[1:1]=[9,8]\n&gt;&gt;&gt; r\n[1, 9, 8, 2, 3, 4]\n&gt;&gt;&gt; r[1:1]=['blah']\n&gt;&gt;&gt; r\n[1, 'blah', 9, 8, 2, 3, 4]\n</code></pre>\n\n<p>This may also clarify the difference between slicing and indexing.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>And a couple of things that weren't immediately obvious to me when I first saw the slicing syntax:</p>\n\n<pre><code>&gt;&gt;&gt; x = [1,2,3,4,5,6]\n&gt;&gt;&gt; x[::-1]\n[6,5,4,3,2,1]\n</code></pre>\n\n<p>Easy way to reverse sequences!</p>\n\n<p>And if you wanted, for some reason, every second item in the reversed sequence:</p>\n\n<pre><code>&gt;&gt;&gt; x = [1,2,3,4,5,6]\n&gt;&gt;&gt; x[::-2]\n[6,4,2]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Found this great table at <a href=\"http://wiki.python.org/moin/MovingToPythonFromOtherLanguages\">http://wiki.python.org/moin/MovingToPythonFromOtherLanguages</a></p>\n\n<pre><code>Python indexes and slices for a six-element list.\nIndexes enumerate the elements, slices enumerate the spaces between the elements.\n\nIndex from rear:    -6  -5  -4  -3  -2  -1      a=[0,1,2,3,4,5]    a[1:]==[1,2,3,4,5]\nIndex from front:    0   1   2   3   4   5      len(a)==6          a[:5]==[0,1,2,3,4]\n                   +---+---+---+---+---+---+    a[0]==0            a[:-2]==[0,1,2,3]\n                   | a | b | c | d | e | f |    a[5]==5            a[1:2]==[1]\n                   +---+---+---+---+---+---+    a[-1]==5           a[1:-1]==[1,2,3,4]\nSlice from front:  :   1   2   3   4   5   :    a[-2]==4\nSlice from rear:   :  -5  -4  -3  -2  -1   :\n                                                b=a[:]\n                                                b==[0,1,2,3,4,5] (shallow copy of a)</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In python 2.7</p>\n\n<p>Slicing in python</p>\n\n<pre><code>[a:b:c] \n\nlen = length of string, tuple or list\n\nc -- default is  +1. sign of c indicates forward or backward, absolute value of c indicates steps. Default is forward with step size 1. Positive means forward, negative means backward.\n\na --  when c is positive or blank, default is 0. when c is negative, default is -1.\n\nb --  when c is positive or blank, default is len. when c is negative, default is -(len+1).\n</code></pre>\n\n<p>Understanding index assignment is very important.</p>\n\n<pre><code>In forward direction, starts at 0 and ends at len-1\n\nIn backward direction, starts at -1 and ends at -len\n</code></pre>\n\n<p>when you say [a:b:c] you are saying depending on sign of c (forward or backward), start at a and end at b ( excluding element at bth index). Use the indexing rule above and remember you will only find elements in this range </p>\n\n<pre><code>-len, -len+1, -len+2, ..., 0, 1, 2,3,4 , len -1\n</code></pre>\n\n<p>but this range continues in both directions infinitely</p>\n\n<pre><code>...,-len -2 ,-len-1,-len, -len+1, -len+2, ..., 0, 1, 2,3,4 , len -1, len, len +1, len+2 , ....\n</code></pre>\n\n<p>e.g.   </p>\n\n<pre><code>             0    1    2   3    4   5   6   7   8   9   10   11         \n             a    s    t   r    i   n   g    \n    -9  -8  -7   -6   -5  -4   -3  -2  -1        \n</code></pre>\n\n<p>if your choice of a , b and c allows overlap with the range above as you traverse using rules for a,b,c above you will either get a list with elements (touched during traversal) or you will get an empty list.</p>\n\n<p>One last thing: if a and b are equal , then also you get an empty list</p>\n\n<pre><code>&gt;&gt;&gt; l1\n[2, 3, 4]\n\n&gt;&gt;&gt; l1[:]\n[2, 3, 4]\n\n&gt;&gt;&gt; l1[::-1] # a default is -1 , b default is -(len+1)\n[4, 3, 2]\n\n&gt;&gt;&gt; l1[:-4:-1] # a default is -1\n[4, 3, 2]\n\n&gt;&gt;&gt; l1[:-3:-1] # a default is -1 \n[4, 3]\n\n&gt;&gt;&gt; l1[::] # c default is +1, so a default is 0, b default is len\n[2, 3, 4]\n\n&gt;&gt;&gt; l1[::-1] # c is -1 , so a default is -1 and b default is -(len+1)\n[4, 3, 2]\n\n\n&gt;&gt;&gt; l1[-100:-200:-1] # interesting\n[]\n\n&gt;&gt;&gt; l1[-1:-200:-1] # interesting\n[4, 3, 2]\n\n\n&gt;&gt;&gt; l1[-1:-1:1]\n[]\n\n\n&gt;&gt;&gt; l1[-1:5:1] # interesting\n[4]\n\n\n&gt;&gt;&gt; l1[1:-7:1]\n[]\n\n&gt;&gt;&gt; l1[1:-7:-1] # interesting\n[3, 2]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>After using it a bit I realise that the simplest description is that it is exactly the same as the arguments in a for loop...</p>\n\n<pre><code>(from:to:step)\n</code></pre>\n\n<p>any of them are optional</p>\n\n<pre><code>(:to:step)\n(from::step)\n(from:to)\n</code></pre>\n\n<p>then the negative indexing just needs you to add the length of the string to the negative indices to understand it.</p>\n\n<p>This works for me anyway...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm aiming for the complete canonical answer here.</p>\n\n<p>Python slicing is a computationally fast way to methodically access parts of your data. In my opinion, to be even an intermediate Python programmer, it's one aspect of the language that it is necessary to be familiar with.</p>\n\n<h3>Important Definitions</h3>\n\n<p>To begin with, let's define a few terms:</p>\n\n<blockquote>\n  <p><strong>start:</strong> the beginning index of the slice, it will include the element at this index unless it is the same as <em>stop</em>, defaults to 0, i.e. the first index. If it's negative, it means to start <code>n</code> items from the end.</p>\n  \n  <p><strong>stop:</strong> the ending index of the slice, it does <em>not</em> include the element at this index, defaults to length of the sequence being sliced, that is, up to and including the end.</p>\n  \n  <p><strong>step:</strong> the amount by which the index increases, defaults to 1. If it's negative, you're slicing over the iterable in reverse.</p>\n</blockquote>\n\n<h3>How Indexing Works</h3>\n\n<p>You can make any of these positive or negative numbers. The meaning of the positive numbers is straightforward, but for negative numbers, just like indexes in Python, you count backwards from the end for the <em>start</em> and <em>stop</em>, and for the <em>step</em>, you simply decrement your index. This example is <a href=\"https://docs.python.org/2/tutorial/introduction.html\">from the documentation's tutorial</a>, but I've modified it slightly to indicate which item in a sequence each index references:</p>\n\n<pre><code> +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n   0   1   2   3   4   5 \n  -6  -5  -4  -3  -2  -1\n</code></pre>\n\n<h3>How Slicing Works</h3>\n\n<p>To use slice notation with a sequence that supports it, you must include at least one colon in the square brackets that follow the sequence (which actually <a href=\"https://docs.python.org/2/reference/datamodel.html#object.__getitem__\">implement the <code>__getitem__</code> method of the sequence, according to the Python data model</a>.)</p>\n\n<p>Slice notation works like this:</p>\n\n<pre><code>sequence[start:stop:step]\n</code></pre>\n\n<p>And recall that there are defaults for <em>start</em>, <em>stop</em>, and <em>step</em>, so to access the defaults, simply leave out the argument, <code>n</code> in the notation.\nSlice notation to get the every other elements from nine elements from a list (or any other sequence that supports it, like a string) would look like this:</p>\n\n<pre><code>my_list[-9:]\n</code></pre>\n\n<p>When I see this, I read the part in the brackets as \"9th from the end, to the end.\" (Actually, I abbreviate it mentally as \"-9, on\")</p>\n\n<h3>Explanation:</h3>\n\n<p>The full notation is </p>\n\n<pre><code>my_list[-9:None:None]\n</code></pre>\n\n<p>and to substitute the defaults (actually when <code>step</code> is negative, <code>stop</code>'s default is <code>-len(my_list)-1</code>), so <code>None</code> for stop really just means it goes to whichever end step takes it to):</p>\n\n<pre><code>my_list[-9:len(my_list):1]\n</code></pre>\n\n<p>But the <strong>colon</strong>, <code>:</code>,  is what tells Python you're giving it a slice and not a regular index. That's why the idiomatic way of making a shallow copy of lists in Python 2 is</p>\n\n<pre><code>list_copy = sequence[:]\n</code></pre>\n\n<p>And clearing them is with:</p>\n\n<pre><code>del my_list[:]\n</code></pre>\n\n<p>(Python 3 gets a <code>list.copy</code> and <code>list.clear</code> method.)</p>\n\n<h3>Give your slices a descriptive name!</h3>\n\n<p>You may find it useful to separate forming the slice from passing it to the <code>list.__getitem__</code> method (<a href=\"https://docs.python.org/2/reference/datamodel.html#object.__getitem__\">that's what the square brackets do</a>). Even if you're not new to it, it keeps your code more readable so that others that may have to read your code can more readily understand what you're doing.</p>\n\n<p>However, you can't just assign some integers separated by colons to a variable. You need to use the slice object:</p>\n\n<pre><code>last_nine_slice = slice(-9, None)\n</code></pre>\n\n<p>The second argument, <code>None</code>, is required, so that the first argument is interpreted as the <code>start</code> argument <a href=\"https://docs.python.org/2/library/functions.html#slice\">otherwise it would be the <code>stop</code> argument</a>. </p>\n\n<p>You can then pass the slice object to your sequence:</p>\n\n<pre><code>&gt;&gt;&gt; list(range(100))[last_nine_slice]\n[91, 92, 93, 94, 95, 96, 97, 98, 99]\n</code></pre>\n\n<h3>Memory Considerations:</h3>\n\n<p>Since slices of Python lists create new objects in memory, another important function to be aware of is <code>itertools.islice</code>. Typically you'll want to iterate over a slice, not just have it created statically in memory. <code>islice</code> is perfect for this. A caveat, it doesn't support negative arguments to <code>start</code>, <code>stop</code>, or <code>step</code>, so if that's an issue you may need to calculate indices or reverse the iterable in advance.</p>\n\n<pre><code>&gt;&gt;&gt; length = 100\n&gt;&gt;&gt; last_nine_iter = itertools.islice(list(range(length)), length-9, None, 1)\n&gt;&gt;&gt; list_last_nine = list(last_nine)\n&gt;&gt;&gt; list_last_nine\n[91, 92, 93, 94, 95, 96, 97, 98, 99]\n</code></pre>\n\n<p>The fact that list slices make a copy is a feature of lists themselves. If you're slicing advanced objects like a Pandas DataFrame, it may return a view on the original, and not a copy. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I use the \"an index points between elements\" method of thinking about it myself, but one way of describing it which sometimes helps others get it is this:</p>\n\n<pre><code>mylist[X:Y]\n</code></pre>\n\n<p>X is the index of the first element you want.<br>\nY is the index of the first element you <em>don't</em> want.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I find it easier to remember how it's works, then I can figure out any specific start/stop/step combination.</p>\n\n<p>It's instructive to understand <code>range()</code> first:</p>\n\n<pre><code>def range(start=0, stop, step=1):  # illegal syntax, but that's the effect\n    i = start\n    while (i &lt; stop if step &gt; 0 else i &gt; stop):\n        yield i\n        i += step\n</code></pre>\n\n<p>Begin from <code>start</code>, increment by <code>step</code>, do not reach <code>stop</code>.  Very simple.</p>\n\n<p>The thing to remember about negative step is that <code>stop</code> is always the excluded end, whether it's higher or lower. If you want same slice in opposite order, it's much cleaner to do the reversal separately: e.g. <code>'abcde'[1:-2][::-1]</code> slices off one char from left, two from right, then reverses. (See also <a href=\"http://www.python.org/dev/peps/pep-0322/\"><code>reversed()</code></a>.)</p>\n\n<p>Sequence slicing is same, except it first normalizes negative indexes, and can never go outside the sequence:</p>\n\n<pre><code>def this_is_how_slicing_works(seq, start=None, stop=None, step=1):\n    if start is None:\n        start = (0 if step &gt; 0 else len(seq)-1)\n    elif start &lt; 0:\n        start += len(seq)\n    if stop is None:\n        stop = (len(seq) if step &gt; 0 else -1)  # really -1, not last element\n    elif stop &lt; 0:\n        stop += len(seq)\n    for i in range(start, stop, step):\n        if 0 &lt;= i &lt; len(seq):\n            yield seq[i]\n</code></pre>\n\n<p>Don't worry about the <code>is None</code> details - just remember that omitting <code>start</code> and/or <code>stop</code> always does the right thing to give you the whole sequence.</p>\n\n<p>Normalizing negative indexes first allows start and/or stop to be counted from the end independently: <code>'abcde'[1:-2] == 'abcde'[1:3] == 'bc'</code> despite <code>range(1,-2) == []</code>.\nThe normalization is sometimes thought of as \"modulo the length\" but note it adds the length just once: e.g. <code>'abcde'[-53:42]</code> is just the whole string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use slice assignment to remove one or more elements from a list:</p>\n\n<pre><code>r = [1, 'blah', 9, 8, 2, 3, 4]\n&gt;&gt;&gt; r[1:4] = []\n&gt;&gt;&gt; r\n[1, 2, 3, 4]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>index:\n      ------------&gt;\n  0   1   2   3   4\n+---+---+---+---+---+\n| a | b | c | d | e |\n+---+---+---+---+---+\n  0  -4  -3  -2  -1\n      &lt;------------\n\nslice:\n    &lt;---------------|\n|---------------&gt;   \n:   1   2   3   4   :\n+---+---+---+---+---+\n| a | b | c | d | e |\n+---+---+---+---+---+\n:  -4  -3  -2  -1   :\n|---------------&gt;   \n    &lt;---------------|\n</code></pre>\n\n<p>hope this will help you to model the list in Python</p>\n\n<p>reference:<a href=\"http://wiki.python.org/moin/MovingToPythonFromOtherLanguages\">http://wiki.python.org/moin/MovingToPythonFromOtherLanguages</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python slicing notation:</p>\n\n<pre><code>a[start:end:step]\n</code></pre>\n\n<ul>\n<li>For <code>start</code> and <code>end</code>, negative values are interpreted as being relative to the end of the sequence.</li>\n<li>Positive indices for <code>end</code> indicate the position <em>after</em> the last element to be included.</li>\n<li>Blank values are defaulted as follows: <code>[+0:-0:1]</code>.</li>\n<li>Using a negative step reverses the interpretation of <code>start</code> and <code>end</code></li>\n</ul>\n\n<p>The notation extends to (numpy) matrices and multidimensional arrays.  For example, to slice entire columns you can use:</p>\n\n<pre><code>m[::,0:2:] ## slice the first two columns\n</code></pre>\n\n<p>Slices hold references, not copies, of the array elements.  If you want to make a separate copy an array, you can use <a href=\"http://stackoverflow.com/questions/6532881/how-to-make-a-copy-of-a-2d-array-in-python\"><code>deepcopy()</code></a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As a general rule, writing code with a lot of hardcoded index values leads to a readability\nand maintenance mess. For example, if you come back to the code a year later, you\u2019ll\nlook at it and wonder what you were thinking when you wrote it. The solution shown\nis simply a way of more clearly stating what your code is actually doing.\nIn general, the built-in slice() creates a slice object that can be used anywhere a slice\nis allowed. For example:</p>\n\n<pre><code>&gt;&gt;&gt; items = [0, 1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; a = slice(2, 4)\n&gt;&gt;&gt; items[2:4]\n[2, 3]\n&gt;&gt;&gt; items[a]\n[2, 3]\n&gt;&gt;&gt; items[a] = [10,11]\n&gt;&gt;&gt; items\n[0, 1, 10, 11, 4, 5, 6]\n&gt;&gt;&gt; del items[a]\n&gt;&gt;&gt; items\n[0, 1, 4, 5, 6]\n</code></pre>\n\n<p>If you have a slice instance s, you can get more information about it by looking at its\ns.start, s.stop, and s.step attributes, respectively. For example:</p>\n\n<blockquote>\n<pre><code>&gt;&gt;&gt; a = slice(10, 50, 2)\n&gt;&gt;&gt; a.start\n10\n&gt;&gt;&gt; a.stop\n50\n&gt;&gt;&gt; a.step\n2\n&gt;&gt;&gt;\n</code></pre>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is just for some extra info...\nConsider the list below </p>\n\n<pre><code>&gt;&gt;&gt; l=[12,23,345,456,67,7,945,467]\n</code></pre>\n\n<p>Few other tricks for reversing the list:</p>\n\n<pre><code>&gt;&gt;&gt; l[len(l):-len(l)-1:-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n&gt;&gt;&gt; l[:-len(l)-1:-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n&gt;&gt;&gt; l[len(l)::-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n&gt;&gt;&gt; l[::-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n&gt;&gt;&gt; l[-1:-len(l)-1:-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n</code></pre>\n\n<p>See abc's answer above</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is how I teach slices to newbies:</p>\n\n<p><strong>Understanding difference between indexing and slicing:</strong></p>\n\n<p>Wiki Python has this amazing picture which clearly distinguishes indexing and slicing.</p>\n\n<p><img src=\"http://i.stack.imgur.com/o99aU.png\" alt=\"enter image description here\"></p>\n\n<p>It is a list with 6 elements in it. To understand slicing better, consider that list as a set of six boxes placed together. Each box has an alphabet in it.</p>\n\n<p>Indexing is like dealing with the contents of box. You can check contents of any box. But You can't check contents of multiple boxes at once. You can even replace contents of the box. But You can't place 2 balls in 1 box or replace 2 balls at a time.</p>\n\n<pre><code>In [122]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [123]: alpha\nOut[123]: ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [124]: alpha[0]\nOut[124]: 'a'\n\nIn [127]: alpha[0] = 'A'\n\nIn [128]: alpha\nOut[128]: ['A', 'b', 'c', 'd', 'e', 'f']\n\nIn [129]: alpha[0,1]\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-129-c7eb16585371&gt; in &lt;module&gt;()\n----&gt; 1 alpha[0,1]\n\nTypeError: list indices must be integers, not tuple\n</code></pre>\n\n<p>Slicing is like dealing with boxes itself. You can pickup first box and place it on another table. To pickup the box all You need to know is the position of beginning  &amp; ending of the box.</p>\n\n<p>You can even pickup first 3 boxes or last 2 boxes or all boxes between 1 &amp; 4. So, You can pick any set of boxes if You know beginning &amp; ending. This positions are called start &amp; stop positions.</p>\n\n<p>The interesting thing is that You can replace multiple boxes at once. Also You can place multiple boxes where ever You like.</p>\n\n<pre><code>In [130]: alpha[0:1]\nOut[130]: ['A']\n\nIn [131]: alpha[0:1] = 'a'\n\nIn [132]: alpha\nOut[132]: ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [133]: alpha[0:2] = ['A', 'B']\n\nIn [134]: alpha\nOut[134]: ['A', 'B', 'c', 'd', 'e', 'f']\n\nIn [135]: alpha[2:2] = ['x', 'xx']\n\nIn [136]: alpha\nOut[136]: ['A', 'B', 'x', 'xx', 'c', 'd', 'e', 'f']\n</code></pre>\n\n<p><strong>Slicing With Step:</strong></p>\n\n<p>Till now You have picked boxes continuously. But some times You need to pickup discretely. For example You can pickup every second box. You can even pickup every third box from the end. This value is called step size. This represents the gap between Your successive pickups. The step size should be positive if You are picking boxes from the beginning to end and vice versa.</p>\n\n<pre><code>In [137]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [142]: alpha[1:5:2] \nOut[142]: ['b', 'd']\n\nIn [143]: alpha[-1:-5:-2]\nOut[143]: ['f', 'd']\n\nIn [144]: alpha[1:5:-2]\nOut[144]: []\n\nIn [145]: alpha[-1:-5:2]      \nOut[145]: []\n</code></pre>\n\n<p><strong>How Python Figures Out Missing Parameters:</strong></p>\n\n<p>When slicing if You leave out any parameter, Python tries to figure it out automatically.</p>\n\n<p>If You check source code of CPython, You will find a function called PySlice_GetIndicesEx which figures out indices to a slice for any given parameters. Here is the logical equivalent code in Python.</p>\n\n<p>This function takes a Python object &amp; optional parameters for slicing and returns start, stop, step &amp; slice length for the requested slice.</p>\n\n<pre><code>def py_slice_get_indices_ex(obj, start=None, stop=None, step=None):\n\n    length = len(obj)\n\n    if step is None:\n        step = 1\n    if step == 0:\n        raise Exception(\"Step cannot be zero.\")\n\n    if start is None:\n        start = 0 if step &gt; 0 else length - 1\n    else:\n        if start &lt; 0:\n            start += length\n        if start &lt; 0:\n            start = 0 if step &gt; 0 else -1\n        if start &gt;= length:\n            start = length if step &gt; 0 else length - 1\n\n    if stop is None:\n        stop = length if step &gt; 0 else -1\n    else:\n        if stop &lt; 0:\n            stop += length\n        if stop &lt; 0:\n            stop = 0 if step &gt; 0 else -1\n        if stop &gt;= length:\n            stop = length if step &gt; 0 else length - 1\n\n    if (step &lt; 0 and stop &gt;= start) or (step &gt; 0 and start &gt;= stop):\n        slice_length = 0\n    elif step &lt; 0:\n        slice_length = (stop - start + 1)/(step) + 1\n    else:\n        slice_length = (stop - start - 1)/(step) + 1\n\n    return (start, stop, step, slice_length)\n</code></pre>\n\n<p>This is the intelligence that is present behind slices. Since Python has inbuilt function called slice, You can pass some parameters &amp; check how smartly it calculates missing parameters.</p>\n\n<pre><code>In [21]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [22]: s = slice(None, None, None)\n\nIn [23]: s\nOut[23]: slice(None, None, None)\n\nIn [24]: s.indices(len(alpha)) \nOut[24]: (0, 6, 1)\n\nIn [25]: range(*s.indices(len(alpha)))\nOut[25]: [0, 1, 2, 3, 4, 5]\n\nIn [26]: s = slice(None, None, -1) \n\nIn [27]: range(*s.indices(len(alpha)))\nOut[27]: [5, 4, 3, 2, 1, 0]\n\nIn [28]: s = slice(None, 3, -1)        \n\nIn [29]: range(*s.indices(len(alpha)))\nOut[29]: [5, 4]\n</code></pre>\n\n<p><strong>Note:</strong> This post is originally written in my blog <a href=\"http://www.avilpage.com/2015/03/a-slice-of-python-intelligence-behind.html\">http://www.avilpage.com/2015/03/a-slice-of-python-intelligence-behind.html</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you prefer a video and voiceover instead, the guy in <a href=\"http://youtu.be/tKTZoB2Vjuk?t=42m34s\" rel=\"nofollow\">the Google Python course (click here)</a> talks about slice syntax and some of its practical uses, starting from the time index 42:34; the link will take you to that point.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To get a certain piece of an iterable (like a list), here is an example:</p>\n\n<pre><code>variable[number1:number2]\n</code></pre>\n\n<p>In this example, a positive number for number 1 is how many components you take off the front. A negative number is the exact opposite, how many you keep from the end. A positive number for number 2 indicates how many components you intend to keep from the beginning, and a negative is how many you intend to take off from the end. This is somewhat counter intuitive, but you are correct in supposing that list slicing is extremely useful.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>#!/usr/bin/env python\n\ndef slicegraphical(s, lista):\n\n    if len(s) &gt; 9:\n        print \"\"\"Enter a string of maximum 9 characters,\n    so the printig would looki nice\"\"\"\n        return 0;\n    # print \" \",\n    print '  '+'+---' * len(s) +'+'\n    print ' ',\n    for letter in s:\n        print '| {}'.format(letter),\n    print '|'\n    print \" \",; print '+---' * len(s) +'+'\n\n    print \" \",\n    for letter in range(len(s) +1):\n        print '{}  '.format(letter),\n    print \"\"\n    for letter in range(-1*(len(s)), 0):\n        print ' {}'.format(letter),\n    print ''\n    print ''\n\n\n    for triada in lista:\n        if len(triada) == 3:\n            if triada[0]==None and triada[1] == None and triada[2] == None:\n                # 000\n                print s+'[   :   :   ]' +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] == None and triada[1] == None and triada[2] != None:\n                # 001\n                print s+'[   :   :{0:2d} ]'.format(triada[2], '','') +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] == None and triada[1] != None and triada[2] == None:\n                # 010\n                print s+'[   :{0:2d} :   ]'.format(triada[1]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] == None and triada[1] != None and triada[2] != None:\n                # 011\n                print s+'[   :{0:2d} :{1:2d} ]'.format(triada[1], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] == None and triada[2] == None:\n                # 100\n                print s+'[{0:2d} :   :   ]'.format(triada[0]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] == None and triada[2] != None:\n                # 101\n                print s+'[{0:2d} :   :{1:2d} ]'.format(triada[0], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] != None and triada[2] == None:\n                # 110\n                print s+'[{0:2d} :{1:2d} :   ]'.format(triada[0], triada[1]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] != None and triada[2] != None:\n                # 111\n                print s+'[{0:2d} :{1:2d} :{2:2d} ]'.format(triada[0], triada[1], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]\n\n        elif len(triada) == 2:\n            if triada[0] == None and triada[1] == None:\n                # 00\n                print s+'[   :   ]    ' + ' = ', s[triada[0]:triada[1]]\n            elif triada[0] == None and triada[1] != None:\n                # 01\n                print s+'[   :{0:2d} ]    '.format(triada[1]) + ' = ', s[triada[0]:triada[1]]\n            elif triada[0] != None and triada[1] == None:\n                # 10\n                print s+'[{0:2d} :   ]    '.format(triada[0]) + ' = ', s[triada[0]:triada[1]]\n            elif triada[0] != None and triada[1] != None:\n                # 11\n                print s+'[{0:2d} :{1:2d} ]    '.format(triada[0],triada[1]) + ' = ', s[triada[0]:triada[1]]\n\n        elif len(triada) == 1:\n            print s+'[{0:2d} ]        '.format(triada[0]) + ' = ', s[triada[0]]\n\n\nif __name__ == '__main__':\n    # Change \"s\" to what ever string you like, make it 9 characters for\n    # better representation.\n    s = 'COMPUTERS'\n\n    # add to this list different lists to experement with indexes\n    # to represent ex. s[::], use s[None, None,None], otherwise you get an error\n    # for s[2:] use s[2:None]\n\n    lista = [[4,7],[2,5,2],[-5,1,-1],[4],[-4,-6,-1], [2,-3,1],[2,-3,-1], [None,None,-1],[-5,None],[-5,0,-1],[-5,None,-1],[-1,1,-2]]\n\n    slicegraphical(s, lista)\n</code></pre>\n\n<p>You can run this script and experiment with it, below is some samples that I got from the script.</p>\n\n<pre><code>  +---+---+---+---+---+---+---+---+---+\n  | C | O | M | P | U | T | E | R | S |\n  +---+---+---+---+---+---+---+---+---+\n  0   1   2   3   4   5   6   7   8   9   \n -9  -8  -7  -6  -5  -4  -3  -2  -1 \n\nCOMPUTERS[ 4 : 7 ]     =  UTE\nCOMPUTERS[ 2 : 5 : 2 ] =  MU\nCOMPUTERS[-5 : 1 :-1 ] =  UPM\nCOMPUTERS[ 4 ]         =  U\nCOMPUTERS[-4 :-6 :-1 ] =  TU\nCOMPUTERS[ 2 :-3 : 1 ] =  MPUT\nCOMPUTERS[ 2 :-3 :-1 ] =  \nCOMPUTERS[   :   :-1 ] =  SRETUPMOC\nCOMPUTERS[-5 :   ]     =  UTERS\nCOMPUTERS[-5 : 0 :-1 ] =  UPMO\nCOMPUTERS[-5 :   :-1 ] =  UPMOC\nCOMPUTERS[-1 : 1 :-2 ] =  SEUM\n[Finished in 0.9s]\n</code></pre>\n\n<p>When using a negative step, notice that the answer is shifted to the right by 1.</p>\n    </div>"]}]