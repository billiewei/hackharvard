[{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Celery documentation is not very clear in this topic.\nIn fact you need:</p>\n\n<pre><code>@app.task(queue='feed', base=Batches, flush_every=500, flush_interval=15)\ndef delete_products(requests):\n    // Now delete products here\n    ids = [req.kwargs['id'] for req in requests]\n    // Now i delete all ids in one transaction\n    for req in requests:\n        app.backend.mark_as_done(req.id, 'Done')\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>This gives you a queryset of events with the added <code>revenue</code> field which is the sum of all the prices of the tickets related to each Event</p>\n\n<pre><code>from django.db.models import Sum\nqs = Event.objects.annotate(revenue=Sum('products__price'))\n</code></pre>\n\n<p>Please refer to the official <a href=\"https://docs.djangoproject.com/en/1.8/topics/db/aggregation/#joins-and-aggregates\" rel=\"nofollow\">Django docs</a> for further info</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try updating to the latest gcc version. It should be fixed starting from somewhere in 4.8.2 or 4.8.3.<br>\nYou could also try updating to gcc 5.*.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>As @khelwood said, it simply iterates on two loops.</p>\n\n<p>It iterates through the values in <code>values</code>, assigning each value to the variable <code>i</code></p>\n\n<p>Inside such loop it does the same thing, iterating on the values of <code>othervalues</code> and assigning each value to the variable <code>x</code></p>\n\n<p>You can verify it simply adding a print statement inside the loop, that shows the values of <code>i</code> and <code>x</code></p>\n\n<pre><code>for i in values : \n    for x in othervalues :\n        print('i={}, x={}'.format(i,x))\n</code></pre>\n\n<p>e.g. with an input of</p>\n\n<pre><code>values = 'abc'\nothervalues = [1, 2, 3, 4, 5]\n</code></pre>\n\n<p>it produces</p>\n\n<pre><code>i=a, x=1\ni=a, x=2\ni=a, x=3\ni=a, x=4\ni=a, x=5\ni=b, x=1\ni=b, x=2\ni=b, x=3\ni=b, x=4\ni=b, x=5\ni=c, x=1\ni=c, x=2\ni=c, x=3\ni=c, x=4\ni=c, x=5\n</code></pre>\n\n<p>Please make sure you understand how iteration works in python, reading the <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\" rel=\"nofollow\">official docs</a>\nand <a href=\"http://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols\">this SO Q&amp;A</a>\nand more tutorials you can find on the internet.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>All values in the <code>letters</code> dictionary is a same dictionary; so changing in one value also affects other.</p>\n\n<pre><code>def initilize_dict():\n    for letter in ascii_lowercase:\n        letters[letter] = data  # &lt;--- referencing the same dictionary\n</code></pre>\n\n<p>Use separated dictionary objects to avoid it.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let me know if this approach works for you:</p>\n\n<pre><code>total_rate = 0\nvrates = 0\nfunrate = 0\nrates5 = 0\n\n\ndef food():\n    global rates5\n    # files are used\n    rates5 = 1\n    # calculate the rate and store the total rate in rates5\n\n\ndef recreation():\n    global funrate\n    # files are used\n    funrate = 2\n    # calculate the rate and store the total rate in funrate\n\n\ndef transport():\n    global vrates\n    # files are used\n    vrates = 3\n    # calculate the rate and store the total rate in vrates\n\nfood()\nrecreation()\ntransport()\ntotal_rate = rates5 + vrates + funrate\nprint\"The total amount =\", total_rate\n</code></pre>\n\n<p>another approach is this :</p>\n\n<pre><code>total_rate = 0\nvrates = 0\nfunrate = 0\nrates5 = 0\n\ndef facilities():\n    global total_rate, vrates, funrate, rates5\n\n    def food():\n        global rates5\n        # files are used\n        rates5 = 1\n        # calculate the rate and store the total rate in rates5\n\n    def recreation():\n        global total_rate, vrates, funrate, rates5\n        # files are used\n        funrate = 2\n        # calculate the rate and store the total rate in funrate\n\n    def transport():\n        global total_rate, vrates, funrate, rates5\n        # files are used\n        vrates = 3\n        # calculate the rate and store the total rate in vrates\n\n    food()\n    recreation()\n    transport()\n\nfacilities()\n\ntotal_rate=rates5 + vrates + funrate\nprint \"The total amount=\", total_rate\n</code></pre>\n\n<p>And a structured class solution for the problem:</p>\n\n<pre><code>class Facilities(object):\n    def __init__(self):\n        self.total_rate = 0\n        self.vrates = 0\n        self.funrate = 0\n        self.rates5 = 0\n\n    def food(self):\n        # files are used\n        self.rates5 = 1\n        # calculate the rate and store the total rate in rates5\n        return self.rates5\n\n    def recreation(self):\n        # files are used\n        self.funrate = 2\n        # calculate the rate and store the total rate in funrate\n        return self.funrate\n\n    def transport(self):\n        # files are used\n        self.vrates = 3\n        # calculate the rate and store the total rate in vrates\n        return self.vrates\n\n    def get_total_rate(self):\n        return self.food() + self.recreation() + self.transport()\n\nfacilities_obj = Facilities()\ntotal_rate = facilities_obj.food() + facilities_obj.recreation() + facilities_obj.transport()\n# another option\ntotal_rate = facilities_obj.get_total_rate()\nprint \"The total amount =\", total_rate\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are numerous issues with your program:</p>\n\n<ul>\n<li><code>facilities()</code> function doesn't return any value</li>\n<li>functions <code>food()</code>, <code>recreation()</code> and <code>transport()</code> declared but never called</li>\n<li><code>rates5</code>, <code>funrate</code> and <code>vrates</code> vars inside appropriate functions are defined in inner scope. The results are never returned</li>\n<li><code>rates5</code>, <code>funrate</code> and <code>vrates</code> in <code>total_rate=rates5+vrates+funrate</code> are unassigned</li>\n</ul>\n\n<p>Besides, I'm interested how you've run it successfully to get any result</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>exceptions</code> conflicts with builtin module <a href=\"http://docs.python.org/3/library/exceptions.html\" rel=\"nofollow\"><code>exception</code></a>.</p>\n\n<pre><code>&gt;&gt;&gt; import exceptions\n&gt;&gt;&gt; exceptions.LexError\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'module' object has no attribute 'LexError'\n&gt;&gt;&gt; from exceptions import LexError\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nImportError: cannot import name LexError\n</code></pre>\n\n<p>Use different module name.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>There isn't one specific command with this functionality, but you can build arrays up with <code>numpy.concatenate</code> this way:</p>\n\n<pre><code>import numpy\n\nstart = 0\nend = 1\nbigstep = 0.1\n\nrefinedstart = 0.4\nrefinedend = 0.6\nsmallstep = 0.01\n\nx = numpy.concatenate([numpy.arange(start, refinedstart, bigstep),\n                       numpy.arange(refinedstart, refinedend, smallstep),\n                       numpy.arange(refinedend, end, bigstep)])\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The problem is that your <code>__init__</code> takes three arguments (including <code>self</code>) and you have supplied just two in your <code>__add__</code> method, hence the <code>TypeError</code> for <code>__init__</code>:</p>\n\n<pre><code>TypeError: __init__() takes exactly 3 arguments (2 given)\n</code></pre>\n\n<p>So in your <code>__add__</code> you should add (no pun intended) the <code>brand</code> argument:</p>\n\n<pre><code>def __add__(self, other):\n    return Car(self.brand+other.brand, self.cost+other.cost)\n</code></pre>\n\n<p>So you'll get a <code>\"Honda BMW\"</code> in this case which probably isn't what you want. </p>\n\n<p>Either way, I'm sure you understand the error now and you'll fix it to get the functionality you want. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In the <code>__add__</code> method, you should pass two arguments; <code>brand</code> is missing:</p>\n\n<pre><code>def __add__(self,other):\n    return Car('', self.cost+other.cost)\n    #          ^^\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The error is here:</p>\n\n<pre><code>        if operation == '+':\n            answer == num1+num2\n        elif operation == '-':\n            answer == num1-num2\n        elif operation == '*':\n            answer == num1*num2\n</code></pre>\n\n<p>The three lines of the form <code>answer == num1+num2</code> compare whether <code>answer</code> (which you initially set to <code>1</code>) is equal to <code>num1+num2</code>, and then doing nothing with the result of that comparison.</p>\n\n<p>I imagine you want the following instead:</p>\n\n<pre><code>        if operation == '+':\n            answer = num1+num2\n        elif operation == '-':\n            answer = num1-num2\n        elif operation == '*':\n            answer = num1*num2\n</code></pre>\n\n<p>You might also want to consider moving the part of your program that asks your name outside of the <code>for</code> loop - at the moment it's asking you your name before each question.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li>Remove <code>askbot</code> from <code>requirements.txt</code></li>\n<li>Add <code>RUN pip install -q -U git+git://github.com/ASKBOT/askbot-devel@master</code> after <code>RUN pip install -r requirements.txt</code></li>\n</ol>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The code is missing <code>()</code> after the <code>stdout.readlines</code>.</p>\n\n<pre><code>ssidresult = ssidRegex.search(str(stdout.readlines()))\n                                                  ^^\n</code></pre>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Using <code>read</code> method might be more appropirate, because <code>read</code> will return a string instead of a list of strings; no need to call <code>str</code>:</p>\n\n<pre><code>ssidresult = ssidRegex.search(stdout.read())\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>You should use os.urandom.</strong></p>\n\n<p>Quoting from the <a href=\"https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA-module.html#generate\" rel=\"nofollow\">PyCrypto documentation</a>:</p>\n\n<blockquote>\n  <p>randfunc (callable) - Random number generation function; <strong>it should accept a single integer N and return a string of random data N bytes long</strong>. If not specified, a new one will be instantiated from Crypto.Random.</p>\n</blockquote>\n\n<p></p>\n\n<p>and then there\u2019s an \u201cAttention\u201d section:</p>\n\n<blockquote>\n  <p>You should always use a cryptographically secure random number generator, such as the one defined in the Crypto.Random module; don't just use the current time and the random module.</p>\n</blockquote>\n\n<p></p>\n\n<p>The Crypto.Random module isn\u2019t present in PyCrypto 2.0.1, so you can\u2019t use this approach here. Instead, you should use <a href=\"https://docs.python.org/2/library/os.html#os.urandom\" rel=\"nofollow\"><code>os.urandom()</code></a>. Quoting from the docs (emphasis mine):</p>\n\n<blockquote>\n  <p>Return a string of n random bytes suitable for cryptographic use.</p>\n  \n  <p>This function returns random bytes from an OS-specific randomness source. <strong>The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation.</strong> On a UNIX-like system this will query /dev/urandom, and on Windows it will use CryptGenRandom(). If a randomness source is not found, NotImplementedError will be raised.</p>\n</blockquote>\n\n<p></p>\n\n<p>That sounds like an appropriate choice of randfunc to me.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>If I understand your question right, you want only the last row. This would read only the last row for <code>N</code> rows:</p>\n\n<pre><code>data = np.loadtxt(fname='data.txt', skiprows=N-1)\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>Generally it is preferable to increase readability by :\n    - choosing an adequate name     \n    - describing how it works\n</code></pre>\n\n<p>Choose your name such that it will be short and descriptive. For readability, use snake_case. For example : test_week_date.</p>\n\n<p>Always include a docstring in your function. This will allow the reader to get all necessary information if the name isn't clear enough OR if he doesn't really understand what the method does / how she does it.</p>\n\n<p>Conclusion : short and descriptive (snake_case) name with a docstring.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>It seems like you are getting what you ask for. See this line in your code:</p>\n\n<pre><code>print os.path.basename(directoryPath)\n</code></pre>\n\n<p>It prints the <code>directoryPath</code>.</p>\n\n<p>I think it should be:</p>\n\n<pre><code>import os\ndirectoryPath=raw_input('Directory for csv files: ')\nfor i,file in enumerate(os.listdir(directoryPath)):\n    if file.endswith(\".csv\"):\n        print os.path.basename(file)\n</code></pre>\n\n<p>Good luck!</p>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>Let's create a list of all file names without path and extension (l). Now:</p>\n\n<pre><code>for n in sorted(l, key=lambda x: int(x.split('_')[1])):\n    print n\n</code></pre>\n\n<p>Now you need to write your specific solution :)</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am also new to python but as per your requirement this may work.</p>\n\n<pre><code> text = raw_input(\"Type your text: \") \n words = text.split()\n print words\n for i in words:\n     print 'string=',i , ', length=',len(i)\n</code></pre>\n\n<p>Taking input from user and splitting it by spaces then loop over through the list <code>words</code> and use len function to get the string length instead of counting them individually </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Consider the built-in python function <code>sort()</code> (See: <a href=\"https://docs.python.org/2/tutorial/datastructures.html\" rel=\"nofollow\">Python docs</a>).</p>\n\n<p>You probably want to use a list instead of a dictionary for <code>d</code>, because the key is simply an int index. </p>\n\n<pre><code>d = text.split()\nd.sort(key=len(d[i]))\n\ncharcount = 1\nprev_i = 0\nfor i in range(len(d)):\n    if len(d[i]) &gt; len(d[i-1]):\n        print i-prev_i, \"words with %d characters\" % charcount\n        prev_i = i\n        charcount += 1\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Hope this will help :)</p>\n\n<pre><code>text = raw_input(\"Type your text: \")\nwords = text.split()\n\n\nprint (\"Result:\\nthe text contains\" + str(len(words)) + \"words\")\n\n# Using a list instead of a dictionary\nd = []\n\n# Loop over the list, word by word\nfor i in words:\n        # Exception if full stop found. Probably should filter out other characters as well to be safe. (cause user input)\n    if i.find('.')!=-1:\n        # Remove fullstops\n        q = i.replace(\".\", \"\")\n        # Add word to the end of our list\n        d.append(q)\n    else:\n        # If no punctuation encountered, just add the word\n        d.append(i)\n\n# test out\nprint d\n\n# The rest seems legit enough\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's easiest to use list comprehensions and built-in list methods: </p>\n\n<pre><code>text = raw_input('type:' )\ntype:adam sam jessica mike\nlens = [len(w) for w in text.split()]\nprint [lens.count(i) for i in range(10)]\n\n[0, 0, 0, 1, 2, 0, 0, 1, 0, 0]\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>I believe this will do</p>\n\n<pre><code>def insert_top_to_bottom(test_list, v):\n    return test_list[v : -1] + test_list[:v] + [test_list[-1]]\n\ntest_list = [1, 28, 3, 4, 27, 8, 7, 6, 5]\ntest_list = insert_top_to_bottom(test_list, 5)\nprint test_list\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is my attempt, though you should next time show your own attempts.\nPlease note that I did not include any type of checking or avoiding errors. Just the basics.</p>\n\n<pre><code>def top_to_bottom(l):\n    last = l[len(l)-1]\n    move_these = l[:last]\n    move_these.append(l[len(l)-1])\n    del l[:last]\n    del l[len(l)-1]\n    l.extend(move_these)\n</code></pre>\n\n<p>I hope I could help.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I didn't make it a one-line funtion so you can understand a bit better.\nSince you asked, here is some more explanaition about slicing.</p>\n\n<p>my_list[x:y] is a basic slice. This will output my_list from index x to (but <em>excluding</em> index y).</p>\n\n<p>You can leave out either, which will just fill up that part as far as possible.\nFor example, using</p>\n\n<pre><code>my_list[:5]\n</code></pre>\n\n<p>will give you my_list from the beginning to (but <em>excluding</em>!) index 5.\nIf the list is [0, 1, 2, 3, 4, 5, 6], it will give [0, 1, 2, 3, 4]. If you want to get a list from a certain index until the end, you leave out the 'y' part. Like so:</p>\n\n<pre><code>my_list[3:]\n</code></pre>\n\n<p>Applying that on the list previously stated, you will get [3, 4, 5, 6].</p>\n\n<p>I hope you understood! Comment if you have any more questions.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>this should work with you     </p>\n\n<pre><code>frame.loc[: , '2014']\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Make sure that the name is imported in the <code>urls.py</code>:</p>\n\n<pre><code>from adec.views import terms_and_conditions\n</code></pre>\n\n<p>Alternatively, use string instead:</p>\n\n<pre><code>url(r'^termsandconditions/$', 'adec.views.terms_and_conditions',\n    name='terms_and_conditions'),\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; [x + 'y' for x in lis]\n['dany', 'jimy', 'rokyy']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>lis = ['dan','jim','roky']\np=map(lambda x: x+'y',lis)</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>1. Pure python</strong></p>\n\n<pre><code>for x in xrange(offset_x, width):\n    for y in xrange(offset_y, height):\n        data[y][x] = buffer[y-offset_y][x-offset_x]\n</code></pre>\n\n<p><strong>2. numpy</strong></p>\n\n<pre><code>data[offset_y-1:,offset_x-1:] = buffer\n</code></pre>\n\n<p>I suppose that numpy will be faster in case of large datasets.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>save()</code> calls <code>make_thumbnail()</code>, which calls <code>self.thumbnail.save(...)</code>, which ends up calling <code>save()</code> again, and around and around it goes. </p>\n\n<p>You have to break the loop somewhere. My suggestion: <code>make_thumbnail()</code> shouldn't save anything, it should just create the thumbnail and store it on say <code>self._thumbnail_data= temp_thumb.read();</code>. </p>\n\n<p>Then in the <code>save()</code> function, only call <code>self.make_thumbnail()</code> if <code>self._thumbnail_data</code> isn't already set. Once you know <code>self._thumbnail_data</code> exists then you can do <code>self.thumbnail.save(thumb_filename, self._thumbnail_data, save=True)</code>. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This happens because <code>save</code> calls <code>make_thumbnail</code> and <code>make_thumbnail</code> calls <code>save</code> and when number of calls exeeds  <code>sys.getrecursionlimit()</code> <strong>RuntimeError - maximum recursion depth exceeded</strong> Error is raised. </p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You mentioned you want to return an error if the user enters something like '123'. Based off of that requirement, the problem in your code is right here: </p>\n\n<p>You are doing this check: </p>\n\n<pre><code>if symbol.isalpha():\n</code></pre>\n\n<p>Which will check if something is of alpha: <code>A-Z</code></p>\n\n<p>Therefore, in your else, you want to return your error when the alpha check fails:  </p>\n\n<p>So when you do this: </p>\n\n<pre><code>else:\n    translated += symbol\n</code></pre>\n\n<p>You want this: </p>\n\n<pre><code>else:\n    return \"input invalid\"\n</code></pre>\n\n<p>However, again, focusing on your code, this brings up another problem. You need to change how you are handling the return of your method, so the output makes more sense. You might want to consider something like this: </p>\n\n<pre><code>mode = getMode()\nmessage = getMessage()\nkey = getKey()\n\nresult = getTranslatedMessage(mode, message, key)\nif not result:\n    print(\"invalid\")\nelse:\n    print('Your translated text is: ', result)\n</code></pre>\n\n<p>Based on recent updates, you are looking to preserve whitespace. Therefore, you should consider changing your code to also handle whitespace by simply adding an <code>elif</code> condition for checking for whitespace and adding <code>' '</code> to your <code>translated</code> variable. So, the code in your for loop would then look like this: </p>\n\n<pre><code> for symbol in message:\n         if symbol.isalpha():\n             num = ord(symbol)\n             num += key\n\n             if symbol.isupper():\n                 if num &gt; ord('Z'):\n                     num -= 26\n                 elif num &lt; ord('A'):\n                     num += 26\n             elif symbol.islower():\n                 if num &gt; ord('z'):\n                     num -= 26\n                 elif num &lt; ord('a'):\n                     num += 26\n\n             translated += chr(num)\n         elif symbol.isspace():\n             translated += ' '\n         else:\n            return False\n</code></pre>\n\n<p>But Padraic's approach is really good and is definitely worth a look to consider refactoring.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you just want to allow alpha characters:</p>\n\n<pre><code>def getMessage():\n    while True:\n        message = input('Enter your message: ')\n        if message.isalpha():\n            return message\n        print(\"Invalid input, text must contain alphabetic characters only.\")\n</code></pre>\n\n<p>To allow spaces and letters:</p>\n\n<pre><code> if all(ch.isalpha() or ch.isspace() for ch in message):\n            return message\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have to write:</p>\n\n<pre><code>    Decrypt += chr((( x -Offset) % 94) + 32)\n</code></pre>\n\n<p>not </p>\n\n<pre><code>    Decrypt += chr(((Offset - x) % 94) + 32)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The problem is on this line:</p>\n\n<pre><code>Decrypt += chr(((Offset - x) % 94) + 32)\n</code></pre>\n\n<p>I\u2019m not sure where you got (Offset \u2013 x) from; you want to reverse the offset applied by the encryption process, so this line should be:</p>\n\n<pre><code>Decrypt += chr(((x - Offset) % 94) + 32)\n</code></pre>\n\n<p>You may want to adjust the Encrypt line to be symmetric.</p>\n\n<hr>\n\n<p>A few other quick comments:</p>\n\n<ul>\n<li><p>You can tidy up the if branches like this:</p>\n\n<pre><code>if choice.lower() == 'e':\nelif choice.lower() == 'd':\n</code></pre>\n\n<p>You may want to consider the case where the user types something which other than E or D.</p></li>\n<li><p>The Python style guide is <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP 8</a> \u2013 in general, variable names should be <code>snake_case</code>. The exceptions are classes (<code>CamelCase</code>) and constants (<code>UPPERCASE</code>).</p></li>\n<li><p>It\u2019s not obvious why  you\u2019re working mod 94, or adjusting by 32 places. It would be useful if your code contained a comment explaining this line.</p></li>\n<li><p>To reduce code repetition, you might want to wrap the offset code in a function. Then you could call it as follows:</p>\n\n<pre><code>encrypted_message = offset(message, places= 3)\ndecrypted_message = offset(message, places=-3)\n</code></pre>\n\n<p>It would also give you the symmetry of encryption/decryption for free, by just flipping the sign of the offset.</p></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should switch around the substraction, from</p>\n\n<pre><code>Decrypt += chr(((Offset - x) % 94) + 32)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>Decrypt += chr(((x - Offset) % 94) + 32)\n</code></pre>\n\n<p>Also, instead of using the second <code>if</code> you should use an <code>elif</code> (which stands for \"else if\") statement.</p>\n\n<pre><code>elif (Choice == 'd') or (Choice == 'D'):\n</code></pre>\n\n<p>Just good practice.</p>\n    </div>"]}]